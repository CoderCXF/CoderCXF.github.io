<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS BOM</title>
    <url>/2020/03/29/JS-BOM/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>javascript</code>由 <code>ECMAScript</code>、<code>BOM</code> 和 <code>DOM</code> 组成。<br>BOM (<code>Browser Object Model</code>) : 即浏览器对象模型。<br>BOM 允许开发者使用 <code>JavaScript</code> 操作浏览器。<br>BOM 没有统一的规范，不同的浏览器提供了几乎各不相同的BOM接口，这使得BOM既有意思又很复杂。</p>
<a id="more"></a>
<p>BOM中主要包含以下几个对象：</p>
<ul>
<li>window对象 ： 代表浏览器窗口；</li>
<li>Location对象 ： 用于获取和操作当前页面的地址信息；</li>
<li>Navigator对象 ： 用于获取和操作访问者的浏览器的信息；</li>
<li>screen对象： 用于获取用户的屏幕信息；</li>
<li>History对象 ： 用于获取和操作浏览器的历史信息。</li>
</ul>
<h1 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h1><p>所有浏览器都支持 window 对象。它代表浏览器的窗口。</p>
<p>所有全局 JavaScript 对象，函数和变量自动成为 window 对象的成员。</p>
<p>全局变量是 window 对象的属性。</p>
<p>全局函数是 window 对象的方法。<br>例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age = <span class="hljs-number">29</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayAge</span>(<span class="hljs-params"></span>) </span>&#123;<br>    alert(<span class="hljs-keyword">this</span>.age);<br>&#125;<br>alert(<span class="hljs-built_in">window</span>.age);<span class="hljs-comment">//29</span><br>sayAge();<span class="hljs-comment">//29</span><br><span class="hljs-built_in">window</span>.sayAge();<span class="hljs-comment">//29</span><br></code></pre></td></tr></table></figure>
<p>由于在全局作用域定义了一个全局变量和函数，所以他们自动的被认为是 <code>window</code> 对象的属性和方法。所以使用 <code>window</code> 和不使用 <code>window</code> 的结果是一样的。</p>
<h2 id="window属性"><a href="#window属性" class="headerlink" title="window属性"></a>window属性</h2><h3 id="窗口位置"><a href="#窗口位置" class="headerlink" title="窗口位置"></a>窗口位置</h3><p>1.用来确定和修改 <code>window</code> 对象( 窗口 )的属性和方法有很多。<br>主要有： </p>
<ul>
<li><code>screenLeft</code> ：窗口距离屏幕左边的位置坐标 ，IE Chrome Opera 和 Safari 提供</li>
<li><code>screenTop</code> : 窗口距离屏幕顶部的位置坐标</li>
<li><code>screenX</code> : 窗口距离屏幕左边的位置坐标 , Firfox 提供</li>
<li><code>screenY</code> : 窗口距离屏幕顶部的位置坐标</li>
</ul>
<p>最好的解决兼容性的问题的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> leftPos = (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">window</span>.screenLeft == <span class="hljs-string">"number"</span>) ? <span class="hljs-built_in">window</span>.screenLeft : <span class="hljs-built_in">window</span>.screenX;<br><span class="hljs-keyword">var</span> topPos = (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">window</span>.screenTop == <span class="hljs-string">"number"</span>) ? <span class="hljs-built_in">window</span>.screenTop : <span class="hljs-built_in">window</span>.screenY;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>可以自己感受一下这几个属性的含义。</p>
<p>虽然我们可以使用这几个属性访问不同的浏览器的窗口位置信息。但是每个浏览器的计算方法又是不一样。比如，有的浏览器的相对于顶部位置有可能是减去浏览器工具条之后的位置坐标。</p>
<p>最终结果是，无法获取在跨浏览器的条件下取得窗口左边和上边的精确位置。</p>
</blockquote>
<p>2.移动窗口位置</p>
<p>  我们可以使用 <code>JS</code> 来移动浏览器的窗口位置。很显然，根本不会用到这些属性。<br>  移动主要有两个方法：<code>moveTo()</code> 和 <code>moveBy()</code>。<br>  这两个方法都接收两个参数：分别表示 <code>X</code> 坐标和 <code>Y</code> 坐标。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.moveTo(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">//将窗口移动到左上角</span><br><span class="hljs-built_in">window</span>.moveTo(<span class="hljs-number">200</span>, <span class="hljs-number">300</span>); <span class="hljs-comment">//将窗口移动到(200, 300)</span><br><span class="hljs-built_in">window</span>.moveBy(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<span class="hljs-comment">//将窗口向下移动100像素</span><br><span class="hljs-built_in">window</span>.moveBy(<span class="hljs-number">200</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">//将窗口向右移动200像素</span><br></code></pre></td></tr></table></figure>
<h3 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h3><p>和位置一样，有以下几个属性：</p>
<ul>
<li>支持以下属性的浏览器是：IE9+ Firefox Opera Chrome Safari</li>
<li><code>innnerWidth</code> : </li>
<li><code>innnerHeight</code> :</li>
<li><code>outerWidth</code> :</li>
<li><code>outerHeight</code> :<br>虽然几乎所有的浏览器都支持上面三个属性，但是不同的浏览器的计算方法各不相同，所以也比较乱，理清楚就好了。</li>
</ul>
<p>主要有以下几个区别：</p>
<ul>
<li><code>Chrome</code> 浏览器中的上面四个属性中 <code>innnerWidth</code> 和 <code>outerWidth</code> 返回的都是浏览器的窗口的宽度，同样的 <code>innnerHeight</code> 和 <code>outerHeight</code> 返回的都是浏览器的窗口高度。</li>
<li>在IE9+ Firefox Safri 浏览器中，<code>outerWidth</code> 和 <code>outerHeight</code> 返回的是浏览器本身的尺寸，而 <code>innnerWidth</code> 和 <code>innnerHeight</code> 返回的是视口(一个标签页的)大小。</li>
<li>在Oprea中 <code>outerWidth</code> 和 <code>outerHeight</code> 返回的是视口大小，而 <code>innnerWidth</code> <code>outerWidth</code> 返回的都是浏览器页面视图区的大小( 减去边框宽度 )</li>
</ul>
<h2 id="window方法"><a href="#window方法" class="headerlink" title="window方法"></a>window方法</h2><p>上面介绍了 <code>window</code> 对象的几个常用的属性，除此之外，既然是对象就会有方法。<br>由于 <code>JS</code> 是单线程语言，所以某一个时刻只能执行指定的代码。</p>
<p>但是可以调用方法使得某一段程序延后执行或者是间歇执行。主要是以下两个方法：<br><code>setTimeout</code> : 经过一段时间后再执行相应的代码，称为超时调用；<br><code>setInterval()</code> : 每个一段固定的时间间隔执行相应的代码，称为间歇调用。</p>
<h3 id="超时调用"><a href="#超时调用" class="headerlink" title="超时调用"></a>超时调用</h3><p><code>setTimeout</code> 方法接受两个参数，第一个参数是包含 <code>JS</code> 的字符串也可以是一个函数，第二个参数是以毫秒表示时间。例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-string">"console.log('时间到，代码执行了!')"</span>, <span class="hljs-number">1000</span>);<span class="hljs-comment">//不推荐字符串</span><br></code></pre></td></tr></table></figure>
<p>推荐第一个参数使用函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"时间到，代码执行了!"</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure>
<p>以上两段代码经过 <code>1000ms</code> 后都会在控制台输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">时间到，代码执行了!<br></code></pre></td></tr></table></figure>
<ul>
<li><p>方法的返回值及取消调用</p>
<p>该方法会返回一个ID,表示超时在该页面中调用方法的ID，实际上是一个数字。如果是第一个就是 <code>ID == 1</code>，如果是第二个函数，返回值是2。使用该返回值我们可以很容易的定位这是第几个调用，可以随时取消该调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timeout1 = <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'HelloWorld!'</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">window</span>.clearTimeout(timeout1);<span class="hljs-comment">//把上面的这个超时调用的行为取消了</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h3 id="间歇调用"><a href="#间歇调用" class="headerlink" title="间歇调用"></a>间歇调用</h3><p><code>setInterval()</code> 方法也接受两个参数，第一个参数同样是包含 <code>JS</code> 的字符串也可以是函数，第二个参数是以毫秒表示的时间。例如:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.setInterval(<span class="hljs-string">"console.log('1s到了，代码执行了!')"</span>, <span class="hljs-number">1000</span>);<span class="hljs-comment">//不推荐字符串</span><br></code></pre></td></tr></table></figure>
<p>推荐第一个参数使用函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"1s到了，代码执行了!"</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure>
<p>以上两段经过 <code>1000ms</code> 后都会在控制台输出，无限循环。</p>
<ul>
<li>方法的返回值及取消间歇调用<br>该部分和 <code>setTimeout()</code> 方法一样。返回的是间歇调用的ID，以及使用该ID进行取消这一行为。<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> timeinterval = <span class="hljs-built_in">window</span>.setInterval(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'HelloWorld!'</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">window</span>.clearINterval(timeinterval);<span class="hljs-comment">//把上面的这个间歇调用的行为取消了</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h1><p><code>location</code> 对象是最有用的BOM对象之一，他提供了与当前窗口中加载的文档有关的信息。</p>
<p><code>location</code> 对象是一个很特别的对象，因为它既是 <code>window</code> 对象的属性，也是 <code>document</code> 对象的属性，但是一般我们在调用的时候不需要前缀，<code>window.location</code> 或者是 <code>document.location</code>。</p>
<p>1.该对象具有的属性有：</p>
<ul>
<li><code>host</code> : 返回服务器名称和端口号，例如：<code>www.codedancer.online:80</code>;</li>
<li><code>hostname</code> : 只返回服务器的名称，不包偶阔端口号：<code>www.codedancer.online</code>;</li>
<li><code>port</code> : 返回端口号，例如默认的 <code>80</code> 端口;</li>
<li><code>protocol</code> : 返回页面使用的协议，例如：<code>http</code> 或者是 <code>https</code>;</li>
<li><code>href</code> : 返回访问当前页面的完整的 <code>url</code>， 比如： <code>https://www.baidu.com</code>;</li>
<li><code>pathname</code> : 返回文档路径,例如：<code>/categories/</code>。</li>
</ul>
<p>2.方法:位置操作(切换URL)<br>使用location对象可以挺过很多的方式来改变浏览器的位置。<br>最常用的方法就是 <code>assign()</code>:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">location.assign(<span class="hljs-string">"https://www.baidu.com"</span>);<br></code></pre></td></tr></table></figure>
<p>这样就可以在立即打开新的URL并且在历史记录中生成一条新的记录。和下面的语法等价：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">location = <span class="hljs-string">"https://www.baidu.com"</span>;<br>location.href = <span class="hljs-string">"https://www.baidu.com"</span>;<br></code></pre></td></tr></table></figure>
<h1 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h1><p><code>navigator</code> 对象可以使我们可以获得用户浏览器的信息，比如说使用的什么类型的浏览器，浏览器安装的插件有哪些以及浏览器的 <code>cookie</code> 信息。</p>
<p>该对象的属性很多，但是一些根本不会使用，甚至即使用了也可能得不到我们期望的结果。</p>
<p>下面是经常使用的一些属性：具体的可以参考:<a href="https://www.w3school.com.cn/js/js_window_navigator.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/</a></p>
<ul>
<li><code>appName</code> : 完整的浏览器信息； </li>
<li><code>appCodeName</code> : 浏览器的名称，同城都是Mozilla，即使在非Mozilla的浏览器中也是如此；</li>
<li><code>platform</code> : 浏览器所在系统：windows、Mac OS、Linux等等；</li>
<li><code>language</code> : 浏览器的语言；</li>
<li><code>systemLanguage</code> : 浏览器所在系统的语言；</li>
<li><code>JavaEnable</code> : 当前浏览器是否开启Java；</li>
<li><code>plugins</code> : 获取插件信息。</li>
</ul>
<blockquote>
<p>每个浏览器的差别使得该对象很难使用，基本上不会使用。</p>
</blockquote>
<p>我们在 <code>Firefox</code> 以及在 <code>Chrome</code> 中获取以上信息的差别：<br><strong>在Firefox中</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(navigator.appName);<span class="hljs-comment">//输出：Netscape</span><br><span class="hljs-built_in">console</span>.log(navigator.appCodeName);<span class="hljs-comment">//输出: Mozilla</span><br><span class="hljs-built_in">console</span>.log(navigator.platform);<span class="hljs-comment">//输出: Win32</span><br><span class="hljs-built_in">console</span>.log(navigator.language);<span class="hljs-comment">//输出: zh_CN</span><br><span class="hljs-built_in">console</span>.log(navigator.systemLanguage);<span class="hljs-comment">//输出: undefined，火狐不支持</span><br><span class="hljs-built_in">console</span>.log(navigator.JavaEnable);<span class="hljs-comment">//输出: undefined,火狐不支持</span><br><span class="hljs-built_in">console</span>.log(navigator.plugins);<span class="hljs-comment">//输出: pluginArray &#123; length: 0 &#125;</span><br></code></pre></td></tr></table></figure>
<p><strong>在Chrome中</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(navigator.appName);<span class="hljs-comment">//输出：Netscape</span><br><span class="hljs-built_in">console</span>.log(navigator.appCodeName);<span class="hljs-comment">//输出: Mozilla</span><br><span class="hljs-built_in">console</span>.log(navigator.platform);<span class="hljs-comment">//输出: Win32</span><br><span class="hljs-built_in">console</span>.log(navigator.language);<span class="hljs-comment">//输出: zh_CN</span><br><span class="hljs-built_in">console</span>.log(navigator.systemLanguage);<span class="hljs-comment">//输出: undefined，Chrome不支持</span><br><span class="hljs-built_in">console</span>.log(navigator.JavaEnable);<span class="hljs-comment">//输出: undefined,Chrome不支持</span><br><span class="hljs-built_in">console</span>.log(navigator.plugins);<span class="hljs-comment">//输出: pluginArray</span><br></code></pre></td></tr></table></figure>
<p>由以上可以看出，在两个不同的浏览器中几乎没有任何区别，所以，要它有何用。</p>
<h1 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h1><p><code>screen</code> 对象更简单，表示的是用户( 访问者 ) 的屏幕信息。用处不大。</p>
<p>我们主要学习它的四个属性：</p>
<ul>
<li><code>width</code> : 获取用户屏幕的像素宽度；</li>
<li><code>height</code> : 获取用户屏幕的像素高度；</li>
<li><code>availWidth</code> : 屏幕的像素宽度减去系统部件宽度之后的值，小于或等于<code>width</code> 属性获取的值；</li>
<li><code>availHeight</code> : 屏幕的像素高度减去系统部件高度之后的值，小于或等于<code>height</code> 属性获取的值；</li>
</ul>
<blockquote>
<p>注意：屏幕大小并不是分辨率，而是指的是尺寸，因为同样的分辨率，如果是屏幕的大小不一样，说明每个像素点的大小不一样。</p>
</blockquote>
<h1 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h1><p><code>window.history</code> 对象可不带 window 书写。<br>为了保护用户的隐私，<code>JavaScript</code> 访问此对象存在限制。<br>最有可能使用的两个方法：</p>
<ul>
<li><code>history.back()</code> - 等同于在浏览器点击后退按钮</li>
<li><code>history.forward()</code> - 等同于在浏览器中点击前进按钮</li>
</ul>
<h2 id="back-方法"><a href="#back-方法" class="headerlink" title="back()方法"></a>back()方法</h2><p><code>history.back()</code> 方法加载历史列表中前一个 URL。</p>
<p>这等同于在浏览器中点击后退按钮。</p>
<p><strong>实例1</strong><br>在页面中创建后退按钮：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;html&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"btn"</span>);<br>        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          history.back();<br>        &#125;<br>        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn"</span>&gt;</span>back<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
<p><button type="button" onclick="window.history.back()">back</button></p>
<h2 id="forward-方法"><a href="#forward-方法" class="headerlink" title="forward() 方法"></a>forward() 方法</h2><p><code>history forward()</code> 方法加载历史列表中下一个 URL。</p>
<p>这等同于在浏览器中点击前进按钮。</p>
<p><strong>实例2</strong><br>在页面中创建前进按钮：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&lt;html&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>        <span class="hljs-keyword">var</span> btn = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"btn"</span>);<br>        btn.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>          history.back();<br>        &#125;<br>        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"btn"</span>&gt;</span>forward<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure>
<p><button type="button" onclick="window.history.forward()">forward</button></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>BOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基本引用类型</title>
    <url>/2020/03/28/JS%E5%9F%BA%E7%A1%801/</url>
    <content><![CDATA[<p>JS的语法简单，如果你有 <code>C++</code> 或者是 <code>Java</code> 等其他面向对象语言的基础，那么再来学习 <code>Js</code> 可以说是小菜一碟。</p>
<a id="more"></a>

<p>这篇文章主要讲解的是 <code>JS</code> 的一些基础引用类型(类似于 <code>Java</code>中的类的概念，但是 <code>JS</code> 中并没有类这一说法，我们称之为引用类型).主要包含以下几个方面：</p>
<ul>
<li>Object类型</li>
<li>Array类型</li>
<li>包装类型(主要有 <code>String</code>、<code>Number</code>、<code>Boolean</code> 类型)</li>
<li>Function类型</li>
<li>Date类型</li>
<li>RegExp类型 （后面详细介绍）</li>
</ul>
<h1 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h1><p>一些基本的类型都是 <code>Object</code> 类型，比如我们创建的任一个基本的对象，都属于 <code>Object</code> 型对象,一个数组对象也是一个 <code>Object</code> 对象，所以在使用 <code>typeof</code> 操作符的时候检测是不是 <code>Array</code> 对象使用 <code>typeof</code>就不行了，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> arr); <span class="hljs-comment">//输出是Object,不能检测出具体的引用类型</span><br></code></pre></td></tr></table></figure>

<p>所以就出现了另一个操作符： <code>instanceof</code>, 使用方法是 <code>object instanceof constructor</code>,其中 <code>object</code> 是某个实例对象，<code>constructor</code> 是某个构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br><span class="hljs-built_in">console</span>.log(arr <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Array</span>); <span class="hljs-comment">//输出true</span><br></code></pre></td></tr></table></figure>
<p>1.创建对象<br>创建对象有两种方法： <strong>构造函数(new操作符)</strong> 和 <strong>字面量表示</strong></p>
<p><strong>构造函数创建对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br>person.name = <span class="hljs-string">"悟空"</span>;<br>person.age = <span class="hljs-string">"18"</span>;<br><span class="hljs-built_in">console</span>.log(person); <span class="hljs-comment">//输出：Object &#123; name: "悟空", age: "18" &#125;</span><br></code></pre></td></tr></table></figure>
<p><strong>使用字面量方法创建对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">"悟空"</span>,<br>    <span class="hljs-attr">age</span> : <span class="hljs-number">18</span> <span class="hljs-comment">//主要这里不加逗号</span><br>&#125;;<br><span class="hljs-built_in">console</span>.log(person); <span class="hljs-comment">//输出：Object &#123; name: "悟空", age: "18" &#125;</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p>一般使用的是第二种方法：对象字面量的方法来创建对象，给人一种封装的感觉。也是向函数传递大量可选参数的首选方式。</p>
</blockquote>
<p>2.访问对象属性和方法<br>   访问对象的属性时一般有两种方法：<strong>点表示法</strong> 和 <strong>方括号加属性名</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(person.name); <span class="hljs-comment">//点表示法</span><br><span class="hljs-built_in">console</span>.log(person.age);<br><br><span class="hljs-built_in">console</span>.log(person[<span class="hljs-string">"name"</span>]);<span class="hljs-comment">//方括号法</span><br><span class="hljs-built_in">console</span>.log(person[<span class="hljs-string">"age"</span>]);<br></code></pre></td></tr></table></figure>
<hr>
<h1 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h1><p>数组类型。每一项都可以存储任意类型的值。<br>Array类型封装了大量的接口方法供用户使用，比如有：栈方法、队列方法、排序方法、操作方法、位置方法、迭代方法等。<br>1.创建数组对象</p>
<p><strong>使用Array()构造函数创建对象：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<span class="hljs-comment">//创建一个空数组对象</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>);<span class="hljs-comment">//创建一个10个项目的对象</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<span class="hljs-comment">//创建具有指定项的数组对象</span><br></code></pre></td></tr></table></figure>

<p><strong>使用字面量的方法创建对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [];<span class="hljs-comment">//创建的是空数组对象</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<span class="hljs-comment">//创建指定的对象</span><br><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"red"</span>, <span class="hljs-string">"green"</span>, <span class="hljs-string">"blue"</span>];<br></code></pre></td></tr></table></figure>
<blockquote>
<p>一般也是选用字面量的方法创建对象。</p>
</blockquote>
<p><strong>数组可以存放任意类型的值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">"red"</span>, <span class="hljs-string">"green"</span>, <span class="hljs-string">"blue"</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, [<span class="hljs-number">1</span>, <span class="hljs-string">"color"</span>, <span class="hljs-literal">true</span>], &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">"悟空"</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;]<br><span class="hljs-comment">//该数组存放了数字、字符串、布尔值、数组和对象</span><br></code></pre></td></tr></table></figure>

<p>2.访问数组元素<br>   访问数组元素使用的是索引（和其他语言一样）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-string">"red"</span>, <span class="hljs-string">"green"</span>, <span class="hljs-string">"blue"</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>, [<span class="hljs-number">1</span>, <span class="hljs-string">"color"</span>, <span class="hljs-literal">true</span>], &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">"悟空"</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>&#125;]<br><br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">0</span>]); <span class="hljs-comment">//输出:1</span><br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">2</span>]);<span class="hljs-comment">//输出:red</span><br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">7</span>]);<span class="hljs-comment">//输出:数组[1, "color", true]</span><br><span class="hljs-built_in">console</span>.log(arr[<span class="hljs-number">8</span>]);<span class="hljs-comment">//输出：对象&#123;name: "悟空", age: 18&#125;</span><br></code></pre></td></tr></table></figure>
<p>3.栈方法</p>
<p>栈方法就是使用类似于数据结构中的栈来操作数组。<br>使用的方法是： <code>push()</code> 和 <code>pop()</code>。<br><code>push()</code> : 在数组的末尾添加一个元素，返回数组中添加后的个数。<br><code>pop()</code> : 弹出数组的末尾元素，返回弹出的元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"red"</span>, <span class="hljs-string">"green"</span>, <span class="hljs-string">"blue"</span>];<br><span class="hljs-keyword">var</span> len = colors.push(<span class="hljs-string">"white"</span>);<br><span class="hljs-built_in">console</span>.log(len);<span class="hljs-comment">//输出：4</span><br><span class="hljs-built_in">console</span>.log(colors);<span class="hljs-comment">//输出： 数组对象["red", "green", "blue", "white"]</span><br><span class="hljs-keyword">var</span> e = colors.pop();<br><span class="hljs-built_in">console</span>.log(e);<span class="hljs-comment">//输出：white</span><br><span class="hljs-built_in">console</span>.log(colors);<span class="hljs-comment">//输出：数组对象["red", "green", "blue"]</span><br></code></pre></td></tr></table></figure>
<p>4.队列方法</p>
<p>队列方法就是使得数组的操作类似数据结构中的队列操作。<br>使用的方法是： <code>push()</code> 和 <code>shift()</code>。<br><code>push()</code> : 在数组的末尾添加一个元素，返回数组中添加后的个数。和栈方法中的 <code>push()</code> 方法一样。<br><code>shift</code> : 弹出数组的第一个元素，返回弹出的元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"red"</span>, <span class="hljs-string">"green"</span>, <span class="hljs-string">"blue"</span>];<br><span class="hljs-keyword">var</span> len = colors.push(<span class="hljs-string">"white"</span>);<br><span class="hljs-built_in">console</span>.log(len);<span class="hljs-comment">//输出：4</span><br><span class="hljs-built_in">console</span>.log(colors);<span class="hljs-comment">//输出： 数组对象["red", "green", "blue", "white"]</span><br><span class="hljs-keyword">var</span> e = colors.shift();<br><span class="hljs-built_in">console</span>.log(e);<span class="hljs-comment">//输出： red</span><br><span class="hljs-built_in">console</span>.log(colors);<span class="hljs-comment">//输出：数组对象["green", "blue", "white"]</span><br></code></pre></td></tr></table></figure>

<p>5.位置方法</p>
<p>位置方法用于查找某一元素在数组中的索引位置。<br>方法是： <code>indexOf</code> 和 <code>lastIndexOf</code>。<br><code>indexOf</code> : 从前往后找，即返回第一次找到的位置；<br><code>lastIndexOf</code> : 从后往前找，即返回最后一次找到的位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">"a"</span>, <span class="hljs-string">"b"</span>, <span class="hljs-string">"c"</span>, <span class="hljs-string">"d"</span>, <span class="hljs-string">"b"</span>];<br><span class="hljs-keyword">var</span> index = arr.indexOf(<span class="hljs-string">"a"</span>);<br><span class="hljs-keyword">var</span> index2 = arr.indexOf(<span class="hljs-string">"b"</span>);<br><span class="hljs-keyword">var</span> lindex3 = arr.lastIndexOf(<span class="hljs-string">"b"</span>);<br><span class="hljs-built_in">console</span>.log(index);<span class="hljs-comment">//输出：0</span><br><span class="hljs-built_in">console</span>.log(index2);<span class="hljs-comment">//输出：1</span><br><span class="hljs-built_in">console</span>.log(index3);<span class="hljs-comment">//输出：4</span><br></code></pre></td></tr></table></figure>

<p>6.其他操作方法</p>
<p>其他操作方法指的是类似于字符串的常用操作，拼接数组操作和截取部分位置数组操作。<br>方法主要有：<code>concat</code>、<code>slice</code> 和 <code>splice</code>。</p>
<p><strong>concat拼接数组</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">"red"</span>, <span class="hljs-string">"green"</span>, <span class="hljs-string">"blue"</span>];<br><span class="hljs-keyword">var</span> arr3 = arr1.concat(arr2);<br><span class="hljs-built_in">console</span>.log(arr3);<span class="hljs-comment">//输出:Array(6) [ 1, 2, 3, "red", "green", "blue" ]</span><br></code></pre></td></tr></table></figure>
<p>或者也可以用于直接添加一个或多个元素，也相当于拼串：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">var</span> arr2 = arr1.concat(<span class="hljs-string">"red"</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-built_in">console</span>.log(arr2);<span class="hljs-comment">//输出:Array(5) [ 1, 2, 3, "red", true ]</span><br></code></pre></td></tr></table></figure>

<p><strong>slice截取数组</strong><br>使用 <code>slice</code> 方法可以用来截取数组。<br>该方法可以接受一个或两个参数：</p>
<ul>
<li>若为一个参数，表示截取从该参数开始到整个数组结束；</li>
<li>若为两个参数，表示截取的是从第一个参数的元素开始到第二个参数之前的元素之间的所有元素。返回值都是截取后的数组。</li>
</ul>
<p><strong>splice删除元素或者添加元素</strong><br><code>splice</code> 是数组中功能最强大方法。可用来删除元素也可用来添加元素。</p>
<ul>
<li>如果有两个参数，则代表删除元素，意味着保留的开始及要保留的元素个数；</li>
<li>如果第二个参数等于0，表示删除0个元素，如果后边有其他值，则代表的是添加元素，第一个位置代表的是在指定的位置添加。</li>
</ul>
<blockquote>
<p><em>注意:该方法的返回值是被删除的元素的新组成的数组</em></p>
</blockquote>
<p>使用 <code>slice</code> 删除元素：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"red"</span>, <span class="hljs-string">"green"</span>, <span class="hljs-string">"blue"</span>];<br><span class="hljs-keyword">var</span> c1 = colors.splice(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-built_in">console</span>.log(colors);<span class="hljs-comment">//输出: Array [ "green", "blue" ]</span><br><span class="hljs-built_in">console</span>.log(c1);<span class="hljs-comment">//输出: [ "green", "blue" ]</span><br></code></pre></td></tr></table></figure>
<p>使用 <code>slice</code> 在指定的位置添加元素：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"red"</span>, <span class="hljs-string">"green"</span>, <span class="hljs-string">"blue"</span>];<br>colors.splice(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">"white"</span>, <span class="hljs-string">"black"</span>);<br><span class="hljs-built_in">console</span>.log(cols);<span class="hljs-comment">//输出:Array(4) [ "red", "white", "black", "blue" ]</span><br></code></pre></td></tr></table></figure>
<p>7.排序算法</p>
<p><code>JS</code> 封装了对数组进行排序的API。<br>使用的方法有： <code>reverse()</code> 和 <code>sort()</code>。</p>
<ul>
<li><code>reverse()</code> : 数组逆序排列；</li>
<li><code>sort()</code> : 默认是按照从小到大进行排序，但是对字符串数组有点需要注意的地方。对字符串是按照字符编码逐个字符进行比较。</li>
<li>“200” &lt; “3”, 因为是字符串比较，所以是逐个字符比，’2’ &lt; ‘3’,所以 “200” &lt; “3”，所以一般我们传入一个函数，叫做<code>比值函数</code>。</li>
</ul>
<p><strong>reverse()方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"red"</span>, <span class="hljs-string">"green"</span>, <span class="hljs-string">"blue"</span>];<br><span class="hljs-keyword">var</span> nums = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>colors.reverse();<br>nums.reverse();<br><span class="hljs-built_in">console</span>.log(colors);<span class="hljs-comment">//输出： Array(3) [ "blue", "green", "red" ]</span><br><span class="hljs-built_in">console</span>.log(nums);<span class="hljs-comment">//输出： Array(5) [ 5, 4, 3, 2, 1 ]</span><br></code></pre></td></tr></table></figure>

<p><strong>默认的sort()方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> colors = [<span class="hljs-string">"red"</span>, <span class="hljs-string">"green"</span>, <span class="hljs-string">"blue"</span>];<br><span class="hljs-keyword">var</span> numStr = [<span class="hljs-string">"100"</span>, <span class="hljs-string">"2"</span>, <span class="hljs-string">"3"</span>, <span class="hljs-string">"250"</span>, <span class="hljs-string">"99"</span>];<br>colors.sort();<br>numStr.sort();<br><span class="hljs-built_in">console</span>.log(colors);<span class="hljs-comment">//输出 ： Array(3) [ "blue", "green", "red" ]</span><br><span class="hljs-built_in">console</span>.log(numStr);<span class="hljs-comment">//输出 ： Array(5) [ "100", "2", "250", "3", "99" ]</span><br><span class="hljs-comment">//很明显是对于数值型的字符串，排序并不正确</span><br></code></pre></td></tr></table></figure>
<p><strong>在sort()中自定义比值函数</strong><br>比值函数的目的是定义另一种排序顺序。</p>
<p>比值函数应该返回一个负，零或正值，这取决于参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs var">function(a, b) &#123; return a - b; &#125;<br></code></pre></td></tr></table></figure>
<p>当 <code>sort()</code> 函数比较两个值时，会将值发送到比较函数，并根据所返回的值（负、零或正值）对这些值进行排序。</p>
<h1 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h1><p><code>ECMAScript</code> 中的 <code>Date</code> 类型是在早期的 <code>Java.util.Date</code> 类的基础上构建的。</p>
<p><strong>1.创建对象</strong></p>
<ul>
<li>不加任何参数创建对象，表示的是当前时间对象。<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><span class="hljs-built_in">console</span>.log(date);<span class="hljs-comment">//输出：Date Fri Mar 27 2020 21:33:13 GMT+0800 (中国标准时间)，这是我写博客的时间。</span><br></code></pre></td></tr></table></figure></li>
<li>传入参数，根据参数创建响应的日期时间对象。<br>接受一个字符串参数，该字符串有多种写法：<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//字符串的第一种写法</span><br><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">"03/27 2020 21:38:00"</span>);<br><span class="hljs-built_in">console</span>.log(date);<span class="hljs-comment">//输出：Date Fri Mar 27 2020 21:38:00 GMT+0800 (中国标准时间)</span><br><span class="hljs-comment">//字符串的第二种写法</span><br><span class="hljs-comment">//"英文星期几 英文月名 日 年 时：分：秒 时区"</span><br><span class="hljs-keyword">var</span> date2 = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(Friday March <span class="hljs-number">27</span> <span class="hljs-number">2020</span> <span class="hljs-number">21</span>:<span class="hljs-number">42</span>:<span class="hljs-number">0</span> GMT+<span class="hljs-number">0800</span>);<br><span class="hljs-built_in">console</span>.log(date2);<br><span class="hljs-comment">//输出：Date Fri Mar 27 2020 21:42:00 GMT+0800 (中国标准时间)</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<p><strong>2.常用的方法</strong></p>
<ul>
<li><code>getDate()</code> : 返回一个月的某一天(1~31)</li>
<li><code>getDay()</code> : 返回一个星期的某一天(0~6)，0是周日，6是周六</li>
<li><code>getMonth()</code> : 返回月份，注意是(0~11)</li>
<li><code>getFullYear()</code> : 返回年份</li>
<li><code>getHours</code> : 返回小时</li>
<li><code>getMinutes</code> : 返回分钟</li>
<li><code>getSeconds</code> : 返回秒数</li>
<li><code>getTime()</code> : 返回时间戳，自从1970年1月1日至今的毫秒数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(<span class="hljs-string">"03/27 2020 21:52:00"</span>);<br><span class="hljs-built_in">console</span>.log(date.getDate());<span class="hljs-comment">//输出：27</span><br><span class="hljs-built_in">console</span>.log(date.getDay());<span class="hljs-comment">//输出：5</span><br><span class="hljs-built_in">console</span>.log(date.getMonth());<span class="hljs-comment">//输出：2</span><br><span class="hljs-built_in">console</span>.log(date.getFullYear());<span class="hljs-comment">//输出：2020</span><br><span class="hljs-built_in">console</span>.log(date.getHours());<span class="hljs-comment">//输出：21</span><br><span class="hljs-built_in">console</span>.log(date.getMinutes());<span class="hljs-comment">//输出：52</span><br><span class="hljs-built_in">console</span>.log(date.getSeconds());<span class="hljs-comment">//输出：0</span><br><span class="hljs-built_in">console</span>.log(date.getTime());<span class="hljs-comment">//输出：1585317120000</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p>Date类型掌握这些基本的方法就可以了，这不是重点。</p>
</blockquote>
<h1 id="Function类型"><a href="#Function类型" class="headerlink" title="Function类型"></a>Function类型</h1><p><code>JS</code> 中万物皆是对象，基本的变量是对象，Date类型的实例是对象。所以函数也可以看做是对象。<br><strong>1.创建对象</strong></p>
<p>既然函数可以看做是对象，所以就可以使用 <code>new</code> 操作符来创建 <code>Function</code> 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">"console.log('HelloWorld！')"</span>);<br>fun(); <span class="hljs-comment">//输出：HelloWorld！</span><br></code></pre></td></tr></table></figure>

<p>一般不使用 <code>new</code> ,而是使用一下两种方法：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">paremeter...</span>) </span>&#123;<br>   <br>&#125;<br></code></pre></td></tr></table></figure>
<p>或者是创建一个匿名函数然后赋值给一个变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">paremeter...</span>) </span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>最后一种方法最常用。</p>
</blockquote>
<p><strong>2.函数的参数</strong><br>在函数的内部有两个特殊的对象： <code>arguments</code> 和 <code>this</code>。</p>
<p>其中 <code>arguments</code> 是一个类数组对象，但并不是数组，它包含着传入函数中的所有参数。</p>
<p>既然是对象，就会有相应的属性和方法。</p>
<ul>
<li>类数组的属性： </li>
<li><code>length</code> : 返回实际传入的实参的数量；</li>
<li><code>callee</code> : 该属性返回的是当前函数对象。</li>
<li>可以使用索引获得相应的参数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.length);<br>&#125;<br>fun(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>，<span class="hljs-number">3</span>);<span class="hljs-comment">//输出：2</span><br>fun(<span class="hljs-number">1</span>);<span class="hljs-comment">//输出：1</span><br>fun(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">//输出：3</span><br><span class="hljs-comment">//虽然函数定义的是需要两个参数，但是可以传多个实参或者更少实参</span><br></code></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fun = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>.callee == fun);<br>&#125;<br>fun(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>); <span class="hljs-comment">//输出：true。</span><br><span class="hljs-comment">//也就是说，aruguments.callee就是fun对象。</span><br></code></pre></td></tr></table></figure>
<p><strong>3.函数的属性和方法</strong><br>既然函数是对象，所以函数也有属性和方法。</p>
<p>属性有两个：<code>length</code> 和 <code>prototype</code>。</p>
<ul>
<li><code>length</code> : 该属性表示函数希望接收的参数的个数（也就是形参的个数，与上述的 <code>arguments</code> 对象并不一样）。如下面的粒子所示：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayName</span>(<span class="hljs-params">name</span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(name);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br>   <span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayHi</span>(<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Hi"</span>);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(sayName.length);<span class="hljs-comment">//输出：1</span><br><span class="hljs-built_in">console</span>.log(sum.length);<span class="hljs-comment">//输出：2</span><br><span class="hljs-built_in">console</span>.log(sayHi.length);<span class="hljs-comment">//输出：0</span><br></code></pre></td></tr></table></figure>
<ul>
<li><code>prototype</code> : 该属性是保存它们实例方法的真正所在。换句话说，实际上， <code>toString()</code> 和 <code>valueOf()</code> 等方法实际上都保存在 <code>prototype</code> 名下。</li>
</ul>
<p>每个函数对象都包含两个非继承而来的方法：<code>call()</code> 和 <code>apply()</code>。这两个方法的用途都是在特定的作用域内调用函数，实际上等于设置函数体内的 <code>this</code> 值。</p>
<ul>
<li><p>两个函数的区别<br>首先这两个函数的作用相同，都是用来改变函数的作用域。只看不过是形参不同。</p>
</li>
<li><p><code>apply()</code> ： 该方法接受两个参数，一个参数是指定运行的作用域，另一是参数数组。其中第二个参数可以是 <code>Array</code> 的实例，也可以是 <code>arguments</code> 对象。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sum</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br> <span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callSum1</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br>   <span class="hljs-keyword">return</span> sum.apply(<span class="hljs-keyword">this</span>, <span class="hljs-built_in">arguments</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">callSum2</span>(<span class="hljs-params">num1, num2</span>) </span>&#123;<br>   <span class="hljs-keyword">return</span> sum.apply(<span class="hljs-keyword">this</span>, [num1, num2]);<br>&#125;<br></code></pre></td></tr></table></figure>
</li>
<li><p><code>call()</code> 方法和 <code>apply()</code> 的不同之处在于没有第二个参数，只需要指定函数的作用域(也就是第一个参数)。</p>
</li>
<li><p>两个函数的真正用武之地在于扩充函数的作用域。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">windows.color = <span class="hljs-string">"red"</span>;<br><span class="hljs-keyword">var</span> obj = &#123;<br>   <span class="hljs-attr">color</span>: <span class="hljs-string">"blue"</span><br>&#125;;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sayColor</span>(<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.color);<br>&#125;<br>sayColor.call(<span class="hljs-keyword">this</span>);<span class="hljs-comment">//输出：red</span><br>sayColor.call(<span class="hljs-built_in">window</span>);<span class="hljs-comment">//输出：red.因为this == window</span><br>sayColor.call(obj); <span class="hljs-comment">//输出：blue</span><br></code></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="基本的包装类型"><a href="#基本的包装类型" class="headerlink" title="基本的包装类型"></a>基本的包装类型</h1><p>首先要明白基本的包装类型的作用。<br>在JS中有五种基本的数据类型，分别是 <code>null</code>、<code>undefined</code>、<code>Number</code>、<code>String</code> 和 <code>Boolean</code> 类型；</p>
<p>既然是基本类型，为什么字符串会有属性和方法呢？比如 <code>length</code> 属性，比如 <code>index()</code> 方法。</p>
<p>其实这就是包装类，每当读取一个基本的数据类型的时候就会创建一个对应的基本包装类型的对象。又称为临时对象(类似于Java中的装箱和拆箱，也就是说，<code>Number</code>、<code>String</code> 和 <code>Boolean</code> 这三个类型的变量都可以看做是对象进行操作，所以具有了属性和方法)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">"Hello World!"</span> <span class="hljs-comment">//这是一个String类型变量</span><br><span class="hljs-comment">//中间的过程中实际上解析器把它包装成了一个String类型的对象。</span><br><span class="hljs-built_in">console</span>.log(str.length);<span class="hljs-comment">//所以具有属性和方法,但是使用方法结束后，就又变成了一个string变量</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> str);<span class="hljs-comment">//输出：string</span><br></code></pre></td></tr></table></figure>
<p>而使用 <code>new</code> 操作符创建一个对象的时候:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//真正的创建一个String对象，该对象在环境中始终存在</span><br><span class="hljs-keyword">var</span> str = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">"Hello World!"</span>);<br><span class="hljs-built_in">console</span>.log(str.length); <span class="hljs-comment">//跟上面的一样使用</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> str); <span class="hljs-comment">//输出：Object</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p>所以一般我们不适用包装类创建对象，因为即使是一个变量，解析器在适当的时候回自动的会我们进行包装( <code>Java</code> 中叫装箱 )， 我们就可以使用属性和方法了。使用完成后就会立即拆掉包装( <code>Java</code> 中叫拆箱 )。</p>
</blockquote>
<h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><p>基本的包装类有三个 <code>Boolean</code>、<code>Number</code> 和 <code>String</code>，使用最多的就是 <code>String</code> 类型了。因为我们经常使用其属性和方法。<br><strong>1.字符方法</strong><br>可以获取字符串在指定位置处的字符或字符编码。</p>
<p>方法是：<code>charAt</code> 和 <code>charCodeAt</code>。</p>
<ul>
<li><code>charAt</code> ：以单字符字符串的形式返回指定位置的字符。注：返回的仍然是字符串，因为JS中没有字符类型；</li>
<li><code>charCodeAt</code> ： 该方法返回的就不是字符了，而是字符的编码。</li>
</ul>
<p>这两个方法我们一般不使用，因为和数组一样，我们可以使用索引的方法进行访问。形如： <code>str[index]</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> strValue = <span class="hljs-string">"Hello World!"</span><br><span class="hljs-built_in">console</span>.log(strValue.charAt(<span class="hljs-number">1</span>));<span class="hljs-comment">//输出： "e"</span><br><span class="hljs-built_in">console</span>.log(strValue.charCodeAt(<span class="hljs-number">1</span>));<span class="hljs-comment">//输出： "101",是e的编码</span><br><span class="hljs-comment">//直接使用索引访问</span><br><span class="hljs-built_in">console</span>.log(strValue[<span class="hljs-number">1</span>]);<span class="hljs-comment">//输出： "e"，类似于数组</span><br></code></pre></td></tr></table></figure>
<p><strong>2.位置方法</strong><br>类似于( 就是 )数组中的 <code>index()</code>、<code>lastIndexOf()</code>。返回某一个字符在字符串中的索引位置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str2 = <span class="hljs-string">"hello world!"</span>;<br><span class="hljs-built_in">console</span>.log(str2.index(<span class="hljs-string">"o"</span>));<span class="hljs-comment">//输出： 5</span><br><span class="hljs-built_in">console</span>.log(str2.lastIndexOf(<span class="hljs-string">"o"</span>));<span class="hljs-comment">//输出： 7</span><br></code></pre></td></tr></table></figure>
<p>和数组的索引不同的是，字符串中可以指定第二个参数，也就是开始查找的位置。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str2 = <span class="hljs-string">"hello world!"</span>;<br><span class="hljs-built_in">console</span>.log(str2.indexOf(<span class="hljs-string">"o"</span>, <span class="hljs-number">6</span>)); <span class="hljs-comment">//输出： 7</span><br></code></pre></td></tr></table></figure>
<p><strong>3.大小写转换方法</strong><br>将字符串中的所有字符全部变换成大写或者是小写都是可以通过方法实现。<br>转换为大写： <code>toUpperCase()</code>;<br>转换为小写： <code>toLowerCase()</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str2 = <span class="hljs-string">"Hello World!"</span>;<br><span class="hljs-built_in">console</span>.log(str2.toUpperCase());<span class="hljs-comment">//输出： "HELLO WORLD!"</span><br><span class="hljs-built_in">console</span>.log(str2.toLowerCase());<span class="hljs-comment">//输出： "hello world!"</span><br><span class="hljs-built_in">console</span>.log(str2);<span class="hljs-comment">//输出： "Hello World!"，说明该方法不影响原字符串。</span><br></code></pre></td></tr></table></figure>
<p><strong>4.拼串和截串</strong><br>操作方法主要有：<code>concat()</code>、<code>slice()</code>、<code>substr()</code> 和 <code>substring()</code>.</p>
<p><strong>1.concat()方法</strong><br><code>concat</code>方法用于连接字符串。</p>
<p>和数组的 <code>concat()</code> 方法一致。</p>
<p>该方法不常使用，因为拼串直接使用 “+” 即可。<br><strong>2.slice()方法</strong><br><code>slice()</code> 方法用于截取子串。可以接受一个或者是两个参数。返回的截取的子串。</p>
<p>和数组的 <code>slice</code> 方法一样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">"hello world!"</span>;<br><span class="hljs-built_in">console</span>.log(str.slice(<span class="hljs-number">6</span>));<span class="hljs-comment">//输出：world！</span><br><span class="hljs-built_in">console</span>.log(str.slice(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>);<span class="hljs-comment">//输出：hello</span><br></code></pre></td></tr></table></figure>
<p><strong>3.substr()方法</strong><br><code>substr()</code> 和 <code>slice()</code> 方法都是用来截取子串，还有后面的那个 <code>substring()</code> 方法。</p>
<p><code>substr()</code> 方法的参数和 <code>slice()</code> 方法的第二个参数不同，除此之外都一样。第二个参数不是位置，而是需要截取的字符串的长度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">"hello world!"</span>;<br><span class="hljs-built_in">console</span>.log(str.substr(<span class="hljs-number">6</span>));<span class="hljs-comment">//输出：world！</span><br><span class="hljs-built_in">console</span>.log(str.substr(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>);<span class="hljs-comment">//输出：hel</span><br></code></pre></td></tr></table></figure>
<h2 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h2><p><code>Number</code> 类型是与数字值对应的引用类型</p>
<p>要创建 <code>Number</code> 对象，需要使用 <code>Number</code> 构造函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> numberObject = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">console</span>.log(numberObject);<span class="hljs-comment">//输出：Number &#123; 10 &#125;</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p>但是一般不这样使用。<br>因为解析器会自动进行包装成数值对象。因此就可以使用属性和方法。</p>
</blockquote>
<p><strong>数值对象方法</strong><br>数值包装成对象后就具有了一些操作方法。<br>常用的方法有： <code>toString()</code> 、<code>toFixed()</code> 、<code>toExponential()</code> 和 <code>toPrecesion()</code>。基本上都是对数字的格式化( 精度 ) 的方法。<br><strong>1.totring()方法</strong><br>见名知意，几乎所有的对象都有这个方法，将数值转换成字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">12</span>);<span class="hljs-comment">//一般不这样创建对象，因为解析器的自动装包功能</span><br><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">12</span>;<span class="hljs-comment">//这样创建一个数值变量，可以当做对象使用</span><br><span class="hljs-built_in">console</span>.log(num2.toString());<span class="hljs-comment">//输出： 12</span><br></code></pre></td></tr></table></figure>

<p><strong>2.toFixed()方法</strong><br><code>toFixed</code> 方法的参数有一个。<br>参数代表的是数值后面显示几位小数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num2 = <span class="hljs-number">12</span>;<span class="hljs-comment">//这样创建一个数值变量，可以当做对象使用</span><br><span class="hljs-built_in">console</span>.log(num2.toFixed(<span class="hljs-number">2</span>));<span class="hljs-comment">//输出：12.00</span><br><span class="hljs-keyword">var</span> num3 = <span class="hljs-number">3.14159</span>;<br><span class="hljs-built_in">console</span>.log(num3.toFixed(<span class="hljs-number">3</span>));<span class="hljs-comment">//输出：3.142，会自动的四舍五入</span><br></code></pre></td></tr></table></figure>

<p><strong>3.totoExponential()方法</strong><br><code>toExponential()</code> 方法返回指数表示法。</p>
<p>接受一个参数，也是用来指定小数位数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num4 = <span class="hljs-number">100</span>;<br><span class="hljs-built_in">console</span>.log(num4.toExponential(<span class="hljs-number">1</span>));<span class="hljs-comment">//输出：1.0e2;</span><br></code></pre></td></tr></table></figure>
<p><strong>4.toPrecision()方法</strong><br>上面的 <code>toExponential()</code>方法会将100返回1.0e2,但是在一般情况下，这么小的数字我们不需要使用指数表示法。</p>
<p>而 <code>toPrecision()</code> 方法是可以自己选取最合适的表示的方法。该方法可能会返回固定大小，也可能会返回指数形式，具体规则看哪种格式合适。</p>
<p>该方法接受一个参数，即表示数值的所有数字的位数( 不包括指数部分 )。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">99</span>;<br><span class="hljs-built_in">console</span>.log(num.toPrecision(<span class="hljs-number">1</span>));<span class="hljs-comment">//输出:1e2</span><br><span class="hljs-built_in">console</span>.log(num.toPrecision(<span class="hljs-number">2</span>));<span class="hljs-comment">//输出：99</span><br><span class="hljs-built_in">console</span>.log(num.toPrecision(<span class="hljs-number">3</span>));<span class="hljs-comment">//输出：99.0</span><br></code></pre></td></tr></table></figure>
<h2 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h2><p><code>Boolean</code> 类型是基本的包装类之一。所以也可以看做是对象。<br>使用 <code>new</code> 操作符创建的对象 或者是声明的 <code>Boolean</code> 类型的基本的变量也可以包装成对象。</p>
<p>但是一般更不会使用。因为根本就没有什么方法属性可以使用。只用来当做变量即可。</p>
<p>但要记得可以把三种基本数据类型（<code>Number</code>、<code>String</code> 和 <code>Boolean</code> ）的变量看作对象(临时对象)，这是包装类的基本特性。</p>
<blockquote>
<p>至此，整个JS中的引用类型总结的差不多了。但是还有正则表达式没有写。<br>后面会继续说明。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>JS</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>JS Beginner</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS基础</title>
    <url>/2020/03/18/CSS/</url>
    <content><![CDATA[<p>与HTML一样，CSS内容比较繁杂，需要自己消化实践总结才能用好，同时CSS也是前端开发者的基本功，该内容并没有包括CSS3新标准特性，其实有了CSS基础，学习CSS3也是非常轻松，文中难免有错误，所以本文持续更新中(添加、修改相关内容)<br>主要有三个方面内容：</p>
<ol>
<li>基础语法回顾；</li>
<li>选择器讲解；</li>
<li><code>CSS</code> 高级特性。</li>
</ol>
<a id="more"></a>

<h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><div class="note success">
            <p>CSS 允许应用纯色作为背景，也允许使用背景图像创建相当复杂的效果。</p><p>CSS 在这方面的能力远远在 HTML 之上。</p><p>主要学习的属性：<br><code>background-color</code> ：设置背景色;<br><code>background-image</code> ：设置背景图片;<br><code>background-repeat</code> ： 背景是否重复;<br><code>background-position</code> ： 设置背景位置;<br><code>background-attachment</code> ： 设置背景是否滚动。</p>
          </div>

<h2 id="2-文本"><a href="#2-文本" class="headerlink" title="2.文本"></a>2.文本</h2><div class="note success">
            <p>CSS 文本属性可定义文本的外观。</p><p>通过文本属性，您可以改变文本的颜色、字符间距，对齐文本，装饰文本，对文本进行缩进，等等。</p><p>主要的属性有：<br><code>text-indent</code> : 缩进<br><code>text-align</code> : 水平对齐方式<br><code>text-decoration</code> : 文本修饰<br><code>text-transform</code> : 文本转换</p>
          </div>
<p><strong>1. text-indent:</strong><br>   该属性的值可以使用所有的长度单位：<code>em</code> <code>px</code> <code>百分比</code>， 如果设置为 <code>百分比</code>则意味着是相对于父元素的宽度而言，比如：<br>   <code>.box p { text-indent: 20%; }</code><br>   则 <code>box</code> 下的 <code>p</code> 元素的缩进值就是相对于父元素的宽度来说的，也合情合理；<br><strong>2. text-align:</strong><br>   水平方向的对齐方式，可取值有：<code>left</code>、<code>right</code>、<code>center</code>、<code>justify</code>。<br>   <code>left</code>、<code>right</code>、<code>center</code>:分别为左对齐、右对齐、水平居中;<br>   <code>justify</code> : 两端对齐，字符间距自动调整；<br><strong>3. text-decoration:</strong><br>   文本修饰：上划线、下划线、删除线、闪烁的文本。<br>   <code>underline</code> : 下划线<br>   <code>overline</code> : 上划线<br>   <code>line-through</code> : 删除线<br>   <code>blink</code> : 闪烁的文本<br>   <code>none</code> : 不进行处理，默认值<br><strong>4. text-transform:</strong><br>   <code>text-transform</code> 属性处理文本的大小写。这个属性有 4 个值：<br>   <code>uppercase</code> : 将文本转换为大写<br>   <code>lowercase</code> ： 将文本转换为小写<br>   <code>capitalize</code> : 对元素中的每个单词首字母进行大写<br>   <code>none</code> : 不进行处理，默认值</p>
<h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3. 字体"></a>3. 字体</h2><div class="note success">
            <p>CSS字体属性定义文本的字体系列、大小、加粗、风格( 如斜体如 ) 和变形 (小型大写字母)。</p><p>主要的属性有：<br><code>font-family</code> :定义字体族<br><code>font-size</code> : 定义字体大小<br><code>font-weight</code> : 字体加粗大小<br><code>font-style</code> : 字体风格<br><code>font-variant</code> : 字体变形</p>
          </div>


<p><strong>1. font-family</strong><br>显然，该属性就是用来定义使用的字体族的，有几个注意的点：</p>
<p>   1) 定义的字体必须在用户的计算机上存在，否则会以默认字体显示；<br>   2) 可以定义多种字体，把自己觉得最靠谱的放在最后面<br>   3) 可以定义某个字体族中的具体某一个字体</p>
   <figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>   <span class="hljs-attribute">font-family</span>: Georgia serif;<br>&#125;<br></code></pre></td></tr></table></figure>


<p>   其中<code>Georgia</code> 是一种具体的字体，该字体属于 <code>serif</code> 字体族；如果不指定某种具体的字体，则浏览器会自己在字体族中选择一种字体，结果当然是不确定的。</p>
<p><strong>2. font-size</strong><br>   显然，<code>font-size</code> 就是来定义字体的大小的。<br>   单位可以是任意的单位： <code>px</code> 、<code>em</code> 、<code>百分比</code>。</p>
<p><strong>3. font-weight</strong><br>   字体加粗，可选的值很多，但是真正使用的场景很少，因为不同的浏览器渲染效果不一样，但是最基本的加粗和不加粗还是可以使用的。<br>   原本可以使用的值有：<br>   <code>normal</code> : 文本正常显示，默认值<br>   <code>blod</code> : 粗体<br>   <code>bolder</code> : 更粗的字体<br>   还可以使用更加细致的数值作为属性值：<br>   数值为100~900，<code>400</code> 等同于 <code>normal</code>，而 <code>700</code> 等同于 <code>bold</code> 效果。</p>
<blockquote>
<p>一般只要 <code>normal</code> 和 <code>bold</code> 即可，不必麻烦定义数值或bolder等等，而且效果可能会事与愿违</p>
</blockquote>
<p><strong>4. font-style</strong></p>
<p><code>font-style</code> 用于定义字体的风格。<br>   可取的值有：<br>   <code>normal</code> :正常的文本显示,默认值<br>   <code>italic</code> : 文本斜体显示<br>   <code>oblique</code> : 文本倾斜显示</p>
<blockquote>
<p>斜体( <code>italic</code> )是一种简单的字体风格，对每个字母的结构有一些小改动，来反映变化的外观。与此不同，倾斜( <code>oblique</code> )文本则是正常竖直文本的一个倾斜版本。<br>通常情况下，<code>italic</code> 和 <code>oblique</code> 文本在 web 浏览器中看上去完全一样。</p>
</blockquote>
<h2 id="4-链接"><a href="#4-链接" class="headerlink" title="4.链接"></a>4.链接</h2><blockquote style="background-color: rgb(167, 201, 66);">

<p>我们能够以不同的方法为链接设置样式。</p>
<p>还可以将图像等设置为超链接。</p>
<p>能够设置链接样式的 CSS 属性有很多种（例如: <code>color</code>, <code>font-family</code>, <code>background</code> 等等）。</p>
<p>链接的特殊性在于能够根据它们所处的状态来设置它们的样式。<br>链接的四种状态：</p>
<ul>
<li>a:link - 普通的、未被访问的链接</li>
<li>a:visited - 用户已访问的链接</li>
<li>a:hover - 鼠标指针位于链接的上方</li>
<li>a:active - 链接被点击的时刻</blockquote>


</li>
</ul>
<p><strong>1. 为链接不同的状态设置不同的样式：</strong><br>   <figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#ff0000</span>; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#00ffff</span>; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;&#125;<br></code></pre></td></tr></table></figure><br><strong>2. 将图片设置为超链接</strong><br>   <figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">&lt;a href="url"&gt;&lt;img src="URL" /&gt;&lt;/a&gt;<br></code></pre></td></tr></table></figure></p>
<h2 id="5-列表"><a href="#5-列表" class="headerlink" title="5.列表"></a>5.列表</h2><blockquote style="background-color: rgb(167, 201, 66);">
CSS 列表属性允许你放置、改变列表项标志，或者将图像作为列表项标志。

<p>属性名为：</p>
<ol>
<li><code>list-style-type</code> – 修改列表项的标志类型</li>
<li><code>list-style-image</code> –修改列表项标志为图片</li>
<li><code>list-style-position</code> –确定标志出现在列表项内容之外还是内容内部</blockquote>

</li>
</ol>
<p><strong>1. list-style-type</strong><br>属性可选值有：<br><code>none</code>    无标记。<br><code>disc</code>    默认。标记是实心圆。<br><code>circle</code>    标记是空心圆。<br><code>square</code>    标记是实心方块。<br><code>decimal</code>   标记是十进制数字(1、2、3…)<br>…<br>还有其他的可选值，具体的参考 : <a href="https://www.w3school.com.cn/cssref/pr_list-style-type.asp" target="_blank" rel="noopener">W3School官网</a><br><strong>2. list-style-image</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123; <span class="hljs-attribute">list-style-image</span>: <span class="hljs-built_in">url</span>(); &#125;<br></code></pre></td></tr></table></figure>
<p><strong>3. list-style-position</strong><br>该属性的可选值有两个：<code>inside</code> 和 <code>outside</code> 。</p>
<p>以上两个值使用后的具体效果如下：</p>
<p><b>该列表的 list-style-position 为 inside</b></p>
<ul style="list-style-position: inside;">
  <li>能吃能喝又能坐</li>
  <li>面包</li>
  <li>牛奶</li>
  <li>沙发</li>
</ul>
<p><b>该列表的 list-style-position 为 outside</b></p>
<ul style="list-style-position: outside;">
  <li>能吃能喝又能坐</li>
  <li>面包</li>
  <li>牛奶</li>
  <li>沙发</li>
</ul>

<p><strong>4. 简写属性</strong><br>将上面三个属性合在一起就能可以形成一个简写属性：<code>list-style</code>:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> &#123; <span class="hljs-attribute">list-style</span>: square <span class="hljs-built_in">url</span>() inside; &#125;<br></code></pre></td></tr></table></figure>

<h2 id="6-表格"><a href="#6-表格" class="headerlink" title="6.表格"></a>6.表格</h2><blockquote style="background-color: rgb(167, 201, 66);">

<p>CSS 表格属性可以帮助您极大地改善表格的外观。</p>
<p>可以分别为 <code>table</code>、<code>th</code>、<code>tr</code>、<code>td</code> 设置样式。</p>
<p>其中最常见的一个属性，也是几乎每个表格必须要设置的属性是：<br><code>border-collapse</code> : 将表格边框折叠为单一的边框。</p>
</blockquote>

<p><strong>例1.下面是一个折叠边框后的表格</strong></p>
<table style="border-collapse: collapse;">
  <tr>
    <td>张三</td>
    <td>男</td>
    <td>程序员</td>
  </tr>
    <tr>
    <td>李四</td>
    <td>女</td>
    <td>产品经理</td>
  </tr>
</table>
结构和样式设置如下：

<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/CSS/table1.png" alt=""></p>
<p><strong>例2.下面是一个易读的表格，间隔行设置不一样的背景颜色</strong></p>
<table style="border-collapse: collapse;">
  <tr style="background-color: #A7C942;border: 1px solid #000;">
    <td>张三</td>
    <td>男</td>
    <td>程序员</td>
  </tr>
    <tr>
    <td>李四</td>
    <td>女</td>
    <td>产品经理</td>
  </tr>
  <tr style="background-color: #A7C942;border: 1px solid #000;">
    <td>张三</td>
    <td>男</td>
    <td>程序员</td>
  </tr>
    <tr>
    <td>李五</td>
    <td>女</td>
    <td>产品经理</td>
  </tr>
  <tr style="background-color: #A7C942;border: 1px solid #000;">
    <td>张三</td>
    <td>男</td>
    <td>程序员</td>
  </tr>
    <tr>
    <td>李六</td>
    <td>女</td>
    <td>产品经理</td>
  </tr>
</table>
结构样式如下：

<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/CSS/table2.png" alt=""></p>
<h2 id="7-轮廓"><a href="#7-轮廓" class="headerlink" title="7. 轮廓"></a>7. 轮廓</h2><blockquote style="background-color: rgb(167, 201, 66);">

<p>轮廓 <code>outline</code>  是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p>
<p><code>CSS outline</code> 属性规定元素轮廓的样式、颜色和宽度。和边框设置的属性一模一样，只不过是样式 (<code>outline-style</code>) 多一点：实线、虚线、点状线、双线等等。</p>
<p>可以设置的属性和边框一样：<br><code>outline-width</code> : 轮廓的宽度<br><code>outline-style</code> : 轮廓的风格<br><code>outline-color</code> : 轮廓的颜色<br><code>outline</code>       : 简写属性</p>
</blockquote>

<p><strong>下面演示轮廓的各种不同风格</strong></p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/CSS/outline.png" alt=""></p>
<p style="outline: 3px solid #bfa">演示轮廓的不同的样式风格：实线</p>
<p style="outline: 3px dashed #bfa">演示轮廓的不同的样式风格：虚线</p>
<p style="outline: 3px dotted #bfa">演示轮廓的不同的样式风格：点线</p>
<p style="outline: 3px double #bfa">演示轮廓的不同的样式风格：双线</p>

<blockquote>
<p>注：只有IE8及其以上的版本才支持该属性！</p>
</blockquote>
<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h2><blockquote style="background-color: rgb(167, 201, 66);">

<p>最常见的 CSS 选择器是元素选择器。换句话说，文档的元素标签名就是最基本的选择器。</p>
</blockquote>

<p>使用方法就是直接对某一个元素标签设置样式：比如 <code>&lt;html&gt;</code>、<code>body</code> 、<code>h1</code> 、<code>p</code>、<code>a</code>、<code>table</code> 等等，由于一旦设置某一个属性就是为整个文档设置，所以一般不使用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123; <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#bfa</span>; &#125;<br><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: <span class="hljs-number">#000</span>; &#125;<br><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;&#125;<br>...<br></code></pre></td></tr></table></figure>

<h2 id="选择器分组"><a href="#选择器分组" class="headerlink" title="选择器分组"></a>选择器分组</h2><div class="note success">
            <p>我们可以同时为多个元素设置样式。</p><p>但是选择器分组肯定是不经常使用的。</p>
          </div>
<p>使用方法如下：<br>我们同时为 <code>h2</code> 和 <code>p</code> 标签设置样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span> <span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">color</span>: gray; &#125;<br></code></pre></td></tr></table></figure>
<p>将 <code>h2</code> 和 <code>p</code> 元素选择器放在规则左边，然后用逗号分隔。其右边的样式( <code>color:gray;</code> )将应用到这两个选择器所引用的元素。逗号告诉浏览器，规则中包含两个不同的选择器。如果没有这个逗号，那么规则的含义将完全不同。就变成了后代关系。</p>
<p>可以将任意多个选择器分组在一起，对此没有任何限制。</p>
<p>例如，如果您想把很多元素显示为灰色，可以使用类似如下的规则：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span>, <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">table</span>, <span class="hljs-selector-tag">th</span>, <span class="hljs-selector-tag">td</span>, <span class="hljs-selector-tag">pre</span>, <span class="hljs-selector-tag">strong</span>, <span class="hljs-selector-tag">em</span> &#123; <span class="hljs-attribute">color</span>:gray; &#125;<br></code></pre></td></tr></table></figure>
<p>使用选择器分组的好处就是可以使得样式书写更加的简洁：<br>例如, 我们可以这样定义样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: gray; &#125;<br><span class="hljs-selector-tag">h2</span> &#123; <span class="hljs-attribute">color</span>: gray; &#125;<br><span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">color</span>: gray; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>; &#125;<br><span class="hljs-selector-tag">a</span> &#123; <span class="hljs-attribute">color</span>: red; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>; &#125;<br></code></pre></td></tr></table></figure>
<p>但是使用分组后就可以写的简单一点：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-tag">p</span> &#123; <span class="hljs-attribute">color</span>: gray; &#125;<br><span class="hljs-selector-tag">a</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">p</span>, <span class="hljs-selector-tag">a</span> &#123; <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>; &#125;<br></code></pre></td></tr></table></figure>
<h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><div class="note success">
            <p>ID选择器是一种不依赖于某一个元素类型，而是对具有该ID值的标签进行设置样式的选择器。</p><p>但是同一个ID名称只能出现在文档中一次，也就是说只可以用于一个元素。</p>
          </div>
<p>使用方法如下：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/CSS/ID%E9%80%89%E6%8B%A9%E5%99%A8.png" alt=""><br>将在浏览器中显示如下：</p>
<p style="color: red;font-size: 30px;background-color: #bfa;">我是一个具有ID的段落，我没有女朋友！</p>

<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><div class="note success">
            <p>类选择器是另一种允许以一种独立于文档元素的方式来指定样式。</p><p>该选择器可以单独使用，也可以与其他元素结合使用，你如后代选择器，ID选择器。</p><p>类选择器可以说是使用最频繁的选择器了。</p>
          </div>
<p>使用方法如下：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/CSS/%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8.png" alt=""><br>将在浏览器中显示如下：</p>
<p style="color: red;font-size: 20px;background-color: #bfa;">我是一个具有class选择器的段落，我有女朋友，而ID选择器还是个单身狗!</p>

<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><div class="note success">
            <p>后代选择器( <code>descendant selector</code> )又称为包含选择器。</p><p>后代选择器可以选择作为某元素后代的元素。</p><p>后代选择器的使用场景是比较多的，但是一般只是使用，并没有什么特殊的地方，注意和子元素选择器区分。</p><p>通过后代选择器，我们可以选择某一具体的标签进行样式规定。</p>
          </div>

<p><strong>例1</strong>、下面我们只对 <code>&lt;p&gt;</code> 元素下的 <code>&lt;a&gt;</code> 标签定义样式：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">&lt;p&gt;&lt;a&gt;我是p标签下的超链接！&lt;/a&gt;&lt;/p&gt;<br>//定义样式<br>p a &#123;<br>    color: red;<br>    font-size: 16px;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在浏览器中显示如下：</p>
<p><a style="color: red; font-size: 16px;">我是p标签下的超链接！</a></p>

<p><strong>例2</strong>、对不同的列表设置样式</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/CSS/%E5%90%8E%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A8.png" alt=""><br>在浏览器中显示如下：<br>        <ul class="eating" style="color: red; list-style: square outside;"><br>            <li>面包</li><br>            <li>牛奶</li><br>            <li>沙发</li><br>        </ul><br>        <ul class="fruit"><br>            <li>苹果</li><br>            <li>柿子</li><br>            <li>李子</li><br>            <li>梨</li><br>        </ul></p>
<h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><blockquote style="background-color: rgb(167, 201, 66);">

<p>与后代选择器相比，子元素选择器（ <code>Child selectors</code> )只能选择作为某元素子元素的元素。</p>
<p>作用就是只能选择子元素(儿子)，而不能选择孙子即其他的祖孙后代。</p>
</blockquote>

<p>例如、你可以为元素 <code>p</code> 的子元素 <code>em</code> 元素设置样式，可以这样写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &gt; <span class="hljs-selector-tag">em</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure>
<p>当然，我认为直接使用后代选择器就可以，因为在后代选择器中只是父子关系的两个元素也可以认为是后代关系，而且不需要加 <code>&gt;</code> 号，所以子元素选择器使用的场景并不多，但是也不排除一些特殊的情况。</p>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>该节参考: <a href="https://www.w3school.com.cn/css/css_selector_attribute.asp" target="_blank" rel="noopener">https://www.w3school.com.cn/css/css_selector_attribute.asp</a></p>
<div class="note success">
            <p>CSS 2 引入了属性选择器。</p><p>属性选择器可以根据元素的属性及属性值来选择元素。</p><p>注意是属性以及具体的属性值都可以进行作为选择器。</p>
          </div>
<h3 id="1-简单属性选择"><a href="#1-简单属性选择" class="headerlink" title="1.简单属性选择"></a>1.简单属性选择</h3><p>如果希望选择<strong>有某个属性</strong>的元素，而不论属性值是什么，可以使用简单属性选择器。<br><strong>例1</strong>. 如果你希望把某个具有 <code>title</code> 属性的元素设置为红色，可以写成如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[title]</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure>
<p><strong>例2</strong>. 与上面类似，可以只对有 href 属性的锚（a 元素）应用样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href]</span> &#123;<span class="hljs-attribute">color</span>:red;&#125;<br></code></pre></td></tr></table></figure>
<p><strong>例3</strong>. 还可以根据多个属性进行选择，只需将属性选择器链接在一起即可。</p>
<p>例如，为了将同时有 href 和 title 属性的 HTML 超链接的文本设置为红色，可以这样写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href]</span><span class="hljs-selector-attr">[title]</span> &#123;<span class="hljs-attribute">color</span>:red;&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2-根据具体属性值选择"><a href="#2-根据具体属性值选择" class="headerlink" title="2.根据具体属性值选择"></a>2.根据具体属性值选择</h3><p>除了选择拥有某些属性的元素，还可以进一步<strong>缩小选择范围</strong>，只选择有特定属性值的元素。</p>
<p><strong>例1</strong>. 希望把带有 <code>title=&quot;css&quot;</code> 属性及属性值的元素设置为红色</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[title=<span class="hljs-string">"css"</span>]</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure>
<p>与简单的属性选择一样，可以指定具体的元素且具有该属性及属性值的元素设置样式。<br><strong>例2</strong>. 希望把带有 <code>title=&quot;css&quot;</code> 属性及属性值的超链接元素设置为红色：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title=<span class="hljs-string">"css"</span>]</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure>
<p>与简单属性选择器一致，可以根据多个属性和属性值进行选择，只需将属性选择器及其属性值连接在一起即可。<br><strong>例3</strong>. 希望把带有 <code>title=&quot;css&quot;</code> 以及<code>href=&quot;www.codedancer.online&quot;</code>的属性和属性值的超链接设置样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[title=<span class="hljs-string">"css"</span>]</span><span class="hljs-selector-attr">[href=<span class="hljs-string">"www.codedancer.online"</span>]</span> &#123; <span class="hljs-attribute">color</span>:red; &#125;<br></code></pre></td></tr></table></figure>
<h1 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h1><h2 id="水平对齐"><a href="#水平对齐" class="headerlink" title="水平对齐"></a>水平对齐</h2><div class="note success">
            <p>可以使用多种方式将元素水平对齐。</p><p>主要的方式有：</p><ol><li>使用 <code>margin</code>，令左右外边距值为 <code>auto</code>，对元素进行水平居中;</li><li>使用 <code>position</code> 对元素进行定位，可以对元素进行左右对齐；</li><li>使用 <code>float</code> 将元素浮动，可以对元素进行左右对齐。</li></ol>
          </div>
<h3 id="1-使用margin将元素居中对齐"><a href="#1-使用margin将元素居中对齐" class="headerlink" title="1.使用margin将元素居中对齐"></a>1.使用margin将元素居中对齐</h3><p>把左和右外边距的值设置为 <code>auto</code>，规定的是均等地分配可用的外边距。结果就是居中的元素：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">.center &#123;<br>  margin: 0 auto; //center块将水平居中<br>  background-color: #bfa;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="2-使用position属性进行左右对齐"><a href="#2-使用position属性进行左右对齐" class="headerlink" title="2.使用position属性进行左右对齐"></a>2.使用position属性进行左右对齐</h3><p>对齐元素的方法之一就是使用绝对定位，进行绝对定位后的元素会脱离文档流，并且能够重叠元素。</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">.right<br>&#123;<br>position: absolute;//绝对定位<br>right: 0px;<br>background-color: #bfa;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="3-使用float属性进行左右对齐"><a href="#3-使用float属性进行左右对齐" class="headerlink" title="3.使用float属性进行左右对齐"></a>3.使用float属性进行左右对齐</h3><p>对齐元素的另一个方法就是将元素设置为进行浮动，浮动后的元素会脱离文档流，并且能够重叠元素。</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">.fl &#123;<br>  float: left; //左浮动<br>  background-color: #bfa;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="4-解决IE的position-和-float属性的问题"><a href="#4-解决IE的position-和-float属性的问题" class="headerlink" title="4.解决IE的position 和 float属性的问题"></a>4.解决IE的position 和 float属性的问题</h3><p>使用 <code>position</code> 和 <code>float</code> 进行对齐元素在IE8及以下版本浏览器会带来一个问题，即会在右侧增加 <code>17px</code> 的外边距(可能是为滚动条预留的空间)。为了解决这一个问题，需要清除浏览器的默认行为，一般我们都会有一个 <code>reset.css</code> 文件来修改默认样式。<br>例如可以简单使用如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">* &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="display-和-visibility属性"><a href="#display-和-visibility属性" class="headerlink" title="display 和 visibility属性"></a>display 和 visibility属性</h2><h3 id="1-display属性"><a href="#1-display属性" class="headerlink" title="1.display属性"></a>1.display属性</h3><p><code>display</code> 属性有以下取值：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">block</span> <span class="hljs-selector-tag">--</span> 显示为块元素。元素前后有换行符。<br><span class="hljs-selector-tag">inline</span> <span class="hljs-selector-tag">--</span>显示为内联元素。元素前后没有换行符。<br><span class="hljs-selector-tag">inline-block</span> <span class="hljs-selector-tag">--</span> 显示为内联块元素。<span class="hljs-selector-tag">css2</span><span class="hljs-selector-class">.1</span> 新特性。<br><span class="hljs-selector-tag">none</span> <span class="hljs-selector-tag">--</span> 此元素将不会被显示。也不会原本占据空间。<br></code></pre></td></tr></table></figure>
<h3 id="2-visibility-属性"><a href="#2-visibility-属性" class="headerlink" title="2.visibility 属性"></a>2.visibility 属性</h3><p><code>visibility</code> 属性有以下取值：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">visbile</span> <span class="hljs-selector-tag">--</span>默认值，元素显示。<br><span class="hljs-selector-tag">hidden</span> <span class="hljs-selector-tag">--</span> 元素会隐藏，但是会占据原来位置。<br></code></pre></td></tr></table></figure>
<h2 id="图像透明度"><a href="#图像透明度" class="headerlink" title="图像透明度"></a>图像透明度</h2><div class="note success">
            <p>通过 CSS 创建透明图像是很容易的。</p><p><code>opacity</code> 属性是 <code>W3C CSS</code> 推荐标准的一部分。</p><p><code>opacity</code> 的取值是 <code>0~1</code> 之间的数值，代表透明度，默认值是1(不透明)</p>
          </div>
<p><strong>这里给出一个例子：</strong><br>常规图像：<br><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/CSS/%E4%BB%93.jpg" width="150px" height="200px" style="border-radius: 5px; box-shadow: 0 0 5px rgba(0,0,0,.8);" /></p>
<p>加上透明度的图像：</p>
<img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/CSS/%E4%BB%93.jpg" width="150px" height="200px" style="opacity: 0.5; border-radius: 5px;" />

<p>CSS样式如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">img &#123;<br>  opacity: 0<br>  filter: alpha(opacity=40);//针对IE8及更早版本<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>另一个例子：</strong><br>Hover效果，请把鼠标指针移动到图像上：</p>
<div class="box">
    <img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/CSS/%E4%BB%93.jpg" />
</div>
CSS样式代码如下：
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">img &#123;<br>  opacity: 0.1;<br>  filter: alpha(opacity=10);//针对IE8及更早版本<br>&#125;<br><br>img:hover &#123;<br>  opacity: 1;<br>  filter: alpha(opacity=100);//针对IE8及更早版本<br>&#125;<br></code></pre></td></tr></table></figure>

<style>
.box img {
  width: 150px;
  height: 200px;
  border-radius: 5px;
  opacity: 0.1;
  filter: alpha(opacity=10);//针对IE8及更早版本
}

.box img:hover {
  width: 300px;
  height: 400px;
  border-radius: 5px;
  box-shadow: 0 0 10px rgba(0,0,0,0.8);
  opacity: 1;
  filter: alpha(opacity=100);//针对IE8及更早版本
}
</style>

<blockquote>
<p>由上面也可以看出，为了兼容IE8及以下版本的浏览器，需要使用的是 <code>filter</code> 属性:<br /><code>filter: alpha(opacity=someValue);</code></p>
</blockquote>
<h2 id="导航条"><a href="#导航条" class="headerlink" title="导航条"></a>导航条</h2><p>演示：导航条</p>
<ul class="nav-list">
<li><a href="#home">首页</a></li>
<li><a href="#news">分类</a></li>
<li><a href="#contact">标签</a></li>
<li><a href="#about">归档</a></li>
<li><a href="#about">日程表</a></li>
<li><a href="#about">关于</a></li>

</ul>
<style>
.nav-list
{
list-style-type:none;
margin:0;
padding:0;
overflow:hidden;
}
.nav-list li
{
float:left;
}
.nav-list a:link,
.nav-list a:visited
{
display:block;
width:120px;
font-weight:bold;
color:#FFFFFF;
background-color:#bebebe;
text-align:center;
padding:4px;
text-decoration:none;
text-transform:uppercase;
}
.nav-list a:hover,
.nav-list a:active
{
background-color:#cc0000;
}

<p></style></p>
<div class="note success">
            <p>拥有易用的导航条对于任何网站都很重要。</p><p>通过 CSS，您能够把乏味的 <code>HTML</code> 菜单转换为漂亮的导航栏。</p>
          </div>
<p>导航条是一个链接列表，所以使用无序列表 <code>&lt;ul&gt;</code> 或者是自定义列表 <code>&lt;dl&gt;</code> 特别的合适。<br>我们一般使用 <code>&lt;ul&gt;</code> 来做导航条。</p>
<p>1、首先创建一个无序列表：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">&lt;ul&gt;<br>    &lt;li&gt;&lt;a href="#"&gt;首页&lt;/a&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;a href="#"&gt;分类&lt;/a&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;a href="#"&gt;标签&lt;/a&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;a href="#"&gt;归档&lt;/a&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;a href="#"&gt;日程表&lt;/a&gt;&lt;/li&gt;<br>    &lt;li&gt;&lt;a href="#"&gt;关于&lt;/a&gt;&lt;/li&gt;<br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure>
<p>将会在浏览器中显示如下：</p>
<ul class="one">
    <li><a href="#">首页</a></li>
    <li><a href="#">分类</a></li>
    <li><a href="#">标签</a></li>
    <li><a href="#">归档</a></li>
    <li><a href="#">日程表</a></li>
    <li><a href="#">关于</a></li>
</ul>
2、然后我们去掉列表项之前的标志( 圆点 )和超链接的下划线 ( 在`hexo`中默认所有的超链接都自带有下划线，所以在本文中不会产生原来效果)：
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>ul &#123;<br>  list-style-type: none;<br>&#125;<br>ul a &#123;<br>  text-decoration: none;<br>&#125;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
此时浏览器中将显示如下(可见并没有去掉下划线，这里先不管它了)：
<ul class="three" style="list-style-type: none;margin: 0; padding: 0">
    <li><a href="#" style="text-decoration: none;">首页</a></li>
    <li><a href="#">分类</a></li>
    <li><a href="#">标签</a></li>
    <li><a href="#">归档</a></li>
    <li><a href="#">日程表</a></li>
    <li><a href="#">关于</a></li>
</ul>
<style>
.three li {
  list-sty-type: none;   //左浮动
}
.three a {
  text-decoration: none;
}
</style>
3、将导航栏水平放置并设置链接的宽度和字体等等：

<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>ul li &#123;<br>  float: left;   //左浮动<br>&#125;<br>ul a &#123;<br>  display: block;<br>  width: 120px;<br>  color:#FFFFFF;<br>  font-weight:bold;<br>  background-color:#bebebe;<br>  text-decoration: none;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure>
<p>浏览器中将显示如下：</p>
<ul class="two">
   <li><a href="#">首页</a></li>
    <li><a href="#">分类</a></li>
    <li><a href="#">标签</a></li>
    <li><a href="#">归档</a></li>
    <li><a href="#">日程表</a></li>
    <li><a href="#">关于</a></li>
</ul>
<style>
.two {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
.two li {
  float: left;
  text-align: center;
}
.two li a {
  display: block;
  width: 120px;
  font-weight:bold;
  color:#FFFFFF;
  background-color:#bebebe;
  text-decoration: none;
}
</style>
<br /><br />
4、设置hover：

<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#cc0000</span>; <br>&#125;<br></code></pre></td></tr></table></figure>
<p>最终的效果如下所示：</p>
<ul class="four">
   <li><a href="#">首页</a></li>
    <li><a href="#">分类</a></li>
    <li><a href="#">标签</a></li>
    <li><a href="#">归档</a></li>
    <li><a href="#">日程表</a></li>
    <li><a href="#">关于</a></li>
</ul>
<style>
.four {
    list-style-type: none;
    margin: 0;
    padding: 0;
  }
.four li {
  float: left;
  text-align: center;
}
.four li a {
  display: block;
  width: 120px;
  font-weight:bold;
  color:#FFFFFF;
  background-color:#bebebe;
  text-decoration: none;
}
.four a:hover {
  background-color: #cc0000;
}
</style>
<br /><br />
5、最后是导航条的完整代码：



<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/CSS/nav-list.png" alt=""></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS基础</tag>
      </tags>
  </entry>
  <entry>
    <title>将VSCode打造为专属IDE</title>
    <url>/2020/03/11/VSCode%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;微软出品的 <code>VSCode</code> 对程序员来说可谓是一个“福音”，优美的界面，强大的插件功能，治愈很多的“强迫症患者”，但是要想使该编辑器媲美一些强大的IDE ( 比如 : <code>Visual Stdio</code>,<code>IDEA</code>,<code>PyCharm</code> )，当然需要一番的周折，下面这张图就介绍了任何一门语言想要通过 <code>VSCode</code> 进行编译和调试都要进行的5个配置步骤：</p>
<a id="more"></a>

<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/VSCode-Xmind/VSCode%E7%8E%AF%E5%A2%83%E9%9C%80%E8%A6%81.png" alt=""></p>
<p>下面这张图是以 <code>C++</code> 配置为例：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/VSCode-Xmind/C++%E9%85%8D%E7%BD%AE.png" alt=""></p>
<ol>
<li>本地机运行环境:主要是指编译器和解释器；以 <code>C++</code> 为例，我们需要在 <code>Windows</code> 系统上安装编译器来编译 <code>C++</code> ，需要安装调试器来调试代码；<code>MinGw</code> 包含 <code>C/C++</code> 编译器 <code>gcc/g++</code>，同时包括调试器 <code>gdb</code>;有了这样的配置，然后再把这些工具配置在 <code>VSCode</code> 中，就可以实现基本的编译和调试，当然还不包括检错和代码格式化等其他IDE具有的功能；</li>
<li>调试： 在第一步中我们就已经安装好了调试器 <code>gdb</code> ，如果你不想使用 <code>MinGw</code> 包含的调试器，也可以网上去下载其他的调试器，只要在配置中配置相应的调试器位置即可；</li>
<li>格式化：要想使 <code>VSCode</code> 具有格式化的功能，需要安装插件，或者使用 <code>VSCode</code> 自带的格式化功能，这里推荐一款几乎支持所有主流语言的格式化插件 :<code>Prettier</code>;</li>
<li>检错功能，其实对于 <code>VSCode</code> 来说，基本的功能都具有，但是为了强化，比如还有 <code>代码颜色</code>，<code>自动补全</code> 等等，这里我们安装一款插件 :<code>C/C++</code>;</li>
<li>插件市场：如果你想体验 <code>VSCode</code> 更多的其他的功能的话，可以自己搜查一下好用的插件，但是对于 <code>C/C++</code> 的编译和调试来说，上面的几步已经足够。</li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML</title>
    <url>/2020/03/04/HTML/</url>
    <content><![CDATA[<p>在学习 <code>HTML</code> 的过程中有一个感受就是知识并不困难，但是比较繁琐，需要自己去总结消化，以及适当的记忆才能用好。所以在学习完后就想做一个系统的梳理，于是就有了这篇文章，主要是有两个目的：</p>
<a id="more"></a>
<ol>
<li>自己消化总结梳理知识知识点，主要用于自己学习，如果想更好学习，推荐大家去  <a href="https://www.w3school.com.cn/" target="_blank" rel="noopener">W3shool官网</a> 学习</li>
<li>方便自己以后复习(毕竟自己的资料才最好接收到)</li>
</ol>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p><code>HTML</code> 的标题是通过 <code>&lt;h1&gt;</code> - <code>&lt;h6&gt;</code> 标签进行定义的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>这是四级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>这是五级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>这是六级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><p><code>HTML</code> 段落是通过 <code>&lt;p&gt;</code> 标签定义的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="超链"><a href="#超链" class="headerlink" title="超链"></a>超链</h1><p><code>HTML</code> 超链接是通过 <code>&lt;a&gt;</code> 标签进行定义的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"url"</span>&gt;</span>链接显示文本<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><code>HTML</code> 标签当然可以嵌套，于是就有将一张图片设置为超链接：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"url"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"url"</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h1><p><code>HTML</code> 图像是通过 <code>&lt;img&gt;</code> 标签定义的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">""</span> <span class="hljs-attr">height</span>=<span class="hljs-string">""</span> /&gt;</span><br></code></pre></td></tr></table></figure>
<p><code>&lt;img&gt;</code> 标签是一个自闭合标签，其他的标签一定要手动关闭。避免不必要的麻烦。</p>
<h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><p><code>&lt;script&gt;</code> 标签是定义插入一段脚本的标签，必需属性是 <code>type</code>,默认值为 <code>type=&quot;text/javascript&quot;</code> –表示插入的是一段 javascript 脚本：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"><br>   <span class="hljs-built_in">document</span>.write(<span class="hljs-string">"HelloWorld!"</span>);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>该脚本会在浏览器输出 <code>HelloWorld!</code>。以后在插入脚本的时候一般都是链接外部脚本文件，所以 <code>script</code> 元素一个经常使用的属性是 <code>src</code>，地址就是外部的脚本文件位置。</p>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p><code>HTML</code> 中表格由 <code>&lt;table&gt;</code> 标签定义。每个表格均有若干行(由 <code>&lt;tr&gt;</code> 标签定义)，每行被分割为若干单元格(由 <code>&lt;td&gt;</code> 标签定义)。<code>td</code> 指单元格（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。<br>例如我们要创建一个两行三列的表格：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1,1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1,2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1,3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2,1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2,2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2,3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure>
<blockquote>
<p>如果不定义边框属性 <code>border</code>=”1” 的条件下，表格将不显示边框</p>
</blockquote>
<p>上述表格在浏览器中显示如下：</p>
<table border="1">
    <tr>
        <td>1,1</td>
        <td>1,2</td>
        <td>1,3</td>
    </tr>
        <tr>
        <td>2,1</td>
        <td>2,2</td>
        <td>2,3</td>
    </tr>
<table>

<p><code>&lt;caption&gt;</code> 还可以用来定义表格的标题：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">capation</span>&gt;</span>这是一个表格<span class="hljs-tag">&lt;/<span class="hljs-name">capation</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1,1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1,2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>1,3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2,1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2,2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>2,3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure>



<table border="1">
    <capation>这是一个表格</capation>
    <tr>
        <td>1,1</td>
        <td>1,2</td>
        <td>1,3</td>
    </tr>
        <tr>
        <td>2,1</td>
        <td>2,2</td>
        <td>2,3</td>
    </tr>
<table>

<p><code>&lt;th&gt;</code> 用来定义表格的表头：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">"1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>人事情况<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--必须要定义一个行--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>职业<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>25<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>程序员<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>王五<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>35<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>产品经理<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure>
<table border="1">
    <caption>人事情况</caption>
    <!--必须要定义一个行-->
    <tr>
        <th>姓名</th>
        <th>年龄</th>
        <th>职业</th>
    </tr>
    <tr>
        <td>张三</td>
        <td>25</td>
        <td>程序员</td>
    </tr>
        <tr>
        <td>王五</td>
        <td>35</td>
        <td>产品经理</td>
    </tr>
<table>

<h1 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h1><p>通过使用框架，可以在同一个浏览器窗口中显示不止一个页面。<br><code>HTML</code> 框架是通过 <code>&lt;frameset&gt;</code> 标签定义的，可以定义水平框架和垂直框架：<br>水平框架：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"25%,50%,25%"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/example/html/frame_a.html"</span>&gt;</span> <span class="hljs-comment">&lt;!--框架1(文档1)--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/example/html/frame_b.html"</span>&gt;</span> <span class="hljs-comment">&lt;!--框架2(文档2)--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/example/html/frame_c.html"</span>&gt;</span> <span class="hljs-comment">&lt;!--框架3(文档3)--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>垂直框架：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">frameset</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"25%,50%,25%"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/example/html/frame_a.html"</span>&gt;</span> <span class="hljs-comment">&lt;!--框架1(文档1)--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/example/html/frame_b.html"</span>&gt;</span> <span class="hljs-comment">&lt;!--框架2(文档2)--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">frame</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/example/html/frame_c.html"</span>&gt;</span> <span class="hljs-comment">&lt;!--框架3(文档3)--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">frameset</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h1><p><code>&lt;iframe&gt;</code> 用于在网页内显示网页。使用方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"URL"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span> <br><span class="hljs-comment">&lt;!--其中URL指的是另一个网页的地址(文档).html文件--&gt;</span><br></code></pre></td></tr></table></figure>
<p><code>&lt;iframe&gt;</code> 的基本属性宽度和高度：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"URL"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"200"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"100"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>在浏览器中显示如下：(生成一个200*100的框)：</p>
<iframe src="URL" width="200" height="100"></iframe>

<h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h2><p>文本格式化标签有很多，但是文本样式都是通过 <code>css</code> 进行定义，所以真正使用的场景很少，主要有以下这些：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span>&gt;</span> --粗体(blod)<br><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span> --强调(emphasize)，显示为斜体<br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span> --斜体(italic)<br><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span> --加重语气，也显示为斜体，但是语气更强，一般不使用<br><span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span> --下划线(insert)<br><span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span> --删除线(delete)<br><span class="hljs-tag">&lt;<span class="hljs-name">sup</span>&gt;</span> --上标<br><span class="hljs-tag">&lt;<span class="hljs-name">sub</span>&gt;</span> --下标<br></code></pre></td></tr></table></figure>
<h2 id="预格式化标签"><a href="#预格式化标签" class="headerlink" title="预格式化标签"></a>预格式化标签</h2><p>因为在格式化的过程中，<code>html</code> 标签中的多次空格和换行默认为只有一次空格和换行，所以要想保留自己的格式，需要使用标签 <code>&lt;pre&gt;</code>。<br><code>HTML</code> 预格式化是通过 <code>&lt;pre&gt;</code> 标签定义的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><br>我会       保留  自己的格式<br><br><br>可以显示多次换行以及多个空格<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>最后的输出显示为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">我会       保留  自己的格式<br><br><br>可以显示多次换行以及多个空格<br></code></pre></td></tr></table></figure>

<h2 id="程序代码标签"><a href="#程序代码标签" class="headerlink" title="程序代码标签"></a>程序代码标签</h2><p><code>HTML</code> 中代码是通过 <code>&lt;code&gt;</code> 标签定义的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><br>  var result = function sum(num1, num2) &#123;<br>      return num1+num2;<br>  &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>但是最后的输出可能超出我们的预料，输出会是下面这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html">var result = function sum(num1, num2)&#123;return num1+num2;&#125;<br></code></pre></td></tr></table></figure>
<p>所以要想保留代码风格，还要加上 <code>&lt;pre&gt;</code> 标签进行预格式化：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">code</span>&gt;</span><br>    var result = function sum(num1, num2) &#123;<br>          return num1+num2;<br>  &#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>最后的输出才是我们想要的结果：</p>
<pre>
    <code>
    var result = function sum(num1, num2) {
          return num1+num2;
  }
    </code>
</pre>   
<h2 id="引用和术语定义标签"><a href="#引用和术语定义标签" class="headerlink" title="引用和术语定义标签"></a>引用和术语定义标签</h2><p>引用和引用块，<code>&lt;q&gt;</code> 和 <code>&lt;blockquote&gt;</code> 分别是引用和块引用的标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>WWF 的目标是 <span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>构建人与自然和谐相处的世界。<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>最后的输出会自动加上双引号;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>以下内容引用自 WWF 的网站：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">"http://www.worldwildlife.org/who/index.html"</span>&gt;</span><br>五十年来，WWF 一直致力于保护自然界的未来。<br>世界领先的环保组织，WWF 工作于 100 个国家，<br>并得到美国一百二十万会员及全球近五百万会员的支持。<br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>浏览器一般会对 <code>&lt;blockquote&gt;</code> 标签进行缩进处理，其他没有不同</p>
<h2 id="缩写标签"><a href="#缩写标签" class="headerlink" title="缩写标签"></a>缩写标签</h2><p><code>&lt;abbr&gt;</code> 元素定义缩写或者是首字母缩写。<br>具体含义看下面的例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"World Health Organization"</span>&gt;</span>WHO<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure>
<h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p><code>&lt;ul&gt;</code> 标签用于定义无序列表，<code>&lt;li&gt;</code> 用于定义列表项：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>面包<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>牛奶<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>沙发<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>最终的输出就是如下所示：</p>
<ul>
<li>面包</li>
<li>牛奶</li>
<li>沙发</li>
</ul>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p><code>&lt;ol&gt;</code> 标签定义有序列表，同样， <code>&lt;li&gt;</code> 用于定义列表项：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>面包<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>牛奶<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>沙发<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>最终输出结果：<br>1.面包<br>2.牛奶<br>3.沙发</p>
<h2 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h2><p>除了使用 <code>&lt;ul&gt;</code> 和 <code>&lt;ol&gt;</code> 列表之外，我们还可以自定义列表，使用的标签有：<code>&lt;dl&gt;</code> 、<code>&lt;dt&gt;</code> 和 <code>&lt;dd&gt;</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>Black hot drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>White cold drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>在浏览器显示如下：</p>
<dl>
   <dt>Coffee</dt>
      <dd>Black hot drink</dd>
   <dt>Milk</dt>
      <dd>White cold drink</dd>
</dl>

<h1 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h1><p><code>HTML</code> 表单用于搜集不同类型的用户输入。表单并不会显示，可以看做是一个可以容纳表单元素的容器。<br><code>HTML</code> 中使用 <code>&lt;form&gt;</code> 标签定义表单。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    form element(内部定义的是表单元素)...<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>表单元素指的是不同类型的 input 元素、复选框、单选按钮、提交按钮等等。</p>
<h2 id="input元素"><a href="#input元素" class="headerlink" title="input元素"></a>input元素</h2><p><code>&lt;input&gt;</code> 元素是最重要的表单元素。不需要关闭。<br>根据 <code>type</code> 属性不同，<code>&lt;input&gt;</code> 元素有很多形态。 <code>type</code> 属性是必需属性。<br>经常使用的值有：<code>text</code> 、<code>password</code>、<code>submit</code> 、<code>radio</code>、<code>checkbox</code></p>
<p>使用方法就是直接添加值即可：<br><code>text</code>值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    用户：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>浏览器显示如下：</p>
<form>
    用户：<input type="text"></br>
    密码：<input type="text">
</form>

<p><code>submit</code> 值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    用户：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>浏览器中显示如下：</p>
<form>
    用户：<input type="text"><br />
    密码：<input type="text">
    <input type="submit">
</form>  

<p><code>radio</code> 值：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span>&gt;</span>male<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span>&gt;</span>femal<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></td></tr></table></figure>
<p>在浏览器中显示如下：<br><input type="radio">male<br/><br><input type="radio">femal<br/> </p>
{% note warning %}
除了input 元素除了 type 属性外，当然也可以有其他的属性，比如经常使用的是在type="text"时，添加占位符属性：`placeholder`;在type="submit" 时，添加 value 属性，表示的是提交按钮中的文字。
{% endnote %}

<h3 id="button-属性"><a href="#button-属性" class="headerlink" title="button 属性"></a>button 属性</h3><p>除了 <code>input</code> 元素之外，还有一些其他的元素，有 <code>&lt;button&gt;</code>、<code>&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code><br><code>HTML</code>中使用 <code>button</code> 定义按钮：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"alert('Hello World!')"</span>&gt;</span>点击我！<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>浏览器中的显示效果是：<br><button type="button" onclick="alert('Hello World!')">点击我！</button></p>
<h3 id="select元素"><a href="#select元素" class="headerlink" title="select元素"></a>select元素</h3><p><code>select</code> 元素定义下拉列表：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>班级：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1班"</span>&gt;</span>1班<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2班"</span>&gt;</span>2班<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"3班"</span>&gt;</span>3班<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"4班"</span>&gt;</span>4班<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>浏览器中显示：</p>
<p>班级</p>
<select>
    <option value="1班">1班</option>
    <option value="2班">2班</option>
    <option value="3班">3班</option>
    <option value="4班">4班</option>
</select>  

<h3 id="textarea元素"><a href="#textarea元素" class="headerlink" title="textarea元素"></a>textarea元素</h3><p><code>textarea</code> 元素定义文本域:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">"20"</span>&gt;</span>  <span class="hljs-comment">&lt;!--注意定义行数和列数，否则显示不出来--&gt;</span><br>    The cat was playing in the garden.<br><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>浏览器中显示如下：<br><textarea rows="10" cols="20"><br>    The cat was playing in the garden.<br></textarea></p>
<div class="note warning">
            <p>在 <code>HTML5</code> 中还添加了一些较新的类型，这里我们不过多的讨论，具体的会放在 <code>HTML5</code> 中讲解，其实也很简单，只要分清使用的场景即可!</p>
          </div>

<h1 id="音频-视频"><a href="#音频-视频" class="headerlink" title="音频/视频"></a>音频/视频</h1><p>首先要明白，音频和视频文件目前没有较好的使用方法，因为各个浏览器的兼容性问题，但是在 <code>HTML5</code> 之后，我们找到了一种比较好的方法，但也不是完美的。<br>在<code>HTML5</code> 之前，插入音频和视频主要使用两个标签(元素)：<code>&lt;embed&gt;</code> 和<code>&lt;object&gt;</code></p>
<h2 id="插入音频文件"><a href="#插入音频文件" class="headerlink" title="插入音频文件"></a>插入音频文件</h2><p>1  使用 <code>&lt;embed&gt;</code> 标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"100"</span> /&gt;</span><br></code></pre></td></tr></table></figure>

<p>其中 <code>src</code>属性是自己插入音频资源位置；<br>问题：</p>
<ul>
<li><embed> 标签在 HTML 4 中是无效的。页面无法通过 HTML 4 验证。</li>
<li>不同的浏览器对音频格式的支持也不同。</li>
<li>如果浏览器不支持该文件格式，没有插件的话就无法播放该音频。</li>
<li>如果用户的计算机未安装插件，无法播放音频。</li>
<li>如果把该文件转换为其他格式，仍然无法在所有浏览器中播放。</li>
</ul>
<p>2  使用 <code>&lt;object&gt;</code> 标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">""</span> <span class="hljs-attr">width</span>=<span class="hljs-string">""</span> /&gt;</span><br></code></pre></td></tr></table></figure>
<p>其中 <code>src</code>属性是自己插入音频资源位置；<br>问题：</p>
<ul>
<li>不同的浏览器对音频格式的支持也不同。</li>
<li>如果浏览器不支持该文件格式，没有插件的话就无法播放该音频。</li>
<li>如果用户的计算机未安装插件，无法播放音频。</li>
<li>如果把该文件转换为其他格式，仍然无法在所有浏览器中播放。</li>
</ul>
<p>3  <code>&lt;audio&gt;</code> 元素<br><code>&lt;audio&gt;</code> 是 <code>HTML5</code> 元素，使用如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">"controls"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"song.mp3"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"audio/mp3"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"song.ogg"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"audio/ogg"</span> /&gt;</span><br>Your browser does not support this audio format.<br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><code>&lt;audio&gt;</code> 元素有几个常用的属性：</p>
<ul>
<li><code>control</code>: 是否允许用户控制暂停、播放、调节音量等操作，一般都要加上；</li>
<li><code>autoplay</code>:是否允许资源自动播放，一般是不会的，会对带来不好的用户体验；</li>
<li><code>loop</code>: 是否循环播放，一般也不设置，看具体的场合，需要设置的场合很少。</li>
</ul>
<p>4  最好的音频解决方法</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">"controls"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"100"</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"song.mp3"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"audio/mps"</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"song.ogg"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"audio/ogg"</span> /&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"song.mp3"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"100"</span> /&gt;</span><br>   Your bowser is not support audio element!<br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="插入视频文件"><a href="#插入视频文件" class="headerlink" title="插入视频文件"></a>插入视频文件</h3><p>视频和音频的方法是一样的，都有三个标签进行插入：<code>&lt;embed&gt;</code>、<code>object</code> 和 <code>&lt;video&gt;</code><br>1  使用 <code>&lt;embed&gt;</code> 标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"100"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"100"</span> /&gt;</span><br></code></pre></td></tr></table></figure>
<p>其中 <code>src</code>属性是自己插入视频资源位置；<br>问题：</p>
<ul>
<li><embed> 标签在 HTML 4 中是无效的。页面无法通过 HTML 4 验证。</li>
<li>不同的浏览器对视频格式的支持也不同。</li>
<li>如果浏览器不支持该文件格式，没有插件的话就无法播放该视频。</li>
<li>如果用户的计算机未安装插件，无法播放视频。</li>
<li>如果把该文件转换为其他格式，仍然无法在所有浏览器中播放。</li>
</ul>
<p>2  使用 <code>&lt;object&gt;</code> 标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">object</span> <span class="hljs-attr">data</span>=<span class="hljs-string">"url"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">""</span> <span class="hljs-attr">width</span>=<span class="hljs-string">""</span> /&gt;</span><br></code></pre></td></tr></table></figure>
<p>其中 <code>src</code>属性是需要插入视频资源位置；<br>问题：</p>
<ul>
<li>不同的浏览器对视频格式的支持也不同。</li>
<li>如果浏览器不支持该文件格式，没有插件的话就无法播放该视频。</li>
<li>如果用户的计算机未安装插件，无法播放视频。</li>
<li>如果把该文件转换为其他格式，仍然无法在所有浏览器中播放。</li>
</ul>
<p>3  <code>&lt;video&gt;</code> 元素<br><code>&lt;video&gt;</code> 是 <code>HTML5</code> 元素，使用例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">"controls"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"200"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"movie.mp4"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"video/mp4"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"movie.ogg"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"video/ogg"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"movie.webm"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"video/webm"</span> /&gt;</span><br>Your browser does not support this video format.<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p><code>&lt;video&gt;</code> 元素有几个常用的属性：</p>
<ul>
<li><code>control</code>: 是否允许用户控制暂停、播放、调节音量等操作，一般都要加上；</li>
<li><code>autoplay</code>:是否允许资源自动播放，一般是不会的，会对带来不好的用户体验；</li>
<li><code>loop</code>: 是否循环播放，一般也不设置，看具体的场合，需要设置的场合很少。</li>
</ul>
<p>4 最好的解决方案</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">"controls"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"200"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"movie.mp4"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"video/mp4"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"movie.ogg"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"video/ogg"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"movie.webm"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"video/webm"</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">embed</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"song.mp3"</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">height</span>=<span class="hljs-string">"200"</span> /&gt;</span><br>Your browser does not support this video format.<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure>
<div class="note success">
            <p>这就是 <code>HTML</code> 中所有的基本的元素，<code>HTML5</code> 略有涉及，有关 <code>HTML5</code> 详细的学习见下一篇文章。</p>
          </div>
<hr>
<p>参考：</p>
<p>[1] <a href="https://www.w3school.com.cn/" target="_blank" rel="noopener">W3school官网</a>  </p>
]]></content>
      <categories>
        <category>前端</category>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>域名解析失败？可能并不是</title>
    <url>/2020/02/20/%E5%9F%9F%E5%90%8D%E6%B2%A1%E8%A7%A3%E6%9E%90%EF%BC%9F%E5%B9%B6%E6%B2%A1%E6%9C%89/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近入手了阿里的云服务器，因为之前使用的是 <code>hexo</code> 博客框架 (也就是现在这个博客)，并且部署在了 <code>github page</code> 上，所以只是在阿里云买了一个比较心仪的域名  <code>dancingcode.cn</code>，但是现在突然想整个个人服务器玩一玩，于是前几天就又同时在阿里云入手了 <code>ECS</code> 和一个比较便宜一点的域名: <code>codedancer.online</code>，由于之前绑定的 <code>github page</code> 的域名是 <code>.cn</code> 的，自己觉得比较高档一点，所以就打算将这个两个域名的解析更换一下，但是中间出了一点小插曲…</p>
<a id="more"></a>
<p>首先我把之前 <code>dancingcode.cn</code> 解析到 <code>github page</code> 的记录删除，方法很简单就是在阿里云的控制台操作即可(删除记录)：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/server/deletedomain.jpg" alt=""></p>
<p>然后记得之前还在 <code>github page</code> 的 <code>username.github.io</code> 的仓库中中还设置过域名，然后再改过来即可：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/server/gtihub.jpg" alt=""></p>
<p>这样就算是更改完了，然后再把自己新买的域名，就是现在的 <code>codedancer.online</code> 绑定到 <code>github page</code> 的地址。再将 <code>dancingcode.cn</code> 绑定到自己新买的服务器上。可真的是挺折腾的，不过其实并不麻烦。</p>
<p>本以为一切都是那么的优雅，一切都是那么完美，但是在我在我使用域名 <code>dancingcode.cn</code> 试图访问个人服务器的时候出现了问题，无法访问 !!!。 so what happend? 当时我的第一反应就是服务器内部的个人网站没有添加域名，于是我就去宝塔面板下查看站点设置：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/server/baota.jpg" alt=""></p>
<p>由上图可知域名已经添加过了，而且已经解析过了，应该不是站点的问题。所以我就想看是不是域名没有解析成功呢？于是来到了 <code>cmd</code> 看一下是不是解析成功：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/server/ping.jpg" alt=""></p>
<p>通过 <code>ping</code> 命令看到是通的，而且返回的是自己服务器地址，这就真的难受了。然后又回到了阿里云的控制台页面，查看 <code>80</code> 端口( <code>http</code> 服务端口)是否已经打开，查看结果显然是已经打开：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/server/80port.jpg" alt=""></p>
<p>于是就又尝试了几次，突然发现使用 <code>www</code> 前缀可以访问，即 <code>www.dancincgcode.cn</code> 可以，但是使用主域名 <code>dancingcode.cn</code> (不加前缀) 是无法访问的，所以肯定是有地方没有设置成功。于是我又来到了控制台查看域名的解析：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/server/domainname.jpg" alt=""></p>
<p>可以看到主域名和 <code>www</code> 前缀都已经解析到了服务器，难道是没有刷新？因为默认设置的刷新时间 <code>TTL</code> 是 <code>10</code> 分钟，所以我又等了 <code>10</code> 分钟后重试，还是不行。</p>
<p>最后实在不行了就去谷歌了一下，谷歌出来的都是阿里云的官方文档，不得不说阿里云的官方文档是真的详细，从理论到方法都有详细的讲解，直到我看到了这一篇文章 ( 分析域名解析不生效的原因 )：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/server/DNScache.jpg" alt=""></p>
<p>所以主要的原因是<strong>终端缓存</strong>或<strong>域名服务器的缓存</strong>没有遵循特定的时间 ( <code>TTL</code> 时间 )进行刷新，所以域名解析还未生效。</p>
<p>作为一个从通信出身的彩笔来说，对上述的说明隐隐约约大概明白。所以冥冥之中就有了一个想法，我既然不能刷新 <code>DNS</code> 服务器 (这是上层的事)，是不是因为我自己的终端没有刷新 <code>DNS</code> 缓存呢？要不要试一试，反正也没什么好的方法。</p>
<p>说干就干，于是搜索 <code>如何刷新DNS缓存?</code>，在 <code>windows</code> 下只要一条命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ipconfig/flushdns</span><br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/server/flushdns.jpg" alt=""><br>刷新完成后又试了一下还是不行，我裂开了…</p>
<p>后来突发奇想，既然是缓存，那么浏览器的缓存是不是也需要清除一下 ( 想到这个的原因是每次输入域名都会有提示，说明还有缓存或者历史记录没有清除 )，所以干脆就把所有的浏览器的所有的 <code>cookie</code> 和 <code>历史记录</code> 等等都清除了：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/server/%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98.jpg" alt=""></p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/server/%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%982.jpg" alt=""></p>
<p>然后又试了一下，发现已经成功了。至此，就这样成功了…??? 很迷但回头想想确实是有道理。</p>
<p>总结：</p>
<p>其实域名的解析和网站都没有问题 (一般 <code>ISP</code> 的服务质量是很好的)，域名服务器的缓存刷新也没有问题，只是自己的终端上的或者更确切的说是浏览器的缓存没有清除。所以如果有小伙伴遇到这样的问题，试着刷新自己的缓存即可。</p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>个站</tag>
      </tags>
  </entry>
  <entry>
    <title>盒子(框)模型</title>
    <url>/2020/02/15/CSS%E4%B8%AD%E7%9A%84%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;我们知道一个网页就是一个 <code>html</code> 文档，文档是由许多的 <code>html</code> 标签 (元素)组成，使用 <code>CSS</code> 处理网页的时候认为每一个元素都是一个盒子(框)，所以只要在合适的位置摆放合适的盒子就可以实现对网页的布局，基本的实现方法就是大盒套小盒。盒子模型是 <code>CSS</code> 中最重要的概念。</p>
<a id="more"></a>

<h1 id="盒子-框-模型"><a href="#盒子-框-模型" class="headerlink" title="盒子(框)模型"></a>盒子(框)模型</h1><p>首先我们要知道什么是盒子模型以及盒子模型的几个重要的概念，如下图如所示：<br><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Box-Model/boxmodel.gif" alt=""><br>盒子由四个部分组成：元素（内容）部分（element）、内边距(padding)、边框（border）、外边距（margin）。这几个概念没有什么好说的，就是上图所展示的各个部分。但是要想很好的使用还是不太容易。</p>
<h1 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h1><p>盒子的内边距在边框和内容区之间。控制该区域最简单的属性是 <code>padding</code> 属性。</p>
<h2 id="padding-属性"><a href="#padding-属性" class="headerlink" title="padding 属性"></a>padding 属性</h2><p>CSS padding 属性定义元素的内边距。padding 属性接受长度值或百分比值，但不允许使用负值。<br>由于我们有四个内边距，我们可以使用四个属性分别设置四个方向(上、右、下、左)的内边距：<br><code>padding-top</code> 、<code>padding-right</code> 、<code>padding-bottom</code> 、<code>padding-left</code>。</p>
<div class="note info">
            <p>注释:内边距会影响整个盒子的大小，虽然内容区的大小不会改变，但是整个盒子的外观会变大。<br>所以整个盒子的大小就是由 <code>元素内容</code> 、<code>内边距</code>、<code>边框</code> 决定，为三者之和。</p>
          </div>
<h2 id="简写属性"><a href="#简写属性" class="headerlink" title="简写属性"></a>简写属性</h2><p>我们可以在属性 <code>padding</code> 中同时为四个方向设置内边距。四个值的顺序为上、右、下、左：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">5px</span> <span class="hljs-number">20px</span> <span class="hljs-number">15px</span>&#125;<br></code></pre></td></tr></table></figure>
<p>上面的例子，我们就为 <code>h1</code> 设置分别为 上、右、下、左四个边的内边距分别为 10px、5px、20px、15px 大小。</p>
<h1 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h1><h2 id="border-属性"><a href="#border-属性" class="headerlink" title="border 属性"></a>border 属性</h2><p>元素的边框 (border) 是围绕元素内容和内边距的一条或多条线。<br><code>border</code>  属性允许你规定元素边框的样式、宽度和颜色。</p>
<h2 id="边框的样式"><a href="#边框的样式" class="headerlink" title="边框的样式"></a>边框的样式</h2><p><code>border style</code> 属性：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">border-style</span><span class="hljs-selector-pseudo">:dotted</span> <span class="hljs-selector-tag">solid</span> <span class="hljs-selector-tag">double</span> <span class="hljs-selector-tag">dashed</span>;<br></code></pre></td></tr></table></figure>
<p>分别表示的是: 点线、实线、双线 以及 虚线。</p>
<h2 id="边框的宽度"><a href="#边框的宽度" class="headerlink" title="边框的宽度"></a>边框的宽度</h2><p><code>border width</code> 属性：<br>为边框指定宽度有两种方法：可以指定长度值，比如 2px 或 0.1em；或者使用 3 个关键字之一，它们分别是 <code>thin</code> 、<code>medium</code>（默认值） 和 <code>thick</code>。其中 <code>thin</code> 、<code>medium</code> 和 <code>thick</code> 三个关键字在不同的浏览器中代表的像素值大小不确定，可能分别是 5px、3px 、2px，也可能是   3px、3px 、1px，所以最好不要轻易使用这三个关键字。</p>
<p>同理，除了 <code>border-width</code> 属性外，我们还可以分别指定四个方向边框的宽度，使用的是下面四个属性：<br><code>border-top-width</code> 、 <code>border-right-width</code> 、<code>border-bottom-width</code> 、<code>border-left-width</code>。</p>
<h2 id="边框的颜色"><a href="#边框的颜色" class="headerlink" title="边框的颜色"></a>边框的颜色</h2><p><code>border-color</code> 属性：<br>该属性可以使用任意的颜色值：可以是颜色名，也可以是十六进制数以及 <code>RGB</code> 值：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">border-color</span>: <span class="hljs-selector-tag">red</span> <span class="hljs-selector-tag">rgb</span>(0,245,255) <span class="hljs-selector-id">#bbffaa</span> <span class="hljs-selector-tag">yellow</span>;<br></code></pre></td></tr></table></figure>
<p>上面的标记就是为边框的四个方向定义颜色 ：上、右、下、左的颜色分别就是 red 、rgb(0,245,255) 、#bbffaa 、yellow。</p>
<p>同理，除了 <code>border-color</code> 属性外，我们还可以分别为四个方向指定边框的颜色：分别是下面的四个属性：<br><code>border-top-color</code> 、 <code>border-right-color</code> 、<code>border-bottom-color</code> 、<code>border-left-color</code>。</p>
<h2 id="简写属性-1"><a href="#简写属性-1" class="headerlink" title="简写属性"></a>简写属性</h2><p>我们通常不会写得这么麻烦，如无特殊要求，我们只要使用简写属性即可，<code>border</code> 属性就可以一次性的设置这三个内容,比如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>&#125;<br></code></pre></td></tr></table></figure>
<p>这里我们同时为 <code>h1</code> 元素的四个边框进行设置，宽度是:1px，样式是:solid,边框颜色是黑色:#000。</p>
<h1 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h1><h2 id="margin-属性"><a href="#margin-属性" class="headerlink" title="margin 属性"></a>margin 属性</h2><p>外边距指的是围绕在元素边框的空白区域。设置外边距会在元素外创建额外的“空白”。<br>设置外边距的最简单的方法就是使用 <code>margin</code> 属性，这个属性接受任何长度单位、百分数值甚至负值。<br>margin 属性接受任何长度单位，可以是像素、英寸、毫米或 em。<br>例如,下面即为 <code>h1</code> 的各个边上设置为 1 个英寸的空白：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">1in</span>;&#125;<br></code></pre></td></tr></table></figure>
<p>下面的这个例子为 <code>h1</code> 的四个边分别设置不同的外边距：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">3px</span> <span class="hljs-number">4px</span>;&#125;<br></code></pre></td></tr></table></figure>
<p>和内边距以及边框的设置一样，遵循顺时针的顺序：上、右、下、左。</p>
<p>同理，除了 <code>margin</code> 属性外，我们还可以分别为四个方向的边框，分别是下面四个属性：<br><code>margin-top</code> 、 <code>margin-right</code> 、<code>margin-bottom</code> 、<code>margin-left</code>。<br>例如下面的一个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">30px</span>;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>
<p>就等价于下面的声明：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span> &#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span> <span class="hljs-number">30px</span> <span class="hljs-number">30px</span> <span class="hljs-number">20px</span>&#125;<br></code></pre></td></tr></table></figure>
<p>显然这种情况下使用简写属性更加简单一点。<br>当然，除了我们可以给 <code>margin</code> 四个值外，我们还可以使用 <code>值复制</code> 方法给 2 个或者 3 个值，下面详细讲解值复制。</p>
<h2 id="值复制"><a href="#值复制" class="headerlink" title="值复制"></a>值复制</h2><ul>
<li>使用正常的四个值，依次是上、右、下、左：<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">margin</span>: <span class="hljs-number">1px</span> <span class="hljs-number">10px</span> <span class="hljs-number">1px</span> <span class="hljs-number">10px</span>;&#125;<br></code></pre></td></tr></table></figure></li>
<li>使用三个值，三个值依次代表的是：上、左右、下：<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">h1 &#123;1px 5px 3px;&#125; //等价于 h1 &#123;1px 5px 3px 5px;&#125;<br></code></pre></td></tr></table></figure></li>
<li>使用两个值，则这两个值依次代表的是：上下、左右：<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs css">h1 &#123;margin:1px 10px;&#125; //等价于 h1 &#123;1px 10px 10px 1px;&#125;<br></code></pre></td></tr></table></figure>
<div class="note warning">
            <p>注释: <code>margin</code> 可以指定负值，其意义也很好理解。</p><p><code>margin</code> 值还可以为 <code>auto</code>给水平方负值，如果只给一边设置 <code>auto</code>，则是在浏览器中显示为最大值，比如是 <code>margin-left</code> 和 <code>margin-right</code>;特别的 <code>margin: 0 auto</code> 表示元素在父元素水平居中。</p>
          </div>

</li>
</ul>
<h2 id="外边距合并问题"><a href="#外边距合并问题" class="headerlink" title="外边距合并问题"></a>外边距合并问题</h2><p>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。</p>
<p>合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Box-Model/margin-collpase.gif" alt=""></p>
<p>特别需要注意的是即使是一个元素包含在父元素之内，也会发生外边距重叠的问题(这是一个非常隐蔽的问题，解决的方法也比较多),请看下图：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Box-Model/margin_collapse2.gif" alt=""></p>
<p>解决这一问题的方法也很简单，只需要让子元素和父元素的外边距不相邻即可：<br>例如我们可以在子元素和父元素之间加上某一个元素隔开即可。</p>
<h1 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h1><p>盒子模型是 <code>css</code> 最重要的概念，在写 <code>css</code> 样式的时候，要做到心中有丘壑。我们这里主要讲了盒子最重要的三个概念：</p>
<ol>
<li><p>内边距( <code>padding</code> 属性 ):<br>分别为四个边设置内边距：<code>padding-top</code> 、<code>padding-right</code> 、<code>padding-bottom</code> 、<code>padding-left</code>;</p>
</li>
<li><p>边框( <code>border</code> 属性 ):<br>分别设置四个边的边框：<code>border-top</code> 、<code>border-right</code> 、<code>border-bottom</code> 、<code>border-left</code>。其中每一个边又具有三个属性<code>border-width</code> 、 <code>border-style</code> 、 <code>border-color</code>;</p>
</li>
<li><p>外边距( <code>margin</code> 属性):<br>分别设置四个边的外边距：<code>margin-top</code> 、 <code>margin-right</code> 、<code>margin-bottom</code> 、<code>margin-left</code>。</p>
</li>
<li><p>简写属性：<br>除了为每一个方向设置内边距、边框以及外边距，如无特别的需求，我们可以同时为四个边同时设置上述三个属性，分别是：<code>padding</code> 、<code>border</code>和 <code>margin</code></p>
</li>
</ol>
<hr>
<p>参考：</p>
<p>[1] <a href="http://W3School.com.cn" target="_blank" rel="noopener">W3School CSS教程</a></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>软件推荐</title>
    <url>/2020/02/06/%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<center>这里给大家推荐一些好用的，可以提高工作效率的软件。本文持续更新...</center>

<a id="more"></a>

<h1 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h1><table>
<thead>
<tr>
<th align="center">软件</th>
<th align="center">下载官网地址</th>
<th align="center">推荐理由</th>
</tr>
</thead>
<tbody><tr>
<td align="center">geek</td>
<td align="center"><a href="https://geekuninstaller.com/" target="_blank" rel="noopener">https://geekuninstaller.com/</a></td>
<td align="center">软件卸载工具，小型轻量，卸载干净，无残留</td>
</tr>
<tr>
<td align="center">Everything</td>
<td align="center"><a href="https://www.voidtools.com/zh-cn/" target="_blank" rel="noopener">https://www.voidtools.com/zh-cn/</a></td>
<td align="center">快速进行本地搜索,查找本地文件</td>
</tr>
<tr>
<td align="center">Wox</td>
<td align="center"><a href="http://www.wox.one/" target="_blank" rel="noopener">http://www.wox.one/</a></td>
<td align="center">快捷启动工具，和<code>Mac</code> 下的 <code>Alfred</code> 相似</td>
</tr>
<tr>
<td align="center">Honyview</td>
<td align="center"><a href="https://cn.bandisoft.com/honeyview/" target="_blank" rel="noopener">https://cn.bandisoft.com/honeyview/</a></td>
<td align="center">强大的快速的图片查看器，几乎支持任何格式的图像</td>
</tr>
<tr>
<td align="center">PotPlayer</td>
<td align="center"><a href="https://potplayer.daum.net/" target="_blank" rel="noopener">https://potplayer.daum.net/</a></td>
<td align="center">视频播放器，几乎支持任何形式的视频格式</td>
</tr>
<tr>
<td align="center">幕布</td>
<td align="center"><a href="https://mubu.com/" target="_blank" rel="noopener">https://mubu.com/</a></td>
<td align="center">一键生成思维导图</td>
</tr>
<tr>
<td align="center">Listen 1</td>
<td align="center"><a href="https://listen1.github.io/listen1/" target="_blank" rel="noopener">https://listen1.github.io/listen1/</a></td>
<td align="center">音乐播放器，搜索和播放来自网易云音乐，虾米，QQ音乐，酷狗音乐，酷我音乐网站的歌曲</td>
</tr>
<tr>
<td align="center">Bandzip</td>
<td align="center"><a href="https://cn.bandisoft.com/bandizip/" target="_blank" rel="noopener">https://cn.bandisoft.com/bandizip/</a></td>
<td align="center">解压缩软件，无广告，简洁</td>
</tr>
<tr>
<td align="center">7-Zip</td>
<td align="center"><a href="https://www.7-zip.org/" target="_blank" rel="noopener">https://www.7-zip.org/</a></td>
<td align="center">另外一款压缩软件</td>
</tr>
<tr>
<td align="center">火萤</td>
<td align="center"><a href="https://www.huoying666.com/" target="_blank" rel="noopener">https://www.huoying666.com/</a></td>
<td align="center">动态桌面壁纸软件，如果喜欢动态桌面的话可以下载</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>软件</category>
      </categories>
      <tags>
        <tag>SoftWare</tag>
      </tags>
  </entry>
  <entry>
    <title>没有Google写代码都不香了</title>
    <url>/2020/02/05/Google/</url>
    <content><![CDATA[<p>最近科学上网出了些问题，虽然自己有备用的工具，保命还能使用 <code>Google</code> 相关服务。确实自己在使用了 <code>Chrome</code> 搜索之后，其他的搜索好像怎么都不香了，但由于 <code>Google</code> 服务对大陆地区进行了封锁，想要使用相关的服务可能还要梯子。科学上网的方法我们不谈，这里推荐一些自己正在使用而且非常好用的谷歌插件，第一个插件在不翻墙的情况下也可以让你舒服的使用 <code>Google</code> 服务</p>
<a id="more"></a>
<h1 id="谷歌访问助手破解版-必备插件"><a href="#谷歌访问助手破解版-必备插件" class="headerlink" title="谷歌访问助手破解版 - 必备插件"></a>谷歌访问助手破解版 - 必备插件</h1><p>首先 <code>Chrome</code> 的下载安装就不多说了，下载完成之后一般是无法使用的，会跳出网络错误等等：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/noService.jpg" alt=""></p>
<p>其实就是对大陆地区封锁了，这个时候就需要代理服务器。可以自己购买 <code>科学上网</code> 的工具，做到一劳永逸。如果你只是想使用 <code>Google</code> 周边服务的话，这里推荐 <code>谷歌访问助手</code> 插件，由于所有的插件都要到 <code>Google</code> 应用商店下载，但是现在你是无法进入到谷歌商店的，所以我们只有先百度下载了：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/google_helper_access.jpg" alt=""></p>
<p>如上图所示，随便进入一个链接就可以但是小心一些流氓捆绑，为了不必要的麻烦，我通过百度网盘分享一下: <a href="https://pan.baidu.com/s/1igGIEZlAZWVtaWuG0XVXwQ" target="_blank" rel="noopener">谷歌访问助手2.3.0破解版</a>，大家可以放心下载，下载之后需要解压。</p>
<p>然后我们打开 <code>Chrome</code> 浏览器，在搜索框中输入 <code>chrome://extensions/</code>, 就进入到了扩展页面，也可以通过点击右上角的 <code>自定义以及控制Google Chrome</code> - <code>更多工具</code> - <code>扩展程序</code>打开扩展页面：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/extensions.jpg" alt=""></p>
<p>然后打开 <code>开发者模式</code>,点击 <code>加载已解压的扩展程序</code> :</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/developerMode.jpg" alt=""><br>添加刚才已经解压过的下载文件： <code>google_access_helper</code> 文件夹，就添加成功了：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/installSuccess.jpg" alt=""></p>
<p>然后在扩展程序以及右上角菜单中可看到已经安装成功并在启动中：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/success.jpg" alt=""></p>
<p>现在我们就可以使用 <code>Chrome</code> 搜索了：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/newCancer.jpg" alt=""></p>
<p>可以看到我们完全可以使用 <code>Google</code> 搜索</p>
<div class="note danger">
            <p>值得注意的是，这款插件只能用来访问谷歌搜索以及谷歌其他相关服务，比如有 <code>GMail</code>、<code>谷歌应用商店</code>等，但是还不能访问 <code>Youtobe</code> 等其他的国外服务，如需使用，需要自行进行科学上网( ‘番习习墙’ )</p>
          </div>

<h1 id="AdBlock-最好的广告拦截工具"><a href="#AdBlock-最好的广告拦截工具" class="headerlink" title="AdBlock -最好的广告拦截工具"></a>AdBlock -最好的广告拦截工具</h1><p>我们在使用浏览器的时候，总是不可避免的会有一些非常烦人的弹窗广告，这里我推荐一款效果极佳的广告拦截插件 ： <code>AdBlock</code>。</p>
<p>在 <code>谷歌应用商店</code> 搜索 <code>AdBlock</code>,然后点击 <code>添加至Chrome</code> ,浏览器就会自动下载并安装该插件，如下所示：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/AdBlock.jpg" alt=""></p>
<p>在菜单处就可以看到 <code>AdBlock</code> 的图标：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/adblockicon.jpg" alt=""></p>
<div class="note info">
            <p>注: 你可能在其他的地方看到别人推荐 <code>AdBlock Plus</code>,其实这两款插件基本上没有区别，安装一个就行。</p>
          </div>

<h1 id="沙拉查词-专业的划词翻译扩展"><a href="#沙拉查词-专业的划词翻译扩展" class="headerlink" title="沙拉查词 - 专业的划词翻译扩展"></a>沙拉查词 - 专业的划词翻译扩展</h1><p>沙拉查词是一款专业的划词翻译的插件，顾名思义，鼠标划词就可以对所划单词或者句子进行翻译；沙拉查词就是一款非常好用的划词翻译插件，它提供几种不同的翻译词典: <code>有道翻译</code> 、<code>有道词典</code> 以及 <code>谷歌翻译</code> 翻译结果，这对看文献等工作可谓是一个大的福利。<br>在 <code>谷歌应用商店</code> 中搜索 <code>沙拉查词</code>进行安装 :</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/%E6%B2%99%E6%8B%89%E6%9F%A5%E8%AF%8D.jpg" alt=""></p>
<p>安装完成后，用鼠标选中想要翻译的地方，点击旁边的草莓，就显示翻译结果：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/result.jpg" alt=""></p>
<div class="note info">
            <p>注: <code>Google翻译</code> 也是非常好的一款插件，其实功能都差不多，<code>Google</code> 翻译可以翻译整个网页，这可能是一个很大的优势吧，各位可以自己去尝试，大家量体裁衣即可。</p>
          </div>

<h1 id="OneTab-一键管理你打开的标签页"><a href="#OneTab-一键管理你打开的标签页" class="headerlink" title="OneTab - 一键管理你打开的标签页"></a>OneTab - 一键管理你打开的标签页</h1><p>我们在使用浏览器的时候可能不知不觉的就打开了很多的标签页，导致内存升高，而且来回切换页面不方便，这时 <code>OneTab</code> 就解决了这一困扰。</p>
<p>首先安装 <code>OneTab</code> 扩展，安装的方法都是在 <code>Google应用商店</code>，这里就不赘述了，直接搜索 <code>OneTab</code> 安装就好。<br>安装完成后，比如现在我们打开很多的标签页：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/taobao.jpg" alt=""></p>
<p>然后我们点击在菜单栏的 <code>onetab</code> 按钮，就可以把所有的标签合为一个标签页，从而大大的减少了内存：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/onetab.jpg" alt=""></p>
<h1 id="谷歌学术搜索按钮-一键访问谷歌学术"><a href="#谷歌学术搜索按钮-一键访问谷歌学术" class="headerlink" title="谷歌学术搜索按钮 - 一键访问谷歌学术"></a>谷歌学术搜索按钮 - 一键访问谷歌学术</h1><p>谷歌学术搜索按钮就是一个快捷的谷歌学术搜索，点击就可以进入到搜索页面：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/google%20scholar.jpg" alt=""></p>
<p>进入谷歌商店下载，搜索 <code>谷歌学术搜索按钮</code> 即可。</p>
<p>在需要使用 <code>谷歌学术</code> 的时候点击此插件的图标就可以访问 <code>Google Scholar</code>:</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/machine_learing.jpg" alt=""></p>
<div class="note danger">
            <p>注意：谷歌学术需要翻墙，所以在没有梯子的情况下该插件无法使用！</p>
          </div>
<h1 id="右键搜-扩展右键功能"><a href="#右键搜-扩展右键功能" class="headerlink" title="右键搜 - 扩展右键功能"></a>右键搜 - 扩展右键功能</h1><p>按照官方给出的功能说明：</p>
<div class="note default">
            <p>扩展右键菜单，超过300种功能，方便的选择、组合或自定义页面、划词、图片菜单，并有生成、解析二维码和短网址功能。设置可使用云存储。最新增加功能共享、资源下载、重命名等功能。右键搜伴侣增加超级拖拽。</p>
          </div>
<p>确实，这个 <code>右键搜</code> 的功能很强大，号称是集成了300多种功能，简直就是一个黑科技啊，但是吸引我的地方主要是以下几个功能：</p>
<ul>
<li><p>以图找图<br>有时候我们看到一张有内涵、有意思的图片想要找相似的图，这个时候就可以用到这个扩展，其实就是 <code>Google 图片</code>;</p>
</li>
<li><p>右键生成二维码<br>现在扫码似乎是一件很 <code>fashion</code> 的事情，而使用这个插件可以很方便的将任何图片和文字生成二维码;</p>
</li>
<li><p>图片生成端网址<br>将鼠标移动到图片上方并点击鼠标右键，<code>右键搜</code> - <code>创建图片短网址并复制</code>，这时我们就可以将连接分享给他人。  </p>
<div class="note danger">
            <p>注：你要保证要分享的小伙伴有权访问文件，比如你是分享 <code>Google Chrome</code> 上的一张图片,你要保证你的小伙伴可以访问谷歌服务。</p>
          </div>

</li>
</ul>
<h1 id="一键管理扩展-菜单不再繁"><a href="#一键管理扩展-菜单不再繁" class="headerlink" title="一键管理扩展 - 菜单不再繁"></a>一键管理扩展 - 菜单不再繁</h1><p>在上面我们安装了很多的插件，当然，除了以上这些，你可能还会安装一些更多的扩展，所以就显得很乱，而 <code>一键管理扩展</code> 就是一个很方便的插件，可以很方便的控制所有插件的 <code>开启</code>、<code>禁用</code>、<code>卸载</code>。</p>
<p>同样是在谷歌应用商店中搜索 <code>一键管理扩展</code> 安装即可。<br>然后我们点击图标就可以对所有的扩展进行管理：鼠标左键控制 <code>启用</code> 或者<code>禁用</code>,右键 <code>卸载</code> :</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Google/%E4%B8%80%E9%94%AE.jpg" alt=""></p>
<p>目前，我自己觉得有必要，且可以提高生产效率的插件就是这么多，当然，也许你有更好的推荐，欢迎交流，共同进步！</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之主题美化篇2</title>
    <url>/2020/01/28/hexo%E4%B9%8B%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96%E7%AF%87/</url>
    <content><![CDATA[<p>上一篇博客介绍 <code>next</code> 主题配置文件 <code>_config.yml</code>的各部分的大致内容，现在我们来对每一部分的详细配置做出说明，完成这些配置你的博客基本上就像样了。</p>
<a id="more"></a>
<h1 id="侧边栏部分"><a href="#侧边栏部分" class="headerlink" title="侧边栏部分"></a>侧边栏部分</h1><p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/sidebar.jpg" alt=""></p>
<h2 id="更换个人头像"><a href="#更换个人头像" class="headerlink" title="更换个人头像"></a>更换个人头像</h2><p>在主题篇配置文件 <code>_config.yml</code> 中找到侧边栏设置部分 <code>Sidebar Settings</code>部分，可以看到如下所示设置头像部分内容( <code>avatar</code> )：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/profile.jpg" alt=""><br><code>url</code> : 就是你自己的头像链接，将图片放置在 <code>source</code> –&gt; <code>images</code> 目录下;<br><code>rounded</code> : 头像是否设置为圆形；<br><code>rotated</code> : 当鼠标放置头像上时，头像是否旋转；</p>
<h2 id="设置昵称"><a href="#设置昵称" class="headerlink" title="设置昵称"></a>设置昵称</h2><p>昵称的设置是在站点配置文件中的 <code>Site</code> 部分，在这一部分不仅可以设置昵称(作者名) ,还可以设置站点标题，副标题，自己的关键词以及站点语言等等，虽然 <code>next</code> 主题不支持副标题，对自己的描述等个性化设置，但写上也没有关系，我的设置部分如下所示：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/site.jpg" alt=""></p>
<p><code>title</code> : 网站的标题；<br><code>subtitle</code> : 网站的副标题，<code>next</code> 不支持；<br><code>description</code> : 自己描述，相当于座右铭之类的，<code>next</code> 不支持；<br><code>keywords</code> : 自己的关键词，<code>next</code> 不支持；<br><code>author</code> : 作者名，也就是昵称；<br><code>language</code> : 语言设置，设置为中文 <code>zh-CN</code>；<br><code>timezone</code> : 时区设置，不用填写。</p>
<h2 id="social-link"><a href="#social-link" class="headerlink" title="social link"></a><code>social link</code></h2><p>社会链接支持添加自己的 <code>github</code>、<code>E-Mail</code> <code>weibo</code> 等等，同样也是在侧边栏设置部分 <code>Sidebar Settings</code>部分：需要添加哪一个直接加上自己的账号即可：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/sociallink.jpg" alt=""></p>
<h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p>如图所示为我自己设置部分，由于本站刚刚开始，还没有添加添加朋友的链接，所以我就把自己的掘金还有CSDN账户挂上去了：<br><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/Blog%20rolls.jpg" alt=""><br>到此整个侧边栏的部分就完成了，应该可以得到不错的效果。</p>
<h1 id="菜单栏部分"><a href="#菜单栏部分" class="headerlink" title="菜单栏部分"></a>菜单栏部分</h1><p><code>next</code> 初始默认菜单很少，为了丰富内容，提升更好的读者效果，我们还需要自己增加一些界面，从而丰富我们的博客,比如添加分类、标签、<code>about</code>、站内搜索等等功能：<br><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/menu.jpg" alt=""></p>
<h2 id="分类、标签、日程界面"><a href="#分类、标签、日程界面" class="headerlink" title="分类、标签、日程界面"></a>分类、标签、日程界面</h2><p>在主题配置文件中找到 <code>Menu Settings</code> 部分，然后将 <code>categories</code>, <code>tags</code>、<code>schedule</code> 前面的注释去掉，如下所示：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/categories.jpg" alt=""></p>
<p>只去掉注释还不行，因为在 <code>next</code> 主题中并没有为我们默认生成的这三个界面(<code>pages</code>)，需要我们手动生成：</p>
<p>在 <code>Git bash</code> 或者是 <code>Mac</code> 终端中进行操作:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo new page categories tags schedule</span><br></code></pre></td></tr></table></figure>
<p>这个时候查看 <code>source</code> 文件夹就可以看到生成这几个页面，其他的就不用设置，在我们使用命令 <code>hexo generate</code> 生成的时候 <code>hexo</code> 会自动的为我们生成这些界面的东西。</p>
<h2 id="about-页面"><a href="#about-页面" class="headerlink" title="about 页面"></a><code>about</code> 页面</h2><p><code>about</code> 页面就是 <code>关于我</code> 的意思，是对自己情况的介绍等等内容，除了要生成 <code>about</code> 界面外，自己还要编辑，创建自己的简介；</p>
<p>首先要生成 <code>about</code> 页面，页面的生成方法和上面的一样：</p>
<ul>
<li>取消 <code>about</code> 的注释；<br><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/about.jpg" alt=""></li>
<li>使用命令 <code>hexo new page about</code> 生成 <code>about</code> 界面；</li>
</ul>
<p>这个时候就已经生成了 <code>about</code> 界面，在 <code>source</code> 文件夹下可以看到一个 <code>about</code> 文件夹，打开文件夹我们编辑 <code>index.md</code>这个文件，支持<code>markdown</code> 格式，编辑自己信息即可，如图所示为我自己的内容：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/introduction.jpg" alt=""><br>最终的效果如下：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/introduction2.jpg" alt=""></p>
<h2 id="爬取豆瓣账号数据"><a href="#爬取豆瓣账号数据" class="headerlink" title="爬取豆瓣账号数据"></a>爬取豆瓣账号数据</h2><p>我们可以爬取自己的豆瓣账号数据从而可以分享你的书籍和电影<br>具体的使用方法如下：</p>
<ol>
<li><p>由于 <code>hexo</code> 没有集成豆瓣功能，所以需要我们下载第三方插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cnpm install hexo-douban --save //我们之前在环境搭建的过程中介绍过cnpm镜像源，没有安装的使用npm(速度可能比较慢)</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>配置，在站点配置文件(注：不是主题配置文件)最后，加入以下代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">douban: <br>user: 204836163<br>builtin: false<br>book:<br>  title: '读书'<br>  quote: ''<br>movie:<br>  title: '我的电影'<br>  quote: ''<br><span class="hljs-meta">#</span><span class="bash"> game:</span><br><span class="hljs-meta"> #</span><span class="bash"> title: <span class="hljs-string">'游戏'</span></span><br><span class="hljs-meta"> #</span><span class="bash"> quote: <span class="hljs-string">''</span></span><br>timeout: 10000<br></code></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><code>user</code> : 你的豆瓣ID.打开豆瓣，登入账户，然后在右上角点击 “个人主页” ，这时候地址栏的URL大概是这样：”” ，其中的”xxxxxx”就是你的个人ID了;</li>
<li><code>builtin</code> : 是否将生成页面的功能嵌入 <code>hexo s</code> 和 <code>hexo g</code> 中，默认是 <code>false</code>;</li>
<li><code>title</code> : 该页面的标题;</li>
<li><code>quote</code> : 写在页面开头的一段话,支持 <code>html</code> 语法;</li>
<li><code>timeout</code> : 爬取数据的超时时间，默认是 <code>10000ms</code> 。</li>
</ul>
<ol start="3">
<li>主题配置文件进行添加菜单栏：<br>找到菜单栏选项，然后添加以下两行配置：</li>
</ol>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/book.jpg" alt=""></p>
<ol start="4">
<li>使用：<br>我们在上述完成之后，需要执行命令 <code>hexo douban</code> 来爬取自己的豆瓣账号数据 (前提是自己在第二步关联了自己的账户)，然后再使用命令 <code>hexo g -d</code> 生成部署博客，然后就可以在自己的博客看到如下界面：</li>
</ol>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/books.jpg" alt=""></p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/movies.jpg" alt=""></p>
<h2 id="添加站内搜索功能"><a href="#添加站内搜索功能" class="headerlink" title="添加站内搜索功能"></a>添加站内搜索功能</h2><p>在前面的一篇博客简要介绍了在 <code>next</code> 主题配置文件中 <code>_config.yml</code> 中支持站内搜索服务:<br>设置的方法如下：</p>
<ul>
<li><p>首先安装依赖：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cnpm install hexo-generator-searchdb</span><br></code></pre></td></tr></table></figure></li>
<li><p>站点配置文件的配置 (在该文件的末尾加上以下代码)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">search:<br>  path: search.xml<br>  field: post<br>  format: html<br>  limit: 10000<br></code></pre></td></tr></table></figure>
</li>
<li><p>主题配置文件的配置 (按照如图所示配置即可)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Local Search</span><br><span class="hljs-meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br>local_search:<br>  enable: true<br><span class="hljs-meta">  #</span><span class="bash"> If auto, trigger search by changing input.</span><br><span class="hljs-meta">  #</span><span class="bash"> If manual, trigger search by pressing enter key or search button.</span><br>  trigger: auto<br><span class="hljs-meta">  #</span><span class="bash"> Show top n results per article, show all results by setting to -1</span><br>  top_n_per_article: 1<br><span class="hljs-meta">  #</span><span class="bash"> Unescape html strings to the readable one.</span><br>  unescape: false<br><span class="hljs-meta">  #</span><span class="bash"> Preload the search data when the page loads.</span><br>  preload: true<br><span class="hljs-meta"><br>#</span><span class="bash"> Swiftype Search API Key</span><br>swiftype_key:<br></code></pre></td></tr></table></figure>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/local_search.jpg" alt=""></p>
<p>然后我们就可以在菜单栏看到一个搜索按钮，点击就额可以进行对你的博客内容进行搜索：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/search.jpg" alt=""></p>
<p>至此，整个菜单栏就部署完毕！</p>
</li>
</ul>
<h1 id="文章部分设置"><a href="#文章部分设置" class="headerlink" title="文章部分设置"></a>文章部分设置</h1><p>除了 <code>next</code> 主题一些默认的功能外，我们可能会添加一些功能来丰富和扩展我们的博客，包括：修改标签样式、文章打赏、文章版权、文章评论、统计功能等。</p>
<h2 id="修改标签样式："><a href="#修改标签样式：" class="headerlink" title="修改标签样式："></a>修改标签样式：</h2><p>在主题配置文件 <code>_config.yml</code> 文件下找到 <code>tag_icon</code>,修改为 <code>true</code>，即可以修改文章底部默认的 <code>#</code> 标签字符：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/tag_icon.jpg" alt=""></p>
<h2 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h2><p>最后的效果如下所示：<br><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/reward2.jpg" alt=""></p>
<p>找到主题配置文件 <code>_config.yml</code> 中的 <code>Reward(donate)</code> 部分，将其设置为如下所示：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/reward.jpg" alt=""></p>
<ul>
<li><code>enable</code> : 使能文章打赏功能；</li>
<li><code>animation</code> : 是否为动画，<code>false</code> 即可；</li>
<li><code>comment</code> : 在打赏按钮之上的评论,随便写，但是为了好看，一至两句话即可；</li>
<li><code>reward</code> 部分：</li>
</ul>
<p>此处是添加自己的收款码，对于我们一般只要微信 和 支付宝就可以了，所以我们首先要把自己的收款码放在 <code>D:\Blog\themes\next\source\images</code>目录下，然后添加上链接即可：</p>
<ul>
<li><code>wechatpay</code> : 微信支付；</li>
<li><code>alipay</code> : 支付宝支付；</li>
</ul>
<h2 id="文章评论"><a href="#文章评论" class="headerlink" title="文章评论"></a>文章评论</h2><p> <code>next</code> 主题提供了很多的评论插件的接口，所以我们只需要下载本地依赖既可以使用，但是有一个需要注意的是，很多的插件都是国外的，在国内无法获取服务，所以建议大家使用国内的插件，比如有 <code>Valine</code> 和 <code>Changyan</code>,这里我使用的是 <code>Valine</code>，简单容易上手，最终的效果就是如下所示：<br> <img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/valine2.jpg" alt=""></p>
<p> 配置过程如下：</p>
<ol>
<li>首先在 <code>valine</code> 上注册一个帐户或登录到LeanCloud，然后单击左下角在仪表板中创建应用程序：<br><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/valine-1.png" alt=""></li>
</ol>
<ol start="2">
<li><p>进入你刚刚创建的应用程序，选择设置-&gt;应用键在左下角，你会看到你的应用ID和应用键:<br><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/valine-2.png" alt=""></p>
</li>
<li><p>将值 <code>enable</code> 设置为 <code>true</code>，添加获得的 <code>APP ID（appid）</code>和<code>APP Key（appkey）</code>，然后在主题配置文件的<code>valine</code>部分中编辑其他配置，如下所示：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/valine.jpg" alt=""></p>
</li>
</ol>
<h2 id="文章版权设置"><a href="#文章版权设置" class="headerlink" title="文章版权设置"></a>文章版权设置</h2><p><code>next</code> 主题内部集成了版权功能代码，只要设置版权部分为 <code>true</code> 即可，在主题配置文件 <code>_config.yml</code> 文件中找到如下部分：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/post_copyright.jpg" alt=""></p>
<p>建议在 <code>post</code> (文章内部)添加版权说明: 将 <code>post</code> 设置为 <code>true</code> 即可。</p>
<h2 id="卜算子统计"><a href="#卜算子统计" class="headerlink" title="卜算子统计"></a>卜算子统计</h2><p><code>next</code> 主题新版本已经为我们提供了卜算子接口，用于统计站点的访问人数和总访问量，效果如下所示：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/footer.jpg" alt=""></p>
<p>由于已经提供了接口，所以配置就很方便，具体的配置就变得很简单，只需要修改 <code>busuanzi</code> 部分：</p>
<p><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/busuanzi.jpg" alt=""></p>
<p><code>enable</code> : 是否启用卜算子；<br><code>total_visitors</code> : 是否显示总浏览人数；<br><code>total_visitors_icon</code> : 总浏览人数前的图标，默认是 <code>user</code>；<br><code>total_views</code> ： 是否显示网站总访问量；<br><code>total_views_icon</code> : 总访问量前的图标，默认是 <code>eye</code>;<br><code>post_views</code> : 是否显示某一篇文章的总浏览量；<br><code>post_views_icon</code> : 文章浏览量前的图标，默认也是 <code>eye</code>。</p>
<h2 id="在线聊天功能"><a href="#在线聊天功能" class="headerlink" title="在线聊天功能"></a>在线聊天功能</h2><p>这个功能虽然没什么用，但是对于喜欢学习的小伙伴们也可以尝试一下(我并没有使用这一功能)。<br>首先要明确的是：新版 <code>next</code> 主题已经内部提供了对于 <code>Chatra</code> 和 <code>Tidio</code> 两个插件的接口，所以我们在使用的时候只要注册账号，然后使用功能即可，下面我们以 <code>Chatra</code> 为例：</p>
<ul>
<li><p>首先登陆 <a href="https://chatra.io/cn/" target="_blank" rel="noopener">https://chatra.io/cn/</a> 官网注册账号，获取自己的 <code>ID</code> (注册使用的邮箱号);</p>
</li>
<li><p>然后将 <code>chatra</code> 部分的 <code>enable</code> 设置为 <code>true</code>：<br><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/chatra.jpg" alt=""></p>
</li>
<li><p>在侧边栏添加 <code>chat</code> 按钮：<br><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/chatButton.jpg" alt=""></p>
<ul>
<li>最后的效果如下所示：<br><img src="https://gitee.com/codercxf/Blog_image_hexo/raw/master/chat.jpg" alt=""></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之主题优化篇1</title>
    <url>/2020/01/27/hexo%E4%B9%8B%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%E7%AF%87/</url>
    <content><![CDATA[<div class="note danger">
            <h1 id="新年快乐！"><a href="#新年快乐！" class="headerlink" title="新年快乐！"></a>新年快乐！</h1>
          </div>
<a id="more"></a>
<p>这篇博客完成的时候已经是现在了，首先给大家拜个晚年，祝大家新年快乐！<br>好的还是不好的都已经过去了，希望大家不要为旧的忧伤浪费新的眼泪。</p>
<p>上一篇博客介绍了如何搭建 <code>hexo</code> 环境，最近放假在家有时间(而且为了安全更不能出门)可以更博，所以打算将环境优化篇内容完成，做一个简单的总结（是不是转的有点快^_^）!</p>
<p>主题优化最重要的一部分内容就是修改 <code>_config.yml</code> 文件，我们把它叫站点配置文件，在我们的 <code>themes</code> 目录下还有一个名称是 <code>_config.yml</code> 文件，我们把它叫做主题配置文件，注意进行区分。</p>
<h1 id="更换-next-主题"><a href="#更换-next-主题" class="headerlink" title="更换 next 主题"></a>更换 <code>next</code> 主题</h1><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>下载地址：<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">next最新版本地址</a></p>
<p>我们进入 <code>hexo</code> 的博客目录，然后将 <code>next</code> 仓库克隆至 <code>themes</code> 目录下：<br> <figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> Blog</span><br><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></code></pre></td></tr></table></figure></p>
<p> 这个时候就已经将 <code>next</code> 这一主题仓库克隆至 <code>themes</code> 文件夹的 <code>next</code> 目录内，直接打开文件夹也可以看到。</p>
<h2 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h2><p>我们打开站点配置文件 <code>_config.yml</code> (Blog目录下) ，找到 <code>theme</code>，修改为 <code>next</code> 即可:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">theme: next<br></code></pre></td></tr></table></figure>

<p>只需要修改这一处就可以更换主题，记住需要重启服务器主题才能生效。</p>
<h1 id="主题配置文件概览"><a href="#主题配置文件概览" class="headerlink" title="主题配置文件概览"></a>主题配置文件概览</h1><h2 id="缓冲及其他设置"><a href="#缓冲及其他设置" class="headerlink" title="缓冲及其他设置"></a>缓冲及其他设置</h2><p>想要优化主题，我们首先要熟悉的一个就是主题配置文件 <code>_config.yml</code> (不是站点配置文件)，下面就详细的介绍这个文件的内容 (其实我们通过文件各部分的英文说明都能明白各部分的作用，建议大家在配置之前还是先通读一遍)</p>
<p>首先是总体的设置，这一部分基本可以不用理会，默认就好</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> If <span class="hljs-literal">false</span>, merge configs from `_data/next.yml` into default configuration (rewrite).</span><br><span class="hljs-meta">#</span><span class="bash"> If <span class="hljs-literal">true</span>, will fully override default configuration by options from `_data/next.yml` (override). Only <span class="hljs-keyword">for</span> NexT settings.</span><br><span class="hljs-meta">#</span><span class="bash"> And <span class="hljs-keyword">if</span> <span class="hljs-literal">true</span>, all config from default NexT `_config.yml` must be copied into `next.yml`. Use <span class="hljs-keyword">if</span> you know what you are doing.</span><br><span class="hljs-meta">#</span><span class="bash"> Useful <span class="hljs-keyword">if</span> you want to comment some options from NexT `_config.yml` by `next.yml` without editing default config.</span><br>override: false # 默认 false 即可<br><span class="hljs-meta"><br>#</span><span class="bash"> Console reminder <span class="hljs-keyword">if</span> new version released.</span><br>reminder: false # 控制台是否提醒新版本的更新，false<br><span class="hljs-meta"><br>#</span><span class="bash"> Allow to cache content generation. Introduced <span class="hljs-keyword">in</span> NexT v6.0.0.</span><br>cache:<br>  enable: true # 允许缓存，true<br><span class="hljs-meta"><br>#</span><span class="bash"> Remove unnecessary files after hexo generate.</span><br>minify: false # 是否在 hexo 生成之后删除不必要的文件，false<br><span class="hljs-meta"><br>#</span><span class="bash"> Define custom file paths.</span><br><span class="hljs-meta">#</span><span class="bash"> Create your custom files <span class="hljs-keyword">in</span> site directory `<span class="hljs-built_in">source</span>/_data` and uncomment needed files below.</span><br>custom_file_path: # 常用的文件路径<br><span class="hljs-meta">  #</span><span class="bash">head: <span class="hljs-built_in">source</span>/_data/head.swig</span><br><span class="hljs-meta">  #</span><span class="bash">header: <span class="hljs-built_in">source</span>/_data/header.swig</span><br><span class="hljs-meta">  #</span><span class="bash">sidebar: <span class="hljs-built_in">source</span>/_data/sidebar.swig</span><br><span class="hljs-meta">  #</span><span class="bash">postMeta: <span class="hljs-built_in">source</span>/_data/post-meta.swig</span><br><span class="hljs-meta">  #</span><span class="bash">postBodyEnd: <span class="hljs-built_in">source</span>/_data/post-body-end.swig</span><br><span class="hljs-meta">  #</span><span class="bash">footer: <span class="hljs-built_in">source</span>/_data/footer.swig</span><br><span class="hljs-meta">  #</span><span class="bash">bodyEnd: <span class="hljs-built_in">source</span>/_data/body-end.swig</span><br><span class="hljs-meta">  #</span><span class="bash">variable: <span class="hljs-built_in">source</span>/_data/variables.styl</span><br><span class="hljs-meta">  #</span><span class="bash">mixin: <span class="hljs-built_in">source</span>/_data/mixins.styl</span><br><span class="hljs-meta">  #</span><span class="bash">style: <span class="hljs-built_in">source</span>/_data/styles.styl</span><br></code></pre></td></tr></table></figure>
<h2 id="站点基本信息配置"><a href="#站点基本信息配置" class="headerlink" title="站点基本信息配置"></a>站点基本信息配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 网站图标设置，不是个人头像，个人头像设置是在侧边栏设置部分 </span><br><span class="hljs-meta">#</span><span class="bash"> 设置分为不同的浏览器不同的设备以及不同的大小都可以分别进行设置，根据自己的喜好选择就行</span><br>favicon: <br>  small: /images/favicon-16x16-next.png<br>  medium: /images/favicon-32x32-next.png<br>  apple_touch_icon: /images/apple-touch-icon-next.png<br>  safari_pinned_tab: /images/logo.svg<br><span class="hljs-meta">  #</span><span class="bash">android_manifest: /images/manifest.json</span><br><span class="hljs-meta">  #</span><span class="bash">ms_browserconfig: /images/browserconfig.xml</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 网站的页脚设置部分</span><br>footer:<br><span class="hljs-meta">  #</span><span class="bash"> Specify the date when the site was setup. If not defined, current year will be used.</span><br><span class="hljs-meta">  #</span><span class="bash">since: 2015  <span class="hljs-comment"># 网站的建站时间，如果不写就是你自己建站的时间</span></span><br><span class="hljs-meta"><br>  #</span><span class="bash"> Icon between year and copyright info.</span><br>  icon: # 这里的icon是页脚建站时间和网站名字之间的图标，默认是 `user`图标<br>    # Icon name in Font Awesome. See: https://fontawesome.com/v4.7.0/icons/<br>    # `heart` is recommended with animation in red (#ff0000).<br>    name: user #图标名称<br>    # If you want to animate the icon, set it to true.<br>    animated: false # 是否是动画，默认<br>    # Change the color of icon, using Hex Code.<br>    color: "#808080" # 颜色，16进制<br><span class="hljs-meta"><br>  #</span><span class="bash"> If not defined, `author` from Hexo `_config.yml` will be used.</span><br>  copyright: # 文章版权设置部分<br><br>  powered:<br>    # Hexo link (Powered by Hexo).<br>    enable: true # 是否显示 hexo链接，如果不想显示设置为false即可<br>    # Version info of Hexo after Hexo link (vX.X.X).<br>    version: true # 是否显示版本号，如果不想显示设置为false即可<br><br>  theme: # 这一部分是设置在页脚是否显示主题提供商和版本号，false即可<br>    # Theme &amp; scheme info link (Theme - NexT.scheme).<br>    enable: true<br>    # Version info of NexT after scheme info (vX.X.X).<br>    version: true<br><span class="hljs-meta"><br>  #</span><span class="bash"> Beian ICP and gongan information <span class="hljs-keyword">for</span> Chinese users. See: http://www.beian.miit.gov.cn, http://www.beian.gov.cn</span><br>  beian: #这一部分设置网站备案，如果还没有备案就不需要填写<br>    enable: false<br>    icp:<br>    # The digit in the num of gongan beian.<br>    gongan_id:<br>    # The full num of gongan beian.<br>    gongan_num:<br>    # The icon for gongan beian. See: http://www.beian.gov.cn/portal/download<br>    gongan_icon_url:<br><span class="hljs-meta"><br>#</span><span class="bash"> Creative Commons 4.0 International License.</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://creativecommons.org/share-your-work/licensing-types-examples</span><br><span class="hljs-meta">#</span><span class="bash"> Available values of license: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | zero</span><br><span class="hljs-meta">#</span><span class="bash"> You can <span class="hljs-built_in">set</span> a language value <span class="hljs-keyword">if</span> you prefer a translated version of CC license, e.g. deed.zh</span><br><span class="hljs-meta">#</span><span class="bash"> CC licenses are available <span class="hljs-keyword">in</span> 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span><br>creative_commons: # 文章版权说明，这一部分比较重要，也是值得说明的一部分<br>  license: by-nc-sa # 版权说明<br>  sidebar: false # 侧边栏就不需要版权了，false<br>  post: false # 文章需要搬去哪说明，修改为true<br>  language: # 语言可以不用设置，因为在站点配置文件中已经设置好了<br></code></pre></td></tr></table></figure>
<h2 id="选择框架"><a href="#选择框架" class="headerlink" title="选择框架"></a>选择框架</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 根据自己的喜好选择框架，可以挨个尝试，但我自己还是更喜欢这个默认框架 `Muse`</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Scheme Settings</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Schemes</span><br>scheme: Muse<br><span class="hljs-meta">#</span><span class="bash">scheme: Mist</span><br><span class="hljs-meta">#</span><span class="bash">scheme: Pisces</span><br><span class="hljs-meta">#</span><span class="bash">scheme: Gemini</span><br></code></pre></td></tr></table></figure>

<h2 id="菜单栏设置"><a href="#菜单栏设置" class="headerlink" title="菜单栏设置"></a>菜单栏设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Menu Settings</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Usage: `Key: /link/ || icon`</span><br><span class="hljs-meta">#</span><span class="bash"> Key is the name of menu item. If the translation <span class="hljs-keyword">for</span> this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is <span class="hljs-keyword">case</span>-senstive.</span><br><span class="hljs-meta">#</span><span class="bash"> Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span><br><span class="hljs-meta">#</span><span class="bash"> When running the site <span class="hljs-keyword">in</span> a subdirectory (e.g. yoursite.com/blog), remove the leading slash from link value (/archives -&gt; archives).</span><br><span class="hljs-meta">#</span><span class="bash"> External url should start with http:// or https://</span><br>menu: # 选择自己需要显示的菜单，其他不需要的注释即可<br>  home: / || home # 主页<br><span class="hljs-meta">  #</span><span class="bash">about: /about/ || user <span class="hljs-comment"># 关于</span></span><br><span class="hljs-meta">  #</span><span class="bash">tags: /tags/ || tags <span class="hljs-comment"># 标签</span></span><br><span class="hljs-meta">  #</span><span class="bash">categories: /categories/ || th <span class="hljs-comment"># 分类</span></span><br>  archives: /archives/ || archive # 归档<br><span class="hljs-meta">  #</span><span class="bash">schedule: /schedule/ || calendar <span class="hljs-comment"># 日历</span></span><br><span class="hljs-meta">  #</span><span class="bash">sitemap: /sitemap.xml || sitemap </span><br><span class="hljs-meta">  #</span><span class="bash">commonweal: /404/ || heartbeat <span class="hljs-comment"># 404界面</span></span><br><span class="hljs-meta"><br>#</span><span class="bash"> Enable / Disable menu icons / item badges.</span><br>menu_settings: # 菜单栏设置<br>  icons: true # 是否显示图标<br>  badges: false<br></code></pre></td></tr></table></figure>
<blockquote>
<p>注:在使用的时候直接设置就好，但是并不会起作用，因为我们还要为菜单创建一个新的界面，例如使用命令 hexo new page about 创建 about 界面，然后点击about才会跳出。</p>
</blockquote>
<h2 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Sidebar Settings</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://theme-next.org/docs/theme-settings/sidebar</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><br>sidebar:<br><span class="hljs-meta">  #</span><span class="bash"> Sidebar Position.</span><br>  position: left # 侧边栏位置，默认在左侧<br><span class="hljs-meta">  #</span><span class="bash">position: right</span><br><span class="hljs-meta"><br>  #</span><span class="bash"> Manual define the sidebar width. If commented, will be default <span class="hljs-keyword">for</span>:</span><br><span class="hljs-meta">  #</span><span class="bash"> Muse | Mist: 320</span><br><span class="hljs-meta">  #</span><span class="bash"> Pisces | Gemini: 240</span><br><span class="hljs-meta">  #</span><span class="bash">width: 300 <span class="hljs-comment"># 定义侧边栏的宽度，一般默认300就挺好</span></span><br><span class="hljs-meta"><br>  #</span><span class="bash"> Sidebar Display (only <span class="hljs-keyword">for</span> Muse | Mist), available values:</span><br><span class="hljs-meta">  #</span><span class="bash">  - post    expand on posts automatically. Default.</span><br><span class="hljs-meta">  #</span><span class="bash">  - always  expand <span class="hljs-keyword">for</span> all pages automatically.</span><br><span class="hljs-meta">  #</span><span class="bash">  - hide    expand only when click on the sidebar toggle icon.</span><br><span class="hljs-meta">  #</span><span class="bash">  - remove  totally remove sidebar including sidebar toggle.</span><br>  display: post # post指的是默认的是在文章界面自动展开<br>                # always在所有的页面都默认展开<br>                # hide 是在所有的页面都默认隐藏<br>                # remove 完全移除侧边栏<br><span class="hljs-meta"><br>  #</span><span class="bash"> Sidebar padding <span class="hljs-keyword">in</span> pixels.</span><br>  padding: 18 # 侧边栏填充像素大小，可忽略<br><span class="hljs-meta">  #</span><span class="bash"> Sidebar offset from top menubar <span class="hljs-keyword">in</span> pixels (only <span class="hljs-keyword">for</span> Pisces | Gemini).</span><br>  offset: 12 # 侧边栏距离顶部菜单的距离(单位像素)<br><span class="hljs-meta">  #</span><span class="bash"> Enable sidebar on narrow view (only <span class="hljs-keyword">for</span> Muse | Mist).</span><br>  onmobile: false # 在移动设备是否显示菜单栏，仅仅针对 Muse 和 Mist主题有效<br><span class="hljs-meta"><br>#</span><span class="bash"> Sidebar Avatar</span><br>avatar: # 个人头像设置<br><span class="hljs-meta">  #</span><span class="bash"> Replace the default image and <span class="hljs-built_in">set</span> the url here.</span><br>  url: #/images/avatar.gif<br><span class="hljs-meta">  #</span><span class="bash"> If <span class="hljs-literal">true</span>, the avatar will be dispalyed <span class="hljs-keyword">in</span> circle.</span><br>  rounded: false # 是否是圆形显示<br><span class="hljs-meta">  #</span><span class="bash"> If <span class="hljs-literal">true</span>, the avatar will be rotated with the cursor.</span><br>  rotated: false # 鼠标放置头像上可以旋转<br><span class="hljs-meta"><br>#</span><span class="bash"> Posts / Categories / Tags <span class="hljs-keyword">in</span> sidebar.</span><br>site_state: true # 侧边栏头像下是否显示文章、分类和标签设置<br><span class="hljs-meta"><br>#</span><span class="bash"> Social Links</span><br><span class="hljs-meta">#</span><span class="bash"> Usage: `Key: permalink || icon`</span><br><span class="hljs-meta">#</span><span class="bash"> Key is the link label showing to end users.</span><br><span class="hljs-meta">#</span><span class="bash"> Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span><br>social: # 友情链接，直接添加自己的社会链接即可，||前面是地址，||后面是图标<br><span class="hljs-meta">  #</span><span class="bash">GitHub: https://github.com/yourname || github</span><br><span class="hljs-meta">  #</span><span class="bash">E-Mail: mailto:yourname@gmail.com || envelope</span><br><span class="hljs-meta">  #</span><span class="bash">Weibo: https://weibo.com/yourname || weibo</span><br><span class="hljs-meta">  #</span><span class="bash">Google: https://plus.google.com/yourname || google</span><br><span class="hljs-meta">  #</span><span class="bash">Twitter: https://twitter.com/yourname || twitter</span><br><span class="hljs-meta">  #</span><span class="bash">FB Page: https://www.facebook.com/yourname || facebook</span><br><span class="hljs-meta">  #</span><span class="bash">StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span><br><span class="hljs-meta">  #</span><span class="bash">YouTube: https://youtube.com/yourname || youtube</span><br><span class="hljs-meta">  #</span><span class="bash">Instagram: https://instagram.com/yourname || instagram</span><br><span class="hljs-meta">  #</span><span class="bash">Skype: skype:yourname?call|chat || skype</span><br><span class="hljs-meta">  #</span><span class="bash">RSS: /atom.xml || rss</span><br><br>social_icons: # 友链的图标，默认就好<br>  enable: true<br>  icons_only: false<br>  transition: false<br><span class="hljs-meta"><br>#</span><span class="bash"> Blog rolls</span><br>links_settings: # 友链的设置<br>  icon: link    # 图标link<br>  title: Links # 链接名称，可以修改为：友情链接<br><span class="hljs-meta">  #</span><span class="bash"> Available values: block | inline</span><br>  layout: block # 友链的布局: 块 或 行<br><br>links: # 上面是设置，这里是添加链接，title + 链接<br><span class="hljs-meta">  #</span><span class="bash">Title: http://yoursite.com</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Table of Contents <span class="hljs-keyword">in</span> the Sidebar</span><br><span class="hljs-meta">#</span><span class="bash"> Front-matter variable (unsupport wrap expand_all).</span><br>toc: # 文章标题设置，这一部分默认设置即可<br>  enable: true # 是否显示文章标题<br><span class="hljs-meta">  #</span><span class="bash"> Automatically add list number to toc.</span><br>  number: true # 标题是否自动编号<br><span class="hljs-meta">  #</span><span class="bash"> If <span class="hljs-literal">true</span>, all words will placed on next lines <span class="hljs-keyword">if</span> header width longer <span class="hljs-keyword">then</span> sidebar width.</span><br>  wrap: false # 如果题目过长，是否换行<br><span class="hljs-meta">  #</span><span class="bash"> If <span class="hljs-literal">true</span>, all level of TOC <span class="hljs-keyword">in</span> a post will be displayed, rather than the activated part of it.</span><br>  expand_all: false # 是否显示所有等级的标题<br><span class="hljs-meta">  #</span><span class="bash"> Maximum heading depth of generated toc.</span><br>  max_depth: 6 # 接受生成的标题的最大深度<br><span class="hljs-meta"><br>#</span><span class="bash"> A button to open designated chat widget <span class="hljs-keyword">in</span> sidebar.</span><br><span class="hljs-meta">#</span><span class="bash"> Firstly, you need <span class="hljs-built_in">enable</span> the chat service you want to activate its sidebar button.</span><br>chat: # 打开chat服务的按钮，首先你需要激活一个  chat 服务，这里可以不用设置，没有实用价值<br>  enable: false # 关闭在线聊天服务即可<br><span class="hljs-meta">  #</span><span class="bash">service: chatra</span><br><span class="hljs-meta">  #</span><span class="bash">service: tidio</span><br>  icon: comment # Icon name in Font Awesome, set false to disable icon.<br>  text: Chat # Button text, change it as you wish.<br></code></pre></td></tr></table></figure>

<h2 id="文章设置"><a href="#文章设置" class="headerlink" title="文章设置"></a>文章设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Post Settings</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://theme-next.org/docs/theme-settings/posts</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Automatically excerpt description <span class="hljs-keyword">in</span> homepage as preamble text.</span><br>excerpt_description: true # 在主页显示预览文本<br><span class="hljs-meta"><br>#</span><span class="bash"> Read more button</span><br><span class="hljs-meta">#</span><span class="bash"> If <span class="hljs-literal">true</span>, the <span class="hljs-built_in">read</span> more button will be displayed <span class="hljs-keyword">in</span> excerpt section.</span><br>read_more_btn: true # 是否显示 阅读更多 按钮<br><span class="hljs-meta"><br>#</span><span class="bash"> Post meta display settings</span><br>post_meta: # 文章显示设置，这里建议默认<br>  item_text: true # 是否显示文章内容<br>  created_at: true # 是否显示创建时间<br>  updated_at:      # 是否显示更新时间<br>    enable: true<br>    another_day: true<br>  categories: true # 是否显示分类<br><span class="hljs-meta"><br>#</span><span class="bash"> Post wordcount display settings</span><br><span class="hljs-meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/hexo-symbols-count-time</span><br>symbols_count_time: # 预计阅读时间和文章字数统计，需要安装插件，具体的设参考上面的链接，但我不建议设置(太繁琐)<br>  separated_meta: true<br>  item_text_post: true<br>  item_text_total: false<br>  awl: 4<br>  wpm: 275<br><span class="hljs-meta"><br>#</span><span class="bash"> Use icon instead of the symbol <span class="hljs-comment"># to indicate the tag at the bottom of the post</span></span><br>tag_icon: false # 文章底部默认的标签是 # 号，建议改为 true<br><span class="hljs-meta"><br>#</span><span class="bash"> Reward (Donate) <span class="hljs-comment"># 打赏设置</span></span><br><span class="hljs-meta">#</span><span class="bash"> Front-matter variable (unsupport animation).</span><br>reward_settings:<br><span class="hljs-meta">  #</span><span class="bash"> If <span class="hljs-literal">true</span>, reward will be displayed <span class="hljs-keyword">in</span> every article by default.</span><br>  enable: false # 时候开启打赏服务<br>  animation: false # 是否添加动画<br><span class="hljs-meta">  #</span><span class="bash">comment: Donate comment here.</span><br><br>reward: # 此处是贴上自己的收款码，收款码放置在 images 目录下，然后在此处添加链接<br><span class="hljs-meta">  #</span><span class="bash">wechatpay: /images/wechatpay.png</span><br><span class="hljs-meta">  #</span><span class="bash">alipay: /images/alipay.png</span><br><span class="hljs-meta">  #</span><span class="bash">bitcoin: /images/bitcoin.png</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Related popular posts</span><br><span class="hljs-meta">#</span><span class="bash"> Dependencies: https://github.com/tea3/hexo-related-popular-posts</span><br>related_posts: # 是否开启相关文章推荐，不建议开启<br>  enable: false<br>  title: # Custom header, leave empty to use the default one<br>  display_in_home: false<br>  params:<br>    maxCount: 5<br>    #PPMixingRate: 0.0<br>    #isDate: false<br>    #isImage: false<br>    #isExcerpt: false<br><span class="hljs-meta"><br>#</span><span class="bash"> Post edit</span><br><span class="hljs-meta">#</span><span class="bash"> Dependencies: https://github.com/hexojs/hexo-deployer-git</span><br>post_edit: <br>  enable: false<br>  url: https://github.com/user-name/repo-name/tree/branch-name/subdirectory-name # Link for view source<br><span class="hljs-meta">  #</span><span class="bash">url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name <span class="hljs-comment"># Link for fork &amp; edit</span></span><br><span class="hljs-meta"><br>#</span><span class="bash"> Show previous post and next post <span class="hljs-keyword">in</span> post footer <span class="hljs-keyword">if</span> exists</span><br><span class="hljs-meta">#</span><span class="bash"> Available values: left | right | <span class="hljs-literal">false</span></span><br>post_navigation: left # 上一篇/下一篇文章导航，选择项有 left/right/false<br></code></pre></td></tr></table></figure>
<h2 id="用户界面设置"><a href="#用户界面设置" class="headerlink" title="用户界面设置"></a>用户界面设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Custom Page Settings</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://theme-next.org/docs/theme-settings/custom-pages</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta"><br>#</span><span class="bash"> TagCloud settings <span class="hljs-keyword">for</span> tags page.</span><br>tagcloud: # 标签云界面<br><span class="hljs-meta">  #</span><span class="bash"> All values below are same as default, change them by yourself.</span><br>  min: 12 # Minimun font size in px<br>  max: 30 # Maxium font size in px<br>  start: "#ccc" # Start color (hex, rgba, hsla or color keywords)<br>  end: "#111" # End color (hex, rgba, hsla or color keywords)<br>  amount: 200 # Amount of tags, change it if you have more than 200 tags<br><span class="hljs-meta"><br>#</span><span class="bash"> Google Calendar</span><br><span class="hljs-meta">#</span><span class="bash"> Share your recent schedule to others via calendar page.</span><br>calendar: # 日程表界面<br>  calendar_id: &lt;required&gt; # Your Google account E-Mail<br>  api_key: &lt;required&gt;<br>  orderBy: startTime<br>  offsetMax: 24 # Time Range<br>  offsetMin: 4 # Time Range<br>  showDeleted: false<br>  singleEvents: true<br>  maxResults: 250<br></code></pre></td></tr></table></figure>

<h2 id="主题框架设置"><a href="#主题框架设置" class="headerlink" title="主题框架设置"></a>主题框架设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Misc Theme Settings</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Set the text alignment <span class="hljs-keyword">in</span> posts / pages.</span><br>text_align: # 文本对齐方式，默认居中 justify 即可<br><span class="hljs-meta">  #</span><span class="bash"> Available values: start | end | left | right | center | justify | justify-all | match-parent</span><br>  desktop: justify<br>  mobile: justify<br><span class="hljs-meta"><br>#</span><span class="bash"> Reduce padding / margin indents on devices with narrow width.</span><br>mobile_layout_economy: false # 移动端是否窄化布局，默认即可<br><span class="hljs-meta"><br>#</span><span class="bash"> Android Chrome header panel color (<span class="hljs-variable">$brand</span>-<span class="hljs-built_in">bg</span> / <span class="hljs-variable">$headband</span>-<span class="hljs-built_in">bg</span> =&gt; <span class="hljs-variable">$black</span>-deep).</span><br>android_chrome_color: "#222" # 安卓chrome浏览器颜色，默认即可<br><span class="hljs-meta"><br>#</span><span class="bash"> Hide sticky headers and color the menu bar on Safari (iOS / macOS).</span><br>safari_rainbow: false # safari浏览器,默认即可<br><span class="hljs-meta"><br>#</span><span class="bash"> Custom Logo (Do not support scheme Mist)</span><br>custom_logo: #/uploads/custom-logo.jpg  # 用户 logo ，默认即可<br><br>codeblock: # 代码块设置<br><span class="hljs-meta">  #</span><span class="bash"> Code Highlight theme</span><br><span class="hljs-meta">  #</span><span class="bash"> Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br><span class="hljs-meta">  #</span><span class="bash"> See: https://github.com/chriskempson/tomorrow-theme</span><br>  highlight_theme: normal  # 代码高亮主题，有 normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic 几种选择<br><span class="hljs-meta">  #</span><span class="bash"> Add copy button on codeblock</span><br>  copy_button: # 代码块中的复制按钮<br>    enable: false # 建议 true<br>    # Show text copy result.<br>    show_result: false # 是否显示复制成功/复制失败信息，建议 true<br>    # Available values: default | flat | mac<br>    style: # 代码块的风格，其中有mac风格，自己可以选择尝试一下，但我还是觉得默认的 normal 可以<br><br>back2top: # 返回页面顶部按钮<br>  enable: true # 建议开启<br><span class="hljs-meta">  #</span><span class="bash"> Back to top <span class="hljs-keyword">in</span> sidebar.</span><br>  sidebar: false # 在侧边栏就不建议了，默认false即可<br><span class="hljs-meta">  #</span><span class="bash"> Scroll percent label <span class="hljs-keyword">in</span> b2t button.</span><br>  scrollpercent: false # 显示滚动的百分比，根据个人喜好<br><span class="hljs-meta"><br>#</span><span class="bash"> Reading progress bar</span><br>reading_progress: # 阅读进度条，这里建议默认<br>  enable: false<br><span class="hljs-meta">  #</span><span class="bash"> Available values: top | bottom</span><br>  position: top<br>  color: "#37c6c0"<br>  height: 3px<br><span class="hljs-meta"><br>#</span><span class="bash"> Bookmark Support</span><br>bookmark: # 书签，如果开启，则下一次使用的时候就会从你上次浏览的地方显示，改为 true 即可<br>  enable: false<br><span class="hljs-meta">  #</span><span class="bash"> Customize the color of the bookmark.</span><br>  color: "#222"<br><span class="hljs-meta">  #</span><span class="bash"> If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span><br><span class="hljs-meta">  #</span><span class="bash"> If manual, only save it by clicking the bookmark-icon.</span><br>  save: auto<br><span class="hljs-meta"><br>#</span><span class="bash"> `Follow me on GitHub` banner <span class="hljs-keyword">in</span> the top-right corner.</span><br>github_banner: # 在右上角的 github 图标处，点击进入自己的github账户，建议自己有开源的项目可以开启，也是一个宣传自己的机会<br>  enable: false<br>  permalink: https://github.com/yourname<br>  title: Follow me on GitHub<br></code></pre></td></tr></table></figure>

<h2 id="字体设置部分"><a href="#字体设置部分" class="headerlink" title="字体设置部分"></a>字体设置部分</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Font Settings</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://theme-next.org/docs/theme-settings/<span class="hljs-comment">#Fonts-Customization</span></span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Find fonts on Google Fonts (https://www.google.com/fonts)</span><br><span class="hljs-meta">#</span><span class="bash"> All fonts <span class="hljs-built_in">set</span> here will have the following styles:</span><br><span class="hljs-meta">#</span><span class="bash">   light | light italic | normal | normal italic | bold | bold italic</span><br><span class="hljs-meta">#</span><span class="bash"> Be aware that setting too much fonts will cause site running slowly</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> To avoid space between header and sidebar <span class="hljs-keyword">in</span> scheme Pisces / Gemini, Web Safe fonts are recommended <span class="hljs-keyword">for</span> `global` (and `title`):</span><br><span class="hljs-meta">#</span><span class="bash"> Arial | Tahoma | Helvetica | Times New Roman | Courier New | Verdana | Georgia | Palatino | Garamond | Comic Sans MS | Trebuchet MS</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><br>font: # 这一部分是字体设置，如果字体是false，即表示不适用外部字体，使用的是 next 主题默认字体<br>      # 如果对默认字体感到不合适，可以修改，选择自己找到的字体库，添加链接就可,但是要确保能够访问，<br>      # 比如谷歌字体库在大陆就无法访问，即使你使用科学上网可以获得资源，但是不能保证你的访问用户能够顺利看到，<br>      # 关于字体的详细设置请看下面的字体设置篇<br>  enable: false<br><span class="hljs-meta"><br>  #</span><span class="bash"> Uri of fonts host, e.g. //fonts.googleapis.com (Default).</span><br>  host:<br><span class="hljs-meta"><br>  #</span><span class="bash"> Font options:</span><br><span class="hljs-meta">  #</span><span class="bash"> `external: <span class="hljs-literal">true</span>` will load this font family from `host` above.</span><br><span class="hljs-meta">  #</span><span class="bash"> `family: Times New Roman`. Without any quotes.</span><br><span class="hljs-meta">  #</span><span class="bash"> `size: x.x`. Use `em` as unit. Default: 1 (16px)</span><br><span class="hljs-meta"><br>  #</span><span class="bash"> Global font settings used <span class="hljs-keyword">for</span> all elements inside &lt;body&gt;.</span><br>  global:<br>    external: true<br>    family: Lato<br>    size:<br><span class="hljs-meta"><br>  #</span><span class="bash"> Font settings <span class="hljs-keyword">for</span> site title (.site-title).</span><br>  title:<br>    external: true<br>    family:<br>    size:<br><span class="hljs-meta"><br>  #</span><span class="bash"> Font settings <span class="hljs-keyword">for</span> headlines (&lt;h1&gt; to &lt;h6&gt;).</span><br>  headings:<br>    external: true<br>    family:<br>    size:<br><span class="hljs-meta"><br>  #</span><span class="bash"> Font settings <span class="hljs-keyword">for</span> posts (.post-body).</span><br>  posts:<br>    external: true<br>    family:<br><span class="hljs-meta"><br>  #</span><span class="bash"> Font settings <span class="hljs-keyword">for</span> &lt;code&gt; and code blocks.</span><br>  codes:<br>    external: true<br>    family:<br></code></pre></td></tr></table></figure>
<h2 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h2><h3 id="数学公式加持"><a href="#数学公式加持" class="headerlink" title="数学公式加持"></a>数学公式加持</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Third Party Plugins &amp; Services Settings</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://theme-next.org/docs/third-party-services/</span><br><span class="hljs-meta">#</span><span class="bash"> You may need to install dependencies or <span class="hljs-built_in">set</span> CDN URLs <span class="hljs-keyword">in</span> `vendors`</span><br><span class="hljs-meta">#</span><span class="bash"> There are two different CDN providers by default:</span><br><span class="hljs-meta">#</span><span class="bash">   - jsDelivr (cdn.jsdelivr.net), works everywhere even <span class="hljs-keyword">in</span> China</span><br><span class="hljs-meta">#</span><span class="bash">   - CDNJS (cdnjs.cloudflare.com), provided by cloudflare</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Math Formulas Render Support</span><br>math: # 数学公式插件，显示数学公式的插件，仅设置为 true 还不行，需要下载依赖插件<br>      # 可以选择两个引擎 mathjax / katex<br><span class="hljs-meta">  #</span><span class="bash"> Default (<span class="hljs-literal">true</span>) will load mathjax / katex script on demand.</span><br><span class="hljs-meta">  #</span><span class="bash"> That is it only render those page <span class="hljs-built_in">which</span> has `mathjax: <span class="hljs-literal">true</span>` <span class="hljs-keyword">in</span> Front-matter.</span><br><span class="hljs-meta">  #</span><span class="bash"> If you <span class="hljs-built_in">set</span> it to <span class="hljs-literal">false</span>, it will load mathjax / katex srcipt EVERY PAGE.</span><br>  per_page: true<br><span class="hljs-meta"><br>  #</span><span class="bash"> hexo-renderer-pandoc (or hexo-renderer-kramed) required <span class="hljs-keyword">for</span> full MathJax support.</span><br>  mathjax:<br>    enable: false<br>    # See: https://mhchem.github.io/MathJax-mhchem/<br>    mhchem: false<br><span class="hljs-meta"><br>  #</span><span class="bash"> hexo-renderer-markdown-it-plus (or hexo-renderer-markdown-it with markdown-it-katex plugin) required <span class="hljs-keyword">for</span> full Katex support.</span><br>  katex:<br>    enable: false<br>    # See: https://github.com/KaTeX/KaTeX/tree/master/contrib/copy-tex<br>    copy_tex: false<br><span class="hljs-meta"><br>#</span><span class="bash"> Easily <span class="hljs-built_in">enable</span> fast Ajax navigation on your website.</span><br><span class="hljs-meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/theme-next-pjax</span><br>pjax: false<br><span class="hljs-meta"><br>#</span><span class="bash"> FancyBox is a tool that offers a nice and elegant way to add zooming functionality <span class="hljs-keyword">for</span> images.</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://fancyapps.com/fancybox</span><br>fancybox: false<br><span class="hljs-meta"><br>#</span><span class="bash"> A JavaScript library <span class="hljs-keyword">for</span> zooming images like Medium.</span><br><span class="hljs-meta">#</span><span class="bash"> Do not <span class="hljs-built_in">enable</span> both `fancybox` and `mediumzoom`.</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://github.com/francoischalifour/medium-zoom</span><br>mediumzoom: false<br><span class="hljs-meta"><br>#</span><span class="bash"> Vanilla JavaScript plugin <span class="hljs-keyword">for</span> lazyloading images.</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://github.com/ApoorvSaxena/lozad.js</span><br>lazyload: false<br><span class="hljs-meta"><br>#</span><span class="bash"> Pangu Support</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://github.com/vinta/pangu.js</span><br>pangu: false<br><span class="hljs-meta"><br>#</span><span class="bash"> Quicklink Support</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://github.com/GoogleChromeLabs/quicklink</span><br><span class="hljs-meta">#</span><span class="bash"> Front-matter (unsupport home archive).</span><br>quicklink:  # 快链，我还没有尝试过，可以自己试试<br>  enable: false<br><span class="hljs-meta"><br>  #</span><span class="bash"> Home page and archive page can be controlled through home and archive options below.</span><br><span class="hljs-meta">  #</span><span class="bash"> This configuration item is independent of `<span class="hljs-built_in">enable</span>`.</span><br>  home: false<br>  archive: false<br><span class="hljs-meta"><br>  #</span><span class="bash"> Default (<span class="hljs-literal">true</span>) will initialize quicklink after the load event fires.</span><br>  delay: true<br><span class="hljs-meta">  #</span><span class="bash"> Custom a time <span class="hljs-keyword">in</span> milliseconds by <span class="hljs-built_in">which</span> the browser must execute prefetching.</span><br>  timeout: 3000<br><span class="hljs-meta">  #</span><span class="bash"> Default (<span class="hljs-literal">true</span>) will <span class="hljs-built_in">enable</span> fetch() or falls back to XHR.</span><br>  priority: true<br><span class="hljs-meta"><br>  #</span><span class="bash"> For more flexibility you can add some patterns (RegExp, Function, or Array) to ignores.</span><br><span class="hljs-meta">  #</span><span class="bash"> See: https://github.com/GoogleChromeLabs/quicklink<span class="hljs-comment">#custom-ignore-patterns</span></span><br>  ignores:<br></code></pre></td></tr></table></figure>

<h3 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Comments Settings</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://theme-next.org/docs/third-party-services/comments</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> next 主题支持几个评论插件 disqus | disqusjs |gitalk | livere | changyan(china) | valine(china) | </span><br><span class="hljs-meta">#</span><span class="bash"> 而且同时支持多个评论系统</span><br><span class="hljs-meta">#</span><span class="bash"> 具体的请看我所配置 valine 方法</span><br><span class="hljs-meta">#</span><span class="bash"> Multiple Comment System Support</span><br>comments:<br><span class="hljs-meta">  #</span><span class="bash"> Available values: tabs | buttons</span><br>  style: tabs<br><span class="hljs-meta">  #</span><span class="bash"> Choose a comment system to be displayed by default.</span><br><span class="hljs-meta">  #</span><span class="bash"> Available values: changyan | disqus | disqusjs | gitalk | livere | valine</span><br>  active:<br><span class="hljs-meta">  #</span><span class="bash"> Setting `<span class="hljs-literal">true</span>` means remembering the comment system selected by the visitor.</span><br>  storage: true<br><span class="hljs-meta">  #</span><span class="bash"> Lazyload all comment systems.</span><br>  lazyload: false<br><span class="hljs-meta">  #</span><span class="bash"> Modify texts or order <span class="hljs-keyword">for</span> any navs, here are some examples.</span><br>  nav:<br>    #disqus:<br>    #  text: Load Disqus<br>    #  order: -1<br>    #gitalk:<br>    #  order: -2<br><span class="hljs-meta"><br>#</span><span class="bash"> Disqus</span><br>disqus:<br>  enable: false<br>  shortname:<br>  count: true<br><span class="hljs-meta">  #</span><span class="bash">post_meta_order: 0</span><br><span class="hljs-meta"><br>#</span><span class="bash"> DisqusJS</span><br><span class="hljs-meta">#</span><span class="bash"> Alternative Disqus - Render comment component using Disqus API.</span><br><span class="hljs-meta">#</span><span class="bash"> Demo: https://suka.js.org/DisqusJS/</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://github.com/SukkaW/DisqusJS</span><br>disqusjs:<br>  enable: false<br><span class="hljs-meta">  #</span><span class="bash"> API Endpoint of Disqus API (https://disqus.com/api/).</span><br><span class="hljs-meta">  #</span><span class="bash"> Leave api empty <span class="hljs-keyword">if</span> you are able to connect to Disqus API. Otherwise you need a reverse proxy <span class="hljs-keyword">for</span> it.</span><br><span class="hljs-meta">  #</span><span class="bash"> For example:</span><br><span class="hljs-meta">  #</span><span class="bash"> api: https://disqus.skk.moe/disqus/</span><br>  api:<br>  apikey: # Register new application from https://disqus.com/api/applications/<br>  shortname: # See: https://disqus.com/admin/settings/general/<br><span class="hljs-meta"><br>#</span><span class="bash"> Changyan</span><br>changyan:<br>  enable: false<br>  appid:<br>  appkey:<br><span class="hljs-meta">  #</span><span class="bash">post_meta_order: 0</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Valine</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://valine.js.org, https://github.com/xCss/Valine</span><br>valine:<br>  enable: false<br>  appid: # Your leancloud application appid<br>  appkey: # Your leancloud application appkey<br>  notify: false # Mail notifier<br>  verify: false # Verification code<br>  placeholder: Just go go # Comment box placeholder<br>  avatar: mm # Gravatar style<br>  guest_info: nick,mail,link # Custom comment header<br>  pageSize: 10 # Pagination size<br>  language: # Language, available values: en, zh-cn<br>  visitor: false # Article reading statistic<br>  comment_count: true # If false, comment count will only be displayed in post page, not in home page<br>  recordIP: false # Whether to record the commenter IP<br>  serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)<br><span class="hljs-meta">  #</span><span class="bash">post_meta_order: 0</span><br><span class="hljs-meta"><br>#</span><span class="bash"> LiveRe comments system</span><br><span class="hljs-meta">#</span><span class="bash"> You can get your uid from https://livere.com/insight/myCode (General web site)</span><br>livere_uid: # &lt;your_uid&gt;<br><span class="hljs-meta"><br>#</span><span class="bash"> Gitalk</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://gitalk.github.io, https://github.com/gitalk/gitalk</span><br>gitalk:<br>  enable: false<br>  github_id: # GitHub repo owner<br>  repo: # Repository name to store issues<br>  client_id: # GitHub Application Client ID<br>  client_secret: # GitHub Application Client Secret<br>  admin_user: # GitHub repo owner and collaborators, only these guys can initialize gitHub issues<br>  distraction_free_mode: true # Facebook-like distraction free mode<br><span class="hljs-meta">  #</span><span class="bash"> Gitalk<span class="hljs-string">'s display language depends on user'</span>s browser or system environment</span><br><span class="hljs-meta">  #</span><span class="bash"> If you want everyone visiting your site to see a uniform language, you can <span class="hljs-built_in">set</span> a force language value</span><br><span class="hljs-meta">  #</span><span class="bash"> Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span><br>  language:<br></code></pre></td></tr></table></figure>

<h3 id="文章评价功能"><a href="#文章评价功能" class="headerlink" title="文章评价功能"></a>文章评价功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Post Widgets &amp; Content Sharing Services</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://theme-next.org/docs/third-party-services/post-widgets</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> next 主题支持两个评估系统： Widgetpack Rating 和 AddThis</span><br><span class="hljs-meta">#</span><span class="bash"> Star rating support to each article.</span><br><span class="hljs-meta">#</span><span class="bash"> To get your ID visit https://widgetpack.com</span><br>rating: # rating 插件设置<br>  enable: false<br>  id:     # &lt;app_id&gt;<br>  color:  fc6423<br><span class="hljs-meta"><br>#</span><span class="bash"> AddThis Share. See: https://www.addthis.com</span><br><span class="hljs-meta">#</span><span class="bash"> Go to https://www.addthis.com/dashboard to customize your tools.</span><br>add_this_id: # AddThis 插件设置<br></code></pre></td></tr></table></figure>
<h3 id="文章统计和分析功能"><a href="#文章统计和分析功能" class="headerlink" title="文章统计和分析功能"></a>文章统计和分析功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">  next 主题支持许多的统计和分析插件，用于统计站点浏览量文章浏览数等等</span><br><span class="hljs-meta">#</span><span class="bash"> 包括有 google_analytics baidu_analytics cnzz leancloud firesrtore 以及最常使用的卜算子</span><br><span class="hljs-meta">#</span><span class="bash"> 这一部分只需要现在是干什么的就可以，具体的配置过程见下一篇博客</span><br><span class="hljs-meta"><br>#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Statistics and Analytics</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://theme-next.org/docs/third-party-services/statistics-and-analytics</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Google Analytics 谷歌统计设置</span><br>google_analytics: <br>  tracking_id: # &lt;app_id&gt;<br><span class="hljs-meta">  #</span><span class="bash"> By default, NexT will load an external gtag.js script on your site.</span><br><span class="hljs-meta">  #</span><span class="bash"> If you only need the pageview feature, <span class="hljs-built_in">set</span> the following option to <span class="hljs-literal">true</span> to get a better performance.</span><br>  only_pageview: false<br><span class="hljs-meta"><br>#</span><span class="bash"> Baidu Analytics <span class="hljs-comment"># 百度统计设置</span></span><br>baidu_analytics: # &lt;app_id&gt;<br><span class="hljs-meta"><br>#</span><span class="bash"> Growingio Analytics</span><br>growingio_analytics: # &lt;project_id&gt;<br><span class="hljs-meta"><br>#</span><span class="bash"> CNZZ count CNZZ的设置</span><br>cnzz_siteid:<br><span class="hljs-meta"><br>#</span><span class="bash"> Show number of visitors of each article.</span><br><span class="hljs-meta">#</span><span class="bash"> You can visit https://leancloud.cn to get AppID and AppKey.</span><br><span class="hljs-meta">#</span><span class="bash"> AppID and AppKey are recommended to be the same as valine<span class="hljs-string">'s for counter compatibility.</span></span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-string"> Do not enable both `valine.visitor` and `leancloud_visitors`.</span></span><br>leancloud_visitors: # leancloud插件设置<br>  enable: false<br>  app_id: # &lt;app_id&gt;<br>  app_key: # &lt;app_key&gt;<br><span class="hljs-meta">  #</span><span class="bash"><span class="hljs-string"> Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="hljs-meta">  #</span><span class="bash"><span class="hljs-string"> If you don'</span>t care about security <span class="hljs-keyword">in</span> leancloud counter and just want to use it directly</span><br><span class="hljs-meta">  #</span><span class="bash"> (without hexo-leancloud-counter-security plugin), <span class="hljs-built_in">set</span> `security` to `<span class="hljs-literal">false</span>`.</span><br>  security: true<br>  betterPerformance: false<br><span class="hljs-meta"><br>#</span><span class="bash"> Another tool to show number of visitors to each article.</span><br><span class="hljs-meta">#</span><span class="bash"> Visit https://console.firebase.google.com/u/0/ to get apiKey and projectId.</span><br><span class="hljs-meta">#</span><span class="bash"> Visit https://firebase.google.com/docs/firestore/ to get more information about firestore.</span><br>firestore: # firestore设置<br>  enable: false<br>  collection: articles # Required, a string collection name to access firestore database<br>  apiKey: # Required<br>  projectId: # Required<br><span class="hljs-meta"><br>#</span><span class="bash"> Show Views / Visitors of the website / page with busuanzi.</span><br><span class="hljs-meta">#</span><span class="bash"> Get more information on http://ibruce.info/2015/04/04/busuanzi</span><br>busuanzi_count: # 卜算子<br>  enable: false<br>  total_visitors: true<br>  total_visitors_icon: user<br>  total_views: true<br>  total_views_icon: eye<br>  post_views: true<br>  post_views_icon: eye<br></code></pre></td></tr></table></figure>

<h3 id="站内搜索功能"><a href="#站内搜索功能" class="headerlink" title="站内搜索功能"></a>站内搜索功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Search Services</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://theme-next.org/docs/third-party-services/search-services</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta"><br>#</span><span class="bash"> next 主题支持两种站内搜索插件 algolia_search 和 local_search(比较常用);</span><br><span class="hljs-meta">#</span><span class="bash"> local_search 的具体配置见下一篇博客内容</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Algolia Search</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://www.algolia.com</span><br>algolia_search:<br>  enable: false<br>  hits:<br>    per_page: 10<br>  labels:<br>    input_placeholder: Search for Posts<br>    hits_empty: "We didn't find any results for the search: $&#123;query&#125;"<br>    hits_stats: "$&#123;hits&#125; results found in $&#123;time&#125; ms"<br><span class="hljs-meta"><br>#</span><span class="bash"> Local Search</span><br><span class="hljs-meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span><br>local_search:<br>  enable: false<br><span class="hljs-meta">  #</span><span class="bash"> If auto, trigger search by changing input.</span><br><span class="hljs-meta">  #</span><span class="bash"> If manual, trigger search by pressing enter key or search button.</span><br>  trigger: auto<br><span class="hljs-meta">  #</span><span class="bash"> Show top n results per article, show all results by setting to -1</span><br>  top_n_per_article: 1<br><span class="hljs-meta">  #</span><span class="bash"> Unescape html strings to the readable one.</span><br>  unescape: false<br><span class="hljs-meta">  #</span><span class="bash"> Preload the search data when the page loads.</span><br>  preload: false<br><span class="hljs-meta"><br>#</span><span class="bash"> Swiftype Search API Key</span><br>swiftype_key:<br></code></pre></td></tr></table></figure>

<h3 id="站内即时聊天功能"><a href="#站内即时聊天功能" class="headerlink" title="站内即时聊天功能"></a>站内即时聊天功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Chat Services</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://theme-next.org/docs/third-party-services/chat-services</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta"><br>#</span><span class="bash"> next 主题支持在线聊天服务，支持两个插件 charta 和 tidioA,这一部分自认为没有必要，所以我也没有配置</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Chatra Support</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://chatra.io</span><br><span class="hljs-meta">#</span><span class="bash"> Dashboard: https://app.chatra.io/settings/general</span><br>chatra: # charta 插件设置<br>  enable: false<br>  async: true<br>  id: # Visit Dashboard to get your ChatraID<br><span class="hljs-meta">  #</span><span class="bash">embed: <span class="hljs-comment"># Unfinished experimental feature for developers. See: https://chatra.io/help/api/#injectto</span></span><br><span class="hljs-meta"><br>#</span><span class="bash"> Tidio Support</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://www.tidiochat.com</span><br><span class="hljs-meta">#</span><span class="bash"> Dashboard: https://www.tidiochat.com/panel/dashboard</span><br>tidio: # tidio 插件设置<br>  enable: false<br>  key: # Public Key, get it from dashboard. See: https://www.tidiochat.com/panel/settings/developer<br></code></pre></td></tr></table></figure>

<h3 id="标签插件"><a href="#标签插件" class="headerlink" title="标签插件"></a>标签插件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Tags Settings</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://theme-next.org/docs/tag-plugins/</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta"><br>#</span><span class="bash"> 标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。</span><br><span class="hljs-meta">#</span><span class="bash"> 这一部分的内容还是挺有意思的，可以尝试学习学习，具体的使用方法我会在后面的使用篇具体讲解;</span><br><span class="hljs-meta">#</span><span class="bash"> 现在详细的介绍以及效果演示可以看中文官方文档 (https://hexo.io/zh-cn/docs/tag-plugins)</span><br><span class="hljs-meta"><br>#</span><span class="bash"> Note tag (bs-callout)</span><br>note:<br><span class="hljs-meta">  #</span><span class="bash"> Note tag style values:</span><br><span class="hljs-meta">  #</span><span class="bash">  - simple    bs-callout old alert style. Default.</span><br><span class="hljs-meta">  #</span><span class="bash">  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="hljs-meta">  #</span><span class="bash">  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="hljs-meta">  #</span><span class="bash">  - disabled  <span class="hljs-built_in">disable</span> all CSS styles import of note tag.</span><br>  style: simple<br>  icons: false<br><span class="hljs-meta">  #</span><span class="bash"> Offset lighter of background <span class="hljs-keyword">in</span> % <span class="hljs-keyword">for</span> modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="hljs-meta">  #</span><span class="bash"> Offset also applied to label tag variables. This option can work with disabled note tag.</span><br>  light_bg_offset: 0<br><span class="hljs-meta"><br>#</span><span class="bash"> Tabs tag</span><br>tabs:<br>  transition:<br>    tabs: false<br>    labels: true<br><span class="hljs-meta"><br>#</span><span class="bash"> PDF tag, requires two plugins: pdfObject and pdf.js</span><br><span class="hljs-meta">#</span><span class="bash"> pdfObject will try to load pdf files natively, <span class="hljs-keyword">if</span> failed, pdf.js will be used.</span><br><span class="hljs-meta">#</span><span class="bash"> The following `cdn` setting is only <span class="hljs-keyword">for</span> pdfObject, because cdn <span class="hljs-keyword">for</span> pdf.js might be blocked by CORS policy.</span><br><span class="hljs-meta">#</span><span class="bash"> So, you must install the dependency of pdf.js <span class="hljs-keyword">if</span> you want to use pdf tag and make it available to all browsers.</span><br><span class="hljs-meta">#</span><span class="bash"> See: https://github.com/theme-next/theme-next-pdf</span><br>pdf:<br>  enable: false<br><span class="hljs-meta">  #</span><span class="bash"> Default height</span><br>  height: 500px<br><span class="hljs-meta"><br>#</span><span class="bash"> Mermaid tag</span><br>mermaid:<br>  enable: false<br><span class="hljs-meta">  #</span><span class="bash"> Available themes: default | dark | forest | neutral</span><br>  theme: forest<br></code></pre></td></tr></table></figure>

<h3 id="动画设置部分"><a href="#动画设置部分" class="headerlink" title="动画设置部分"></a>动画设置部分</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> Animation Settings</span><br><span class="hljs-meta">#</span><span class="bash"> ---------------------------------------------------------------</span><br><span class="hljs-meta">#</span><span class="bash"> 这一部分主要是使用页面动画设置</span><br><span class="hljs-meta">#</span><span class="bash"> Use velocity to animate everything.</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: http://velocityjs.org</span><br>motion: # 第一部分主要是使用 velocity 引擎实现的界面动态的效果，默认就好<br>        # 否则可能还需要学习一下 velocity<br>  enable: true<br>  async: false<br>  transition:<br>    # Transition variants:<br>    # fadeIn | flipXIn | flipYIn | flipBounceXIn | flipBounceYIn<br>    # swoopIn | whirlIn | shrinkIn | expandIn<br>    # bounceIn | bounceUpIn | bounceDownIn | bounceLeftIn | bounceRightIn<br>    # slideUpIn | slideDownIn | slideLeftIn | slideRightIn<br>    # slideUpBigIn | slideDownBigIn | slideLeftBigIn | slideRightBigIn<br>    # perspectiveUpIn | perspectiveDownIn | perspectiveLeftIn | perspectiveRightIn<br>    post_block: fadeIn<br>    post_header: slideDownIn<br>    post_body: slideDownIn<br>    coll_header: slideLeftIn<br>    # Only for Pisces | Gemini.<br>    sidebar: slideUpIn<br><span class="hljs-meta"><br>#</span><span class="bash"> Progress bar <span class="hljs-keyword">in</span> the top during page loading.</span><br><span class="hljs-meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/theme-next-pace</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://github.com/HubSpot/pace</span><br>pace: # 文章加载时候显示的进度条，需要添加依赖(个人认为没有必要)<br>  enable: false<br><span class="hljs-meta">  #</span><span class="bash"> Themes list:</span><br><span class="hljs-meta">  #</span><span class="bash"> big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class="hljs-meta">  #</span><span class="bash"> corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br>  theme: minimal<br><span class="hljs-meta"><br>#</span><span class="bash"> JavaScript 3D library.</span><br><span class="hljs-meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/theme-next-three</span><br>three: # javaScript 的3D库，同样需要添加依赖库文件，我也没有设置<br>  enable: false<br>  three_waves: false<br>  canvas_lines: false<br>  canvas_sphere: false<br><span class="hljs-meta"><br>#</span><span class="bash"> Canvas-nest</span><br><span class="hljs-meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://github.com/hustcc/canvas-nest.js</span><br>canvas_nest:<br>  enable: false<br>  onmobile: true # Display on mobile or not<br>  color: "0,0,255" # RGB values, use `,` to separate<br>  opacity: 0.5 # The opacity of line: 0~1<br>  zIndex: -1 # z-index property of the background<br>  count: 99 # The number of lines<br><span class="hljs-meta"><br>#</span><span class="bash"> Canvas-ribbon</span><br><span class="hljs-meta">#</span><span class="bash"> Dependencies: https://github.com/theme-next/theme-next-canvas-ribbon</span><br><span class="hljs-meta">#</span><span class="bash"> For more information: https://github.com/zproo/canvas-ribbon</span><br>canvas_ribbon:<br>  enable: false<br>  size: 300 # The width of the ribbon<br>  alpha: 0.6 # The transparency of the ribbon<br>  zIndex: -1 # The display level of the ribbon<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>主题优化</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之环境搭建篇</title>
    <url>/2020/01/09/hexo%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>经过几天的时间，终于搭建好了个人博客，是的，就是你现在看到的这个样子，’hexo + github page’ ，真的香，我所使用的主题为目前最流行的 ‘next’ 主题。没有什么花哨的地方，追求简约就是美的理念，对自己的实践，以及在搭建、优化过程的踩过的一些坑，我觉得有必要记录下来，供自己后面学习的同时便利他人。</p>
<a id="more"></a>
<blockquote>
<p>我主要是在windows上操作，其实在Mac上操作大致相同，我在文章中两种系统下的方法都会详细介绍；<br>基于Hexo的最新版本 ‘4.1.1’，截止到现在 (这篇博客的发布时间) 最新版本是’4.2.0’；<br>因为我在搭建的时候也看过不少的教程，但是基于的版本都比较老，难免就踩了一些坑，所以此博客保证 ‘4.1.1’ 版本完全可复现，对其他版本仅供参考，特此说明！</p>
</blockquote>
<h1 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 <code>Git</code></h1><p>首先我们需要下载两个工具 <code>Git</code> 和 <code>Node</code> :</p>
<h2 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h2><p><font color = rgb()>window的安装可以直接在官网上下载安装包：Git官网：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></font></p>
<p>直接点击箭头指向的地方就可下载适合你电脑的最新版本Git，如下所示：<br><img src="https://img-blog.csdnimg.cn/20191130204748487.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>然后在电脑上看到下面的Git组件就说明安装成功了，包括<code>Git bash</code> 和 <code>Git GUI</code> 等 (注：图片来自自己的 <code>CSDN</code> 账户，非盗取)：</p>
<p><img src="https://img-blog.csdnimg.cn/20191130204953512.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>然后打开Git bash，输入 <code>git --version</code> (类似于linux下的bash)查看 Git 版本号：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git --version<br>git version <span class="hljs-number">2.24</span><span class="hljs-number">.0</span> windows<span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure>
<p>可以看到你下载的版本是适合windows下的 <code>2.30.0</code>。</p>
<p> <font color = #FF000>至此windows下安装结束！</font></p>
<h2 id="Mac上安装"><a href="#Mac上安装" class="headerlink" title="Mac上安装"></a>Mac上安装</h2><p><code>MacOS</code> 上的安装直接进入官网选择 <code>Mac</code> 版本下载安装就好:</p>
<p><img src="https://gitee.com/codercxf/blog_image_store/raw/master/Git%20for%20Mac.png" alt=""></p>
<h2 id="全局配置（必须项）"><a href="#全局配置（必须项）" class="headerlink" title="全局配置（必须项）"></a>全局配置（必须项）</h2><p>安装完 <code>Git</code> 后还需要进行全局配置（相当于注册QQ号、微信号的操作）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git config --global user.name <span class="hljs-string">"name"</span><br>$ git config --global user.email <span class="hljs-string">"email@example.com"</span><br></code></pre></td></tr></table></figure>
<p>注意：<code>name</code> 是你自己取的 <code>github</code> 名字(相当于昵称)，<code>email</code> 是你自己的邮箱。至此整个配置就完成了。</p>
<h1 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 <code>node.js</code></h1><p>进入nodejs官网进行安装，官网地址： <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p>
<p>进去点击下载箭头所指的即可 (长期支持版)</p>
<p><img src="https://gitee.com/codercxf/blog_image_store/raw/master/nodeJS/NodeJS.jpg" alt=""></p>
<p>安装的过程傻瓜式操作，一路 <code>next</code> 就好。</p>
<p>然后我们可以使用 <code>Git bash</code> 查看安装好的 <code>nodejs</code> 的版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> node --version</span><br>v12.14.1      //这是我自己安装的版本，主要是为了验证安装成功<br></code></pre></td></tr></table></figure>

<p>然后查看一下 <code>npm</code> 包管理器的版本(npm是随NodeJS一起安装的包管理器)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm --version</span><br>6.12.1<br></code></pre></td></tr></table></figure>
<p>可以看到我们需要的工具都已经安装完成。</p>
<p>但是由于 <code>npm</code> 速度比较慢，所以我们使用的是淘宝镜像源 <code>cnpm</code> 下载 <code>hexo</code> 框架,所以首先利用 <code>npm</code> 安装 <code>cnpm</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><br>//说明:这个下载过程可能需要等待一会，而且可能会失败，一定多尝试几次，不要放弃，否则直接使用 `npm` 很难下载 `hexo`<br></code></pre></td></tr></table></figure>
<p>下载完成后来验证一下 <code>cnpm</code> 是否安装成功，即查看一下版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cnpm --version</span><br>cnpm@6.1.0 (C:\Users\CXF\AppData\Roaming\npm\node_modules\cnpm\lib\parse_argv.js)<br>npm@6.11.3 (C:\Users\CXF\AppData\Roaming\npm\node_modules\cnpm\node_modules\npm\lib\npm.js)<br>node@12.13.1 (D:\nodeJs\node.exe)<br>npminstall@3.23.0 (C:\Users\CXF\AppData\Roaming\npm\node_modules\cnpm\node_modules\npminstall\lib\index.js)<br>prefix=C:\Users\CXF\AppData\Roaming\npm<br>win32 x64 10.0.18362<br>registry=https://r.npm.taobao.org<br></code></pre></td></tr></table></figure>

<p>如果出现类似说明的就是安装成功了。以后就可以使用 <code>cnpm</code> 代替 <code>npm</code>。</p>
<p><font color = #FF000>说明: <code>MacOS</code> 上的操作和 <code>windows</code> 下操作完全就一样，命令也一样，只不过 <code>windows</code> 是在 <code>Git bash</code> 上操作，而 <code>Mac</code> 是直接在终端进行。</font></p>
<h1 id="下载-hexo"><a href="#下载-hexo" class="headerlink" title="下载 hexo"></a>下载 <code>hexo</code></h1><p>利用刚才下载好的 <code>cnpm</code> 来正式下载 <code>Hexo</code> 这个框架 (这个时候下载速度就很快了)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cnpm install -g hexo-cli</span><br></code></pre></td></tr></table></figure>
<p>这个时候就会自动下载 <code>hexo</code> 框架，</p>
<blockquote>
<p>视自己的电脑和当时网速情况而定，下载需要的时间可能会不一样</p>
</blockquote>
<p>等安装结束之后再来查看一下版本，确保安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo --version</span><br>hexo-cli: 3.1.0<br>os: Windows_NT 10.0.18362 win32 x64<br>node: 12.13.1<br>v8: 7.7.299.13-node.16<br>uv: 1.33.1<br>zlib: 1.2.11<br>brotli: 1.0.7<br>ares: 1.15.0<br>modules: 72<br>nghttp2: 1.39.2<br>napi: 5<br>llhttp: 1.1.4<br>http_parser: 2.8.0<br>openssl: 1.1.1d<br>cldr: 35.1<br>icu: 64.2<br>tz: 2019c<br>unicode: 12.1<br></code></pre></td></tr></table></figure>

<p>如果出现类似上述的说明就是安装成功了。</p>
<blockquote>
<p>并不需要和我上面贴出的完全一样，可能我安装的版本不是最新版了。<br>只要是有就是成功了</p>
</blockquote>
<p>初始化目录为Hexo博客框架:<br>首先新建一个目录 (在windows下就是文件夹) blog，然后进入到该目录(以后的所有操作都是在该目录下进行)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> mkdir blog</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> blog</span><br></code></pre></td></tr></table></figure>

<p>然后使用命令 <code>hexo init</code> 初始化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo init </span><br>INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git<br>Cloning into 'D:\blog'...<br>remote: Enumerating objects: 30, done.<br>remote: Counting objects: 100% (30/30), done.<br>remote: Compressing objects: 100% (24/24), done.<br>remote: Total 161 (delta 12), reused 12 (delta 4), pack-reused 131<br>Receiving objects: 100% (161/161), 31.79 KiB | 191.00 KiB/s, done.<br>Resolving deltas: 100% (74/74), done.<br>Submodule 'themes/landscape' (https://github.com/hexojs/hexo-theme-landscape.git) registered for path 'themes/landscape'<br>Cloning into 'D:/blog/themes/landscape'...<br>......<br>......<br>.....<br>INFO  Start blogging with Hexo!<br></code></pre></td></tr></table></figure>
<p>可以看到使用这条命令，会自动的完成一些初始化的操作，下载默认主题等等。</p>
<p>最后提示我们可以启动博客了，我们使用命令 <code>hexo server</code> 或者简写为 <code>hexo s</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo server</span><br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure>
<p>看到提示信息说我们已经启动，在本地机的 <code>4000</code> 端口，这个时候我们就访问一下我们的 <code>4000</code> 端口：</p>
<p><img src="https://gitee.com/codercxf/blog_image_store/raw/master/localhost.png" alt=""></p>
<p>然后我们就可以看到如下内容：</p>
<p><img src="https://gitee.com/codercxf/blog_image_store/raw/master/init%20ui.png" alt=""></p>
<p>这就是我们的博客了，如果能够看到这个界面，恭喜你，已经成功了90%。</p>
<blockquote>
<p>但是还有问题就是我们只能在本地的 <code>localhost:4000</code> 访问，而且你可能觉得这个界面有点不太好看，想更换一个主题，这些都是可以操作的。</p>
</blockquote>
<p>首先要解决的问题就是如何将博客部署到远端，我们不可能只在本地 <code>4000</code> 端口访问；</p>
<p>下面我们开始将 <code>hexo</code> 部署到 <code>github</code> 这个网站上。</p>
<h1 id="部署至-github-page"><a href="#部署至-github-page" class="headerlink" title="部署至 github page"></a>部署至 <code>github page</code></h1><h2 id="创建-github-仓库"><a href="#创建-github-仓库" class="headerlink" title="创建 github 仓库"></a>创建 <code>github</code> 仓库</h2><p>首先打开 <code>github</code>，新建一个仓库，仓库名为：<code>yourname.github.io</code>，其中 <code>yourname</code> 就是你的 <code>github</code> 的用户名(昵称)。</p>
<blockquote>
<p><font color = #FF000>tips: 仓库名必须是这个格式</font></p>
</blockquote>
<p>如下所示：<br><img src="https://gitee.com/codercxf/blog_image_store/raw/master/nodeJS/github.io.jpg" alt=""></p>
<p>先把这个仓库放这，一会有用。</p>
<h2 id="安装部署插件"><a href="#安装部署插件" class="headerlink" title="安装部署插件"></a>安装部署插件</h2><p>然后我们还需要安装部署 <code>hexo</code> 的插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cnpm install --save hexo-deployer-git</span><br></code></pre></td></tr></table></figure>
<p>安装完成后，还记得blog这个文件夹里都有哪些文件嘛，我们再来看一下文件夹里的所有文件，因为后面都是基于这个文件夹里面的文件进行操作的，包括更改主题、优化主题等等：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ll</span><br>-rw-r--r-- 1 CXF 197121   3005 12月 31 20:48 _config.yml<br>-rw-r--r-- 1 CXF 197121 457339  1月  8 20:50 db.json<br>drwxr-xr-x 1 CXF 197121      0  1月  3 21:54 node_modules/<br>-rw-r--r-- 1 CXF 197121    799  1月  3 21:54 package.json<br>-rw-r--r-- 1 CXF 197121 187155  1月  3 21:54 package-lock.json<br>drwxr-xr-x 1 CXF 197121      0  1月  7 17:18 public/<br>drwxr-xr-x 1 CXF 197121      0 12月 14 09:11 scaffolds/<br>drwxr-xr-x 1 CXF 197121      0 12月 28 17:56 source/<br>drwxr-xr-x 1 CXF 197121      0 12月 24 15:17 themes/<br></code></pre></td></tr></table></figure>
<h2 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h2><p>然后我们打开第一个文件 <code>_config.yml</code>,这个文件是整个 <code>hexo</code> 博客的站点配置文件，想要部署到远端，我们需要对这个文件进行修改：</p>
<p><font color = rgb()> (这里跟着操作就行，暂时不用管这些文件都是干嘛的，下一篇主题优化的时候会详细介绍每一个文件以及这里打开的<code>_config.yml</code> 内容的具体含义)</font></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim _config.yml  //我是使用的vim编辑器打开,你也可以使用记事本</span><br><br>//定位到文件末尾找到下面这个地方：deploy，<br><span class="hljs-meta">#</span><span class="bash"> Deployment</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/deployment.html</span></span><br>deploy:<br>  type: <br>  repo:<br></code></pre></td></tr></table></figure>

<p>然后我们修改为以下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Deployment</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment"># Docs: https://hexo.io/docs/deployment.html</span></span><br>deploy:<br>  type: git<br>  repo: https://github.com/ yourname/yourname.github.io.git<br>  branch: master<br></code></pre></td></tr></table></figure>
<blockquote>
<p><font color = #FF000>tip: 所有的冒号后面都要空一格 </font></p>
</blockquote>
<p><code>repo:</code> 是我们之前创建的 <code>yourname.github.io</code> 仓库的地址，还是要注意 <code>yourname</code> 是你自己的用户名。<br>然后进行部署，一条命令就可 <code>hexo -d</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo d</span><br></code></pre></td></tr></table></figure>

<p>然后这个时候我们就可以使用 <code>yourname.github.io</code> 进行访问了(相当于域名，后面也可以自己买域名绑定，具体方法见后面，还是那句话，先搞起来再说其他的)。<br>我们现在来试一下用仓库名访问，和使用 <code>localhost</code> 进行访问的结果应该是一样的。<br><img src="https://gitee.com/codercxf/blog_image_store/raw/master/git.io.jpg" alt=""><br><img src="https://gitee.com/codercxf/blog_image_store/raw/master/init%20ui.png" alt=""></p>
<p>到现在我们就完成了我们的目标，搭建 <code>hexo</code> 框架以及部署到至 <code>github</code>上。</p>
<hr>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>为了搭建 <code>hexo</code>, 我们总共做了以下几件事：</p>
<p>1、下载 <code>Git</code> 和 <code>node</code>两个依赖工具，这两个直接在官网上下载；</p>
<p>2、下载 <code>hexo</code> 框架，使用的命令是  <code>cnpm install hexo-cli</code>，特别需要注意的地方是下载 <code>cnpm</code> 很重要，我尝试过直接使用 <code>npm</code> 下载，速度很慢，或者直接就是下载失败；</p>
<p>3、部署 <code>hexo</code> 至 <code>github</code>，这一步又总共做了三件事：</p>
<p>1）在 <code>github</code> 上新建一个名为 <code>yourname.github.io</code> 的仓库；<br>2）下载 <code>hexo</code> 的部署插件 <code>cnpm install --save hexo-deploy-git</code>；<br>3）修改站点配置文件：<code>_config.yml</code>。</p>
<p>到此整个搭建过程就结束了，如有不当或有问题，还请指正。<br>更换主题以及主题优化见下一篇博客: hexo之主题优化篇</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置SSH传输</title>
    <url>/2019/12/21/Git%E9%85%8D%E7%BD%AESSH%E4%BC%A0%E8%BE%93-1/</url>
    <content><![CDATA[<p><em>Git是分布式版本控制系统的代表作，具体Git是如何进行版本控制的内容这里不作展开介绍，该文只谈如何配置SSH，将本地仓库和远程仓库关联，使得可以通过 <code>ssh</code> 协议进行传输，Git虽然也是支持 <code>https</code>协议的，但是传输速度较慢，所以还是推荐大家添加 <code>ssh Key</code></em>  </p>
<a id="more"></a>
<h1 id="windows上的操作："><a href="#windows上的操作：" class="headerlink" title="windows上的操作："></a>windows上的操作：</h1><h2 id="在本地机创建SSH-Key："><a href="#在本地机创建SSH-Key：" class="headerlink" title="在本地机创建SSH Key："></a>在本地机创建SSH Key：</h2><p>首先你需要在自己电脑的用户主目录下查看是不是已经有<code>.ssh</code>文件，如果有的话则这一步直接可以跳过:所谓的用户主目录就是 <code>c:/用户</code>直接跳到第二步：2.在github上添加自己电脑上的 <code>SSH Key</code>。    </p>
<p>如果没有的话，打开Git bash (相信你已经安装过了Git)，输入以下命令:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ ssh-keygen -t rsa -C <span class="hljs-string">"==youremail@com=="</span><br></code></pre></td></tr></table></figure>
<p>注意：上面双引号部分内容改成你自己注册github时候的邮箱号！</p>
<p>输入上面命令会出现类似以下的提示:</p>
<p><img src="http://q39cj22ml.bkt.clouddn.com/SSH%E5%8D%8F%E8%AE%AE.jpg" alt=""></p>
<p>下面就一路回车就好，大概需要三次回车，因为都是一些选择项，默认就好； 三次回车之后，就会出现下面的提示：</p>
<p><img src="http://q39cj22ml.bkt.clouddn.com/SSH.jpg" alt=""></p>
<p>如果顺利的话（应该是顺利的），会在生成的 <code>.ssh</code> 文件在里面有<code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，这两个就是 <code>SSH Key</code> 的秘钥对，<code>id_rsa</code> 是私钥，<code>id_rsa.pub</code> 是公钥。</p>
<p>这时就可以在自己电脑上看到 <code>.ssh</code> 文件夹已经生成了：</p>
<p><img src="https://img-blog.csdnimg.cn/20191109172113518.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>打开 <code>.ssh</code> 可以看到三个文件：</p>
<p><img src="https://img-blog.csdnimg.cn/20191109172217738.jpg" alt=""></p>
<h2 id="在github上添加自己电脑上的-SSH-Key-，"><a href="#在github上添加自己电脑上的-SSH-Key-，" class="headerlink" title="在github上添加自己电脑上的 SSH Key ，"></a>在github上添加自己电脑上的 <code>SSH Key</code> ，</h2><p>找到 <code>github</code> 的 <code>Settings</code> 界面,然后点击 <code>SSH Keys and GPG Keys</code>, 会有如下界面：（因为我已经添加过了，所以这里不是空的）</p>
<p><img src="http://q39cj22ml.bkt.clouddn.com/1.jpg" alt=""></p>
<p>然后点击右上角 <code>NEW SSH Key</code>， 新建一个 <code>Key</code>：<br><img src="http://q39cj22ml.bkt.clouddn.com/3.jpg" alt=""></p>
<p>这里 <code>Title</code> 随便取就好，例如我的叫：<code>My SSH Key</code>；</p>
<p><code>Key</code> 里面的内容，就是第一步生成的 <code>.ssh</code> 文件里面的 <code>id_rsa.pub</code> 里面的内容，将内容拷贝至此就可以了,然后就添加成功了。</p>
<h2 id="上面的内容如果都做完了，就可以关联本地仓和远程仓了。"><a href="#上面的内容如果都做完了，就可以关联本地仓和远程仓了。" class="headerlink" title="上面的内容如果都做完了，就可以关联本地仓和远程仓了。"></a>上面的内容如果都做完了，就可以关联本地仓和远程仓了。</h2><p>首先在github上创建一个新空仓库：取名最好和本地仓库一致。<br><img src="/Git-%E9%85%8D%E7%BD%AE-SSH-Key/tesRepository.jpg" alt=""></p>
<p>这样就是一个空仓库了，仓库名叫 <code>test</code> 。然后我们在本地的同名仓库进行操作后就可以将本地仓库通过SSH上传至远程仓.<br>例如，我们添加一个新的文件 <code>readme.txt</code> 文件:<br><img src="https://img-blog.csdnimg.cn/20191109174519699.jpg" alt=""><br>然后提交至本地仓，常规操作如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git add readme.txt<br>$ git commit -m '第一次通过SSH提交至远程仓库'<br></code></pre></td></tr></table></figure>
<p>然后是将本地仓和远程仓关联，输入命令：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git remote add origin git@gitub.com/xxxx/test.git<br></code></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//上面的代码就是将本地仓和远程仓进行关,其中git@github.com:michaelliao/test.git</span><br><span class="hljs-comment">//是我们刚才创建的仓库名称,注意改成自己的仓库名称</span><br></code></pre></td></tr></table></figure>
<p>现在就可以把本地库通过 <code>SSH</code> 协议推送到远程库上：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git push -u origin master <span class="hljs-comment">//第一次提交至空仓库加上-u，</span><br>                            <span class="hljs-comment">//不是空仓库就不用使用 -u 参数了</span><br></code></pre></td></tr></table></figure>

<p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：（因为我提交了两次，可能有点不一样，但看到 <code>readme.txt</code> 这个而文件就说明成功了！</p>
<p><img src="https://img-blog.csdnimg.cn/20191109175820935.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>从现在起，只要本地作了提交，就可以通过命令：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git push origin master  <span class="hljs-comment">//此时就不用-u参数了</span><br></code></pre></td></tr></table></figure>
<p>把本地master分支的修改推送至gitHub.至此整个配置就结束了。</p>
]]></content>
      <categories>
        <category>Git教程</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git教程</title>
    <url>/2019/12/19/Git%E6%95%99%E7%A8%8B-1/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<em>初衷：之所以写Git系列教程，是因为自己在学习Git的过程走过许多的弯路，我曾经为学习Git在网上也找过很多的资源，但这些资源的质量良莠不齐，对Git进行系统和全面讲解的并不多，而且缺乏学习趣味性，导致我们学习者记住的只是一些命令，并没有了解Git作用范围和作用时机，但是初学者又不是经常使用Git，所以学了一段时间就很快忘记了</em>。  </p>
<a id="more"></a>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对上述问题，本教程从Git的历史入手介绍，逐层深入，图片和视频相结合，让你对学习过程一点也不枯燥，而且会让你记忆深刻。</p>
<p>如果你想快速了解Git或者只是为了应付面试需要了解版本控制系统的知识，看完该系列的文章你肯定会受益无穷。</p>
<hr>
<p><img src="https://img-blog.csdnimg.cn/20191130191352765.png" alt=""></p>
<h1 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h1><h2 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h2><ul>
<li><p>Git是一个版本控制系统，是目前最先进的分布式版本控制系统，在企业中使用的很多。</p>
</li>
<li><p>那什么又是版本控制系统呢？</p>
<p>  举个栗子：想必大家都完成过自己的毕业论文（那是一个痛苦的过程），我们需要对内容改之又改，每一次改动都很小心，总是不会删除之前的那一版（因为你还可能需要找回之前的版本），所以你总是会加一些修饰符：…修改版、…最终版、…最终版2、…最终最终版……乱七八糟。。。</p>
<p>  <img src="https://img-blog.csdnimg.cn/20191130193701775.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>  这就是大家熟悉的版本概念，我们在开发软件的时候其实也是这样，比如软件有v1.0 、v1.0.1、v1.0.2、v2.0版本等等，在一个最终的版本发布之前，可能需要漫长的时间来修改前一版本，还需要团队合作开发，所以如果采用手工管理版本的方式，恐怕就有点鞭长莫及了。</p>
</li>
</ul>
<hr>
<pre><code>所以我们进入了版本控制的时代，使用版本控制系统（Git）来保存我们之前的版本，
可以记录每一次修改的地方，方便的回退到之前的版本，还可以将别人的改定合并。

使用了版本控制软件后最终可能是下面这个样子的：</code></pre><table>
<thead>
<tr>
<th>版本</th>
<th>文件名</th>
<th>Author</th>
<th>Commit Date(提交时间)</th>
</tr>
</thead>
<tbody><tr>
<td>2.0</td>
<td>毕业论文修改版</td>
<td>me</td>
<td>19 - 11- 30 19:34</td>
</tr>
<tr>
<td>3.0</td>
<td>毕业论文最终版</td>
<td>me</td>
<td>19 - 11- 30 19:34</td>
</tr>
<tr>
<td>4.0</td>
<td>毕业论文最终最终版</td>
<td>me</td>
<td>19 - 11-30 19:35</td>
</tr>
<tr>
<td>5.0</td>
<td>毕业论文极限版</td>
<td>me</td>
<td>19 - 11-30 19:35</td>
</tr>
</tbody></table>
<p>不仅有详细的版本的信息，还可以看到作者、提交时间以及本次提交与上次版本不同之处等内容。</p>
<hr>
<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>Git只是一款软件，目前可以在windows、linux、以及macOS这些操作系统上安装使用。</p>
<hr>
<h2 id="在linux上安装"><a href="#在linux上安装" class="headerlink" title="在linux上安装"></a>在linux上安装</h2><p>首先你可以看自己的电脑上有没有安装Git, 输入命令：<font color = #FFD700> <code>git</code> </font>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git <br>Commond 'git' not found , but can be installed with:<br>sudo apt install git<br></code></pre></td></tr></table></figure>
<p>提示我们没有安装Git，但是可以使用命令 <code>sudo apt install git</code> 进行安装  </p>
<p>（<font color = #A52A2A>注意：我使用的是Ubuntu，其他的linux发行版的提示可能不一样，但只是命令稍微有点区别，如果系统没有给出提示，百度一下就可以）</font> </p>
<p>所以我们在我的Ubuntu下输入上述命令安装:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ sudo apt install git<br></code></pre></td></tr></table></figure>
<p>安装成功后查看版本:(版本是2.17.1)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git --version<br>git version <span class="hljs-number">2.17</span><span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure>
<p> <font color = #FF000>很简单的在linux下就安装完成了！</font></p>
<p><img src="https://img-blog.csdnimg.cn/20191130214309761.gif" alt=""></p>
<hr>
<h2 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h2><p><font color = rgb()>window的安装可以直接在官网上下载安装包：Git官网：<a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a></font></p>
<p>直接点击箭头指向的地方就可下载适合你电脑的最新版本Git，如下所示：<br><img src="https://img-blog.csdnimg.cn/20191130204748487.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""><br>    然后在电脑上看到下面的Git组件就说明安装成功了，包括<code>Git bash</code> 和 <code>Git GUI</code>等：</p>
<p><img src="https://img-blog.csdnimg.cn/20191130204953512.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p><font color = rgb()>然后打开Git bash，输入 <code>git --version</code> (类似于linux下的bash)查看 Git 版本号：</font></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git --version!<br>git version <span class="hljs-number">2.30</span><span class="hljs-number">.0</span> windows<span class="hljs-number">.1</span><br></code></pre></td></tr></table></figure>
<p>可以看到你下载的版本是适合windows下的 <code>2.30.0</code>。</p>
<p> <font color = #FF000>至此windows下安装结束！</font></p>
<hr>
<h2 id="全局配置（必须项）"><a href="#全局配置（必须项）" class="headerlink" title="全局配置（必须项）"></a>全局配置（必须项）</h2><p>安装完成后还需要进行全局配置（相当于注册QQ号、微信号的操作）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git config --global user.name <span class="hljs-string">"name"</span><br>$ git config --global user.email <span class="hljs-string">"email@example.com"</span><br></code></pre></td></tr></table></figure>
<p>注意：name是你自己取得名字，email是你自己的邮箱。至此整个配置就完成了。</p>
<hr>
<hr>
<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><p>首先，什么是版本库？</p>
<p>版本库就是仓库（Repository），说白了就是存储你的各个版本文件的地方，是可以使用Git进行管理的文件目录。目录下的任何文件都可以使用Git追踪到，包括文件的修改，删除等等操作可以使用Git。</p>
<p>创建仓库很简单:</p>
<p><font color = #A52A2A>（首先需要说明的一点是，以后我们的操作都是在linux上进行，但是你在windows下的Git bash是完全一样，命令也是一模一样）。</font> </p>
<p>首先创建一个目录（仓库），在windows下就是一个文件夹：</p>
<p>（选择自己认为合适地方创建即可）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ mkdir firstRep<br>$ cd firstRep<br></code></pre></td></tr></table></figure>

<p>如上命令，我们就创建了一个目录 <code>firstRep</code> ，（此时还只是一个单纯的目录）</p>
<p>初始化为Git仓库,使用命令命令：<code>git init</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git init<br>Initialized empty Git repository in ./home/codercxf/Desktop/firstRep/.git<br></code></pre></td></tr></table></figure>
<p>看到提示：已经初始化好了一个Git 仓库，在我的电脑上是如下位置：<code>./home/codercxf/Desktop/firstRep/.git</code>。</p>
<p>然后输入命令：<code>ll</code> 或者<code>ls -all</code>,查看目前仓库下的所有文件：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ ls -all<br>. .. .git<br></code></pre></td></tr></table></figure>
<p>可以看到命令 <code>git init</code> 生成了一个.git 的文件，表明此时你的目录（文件夹）已经是一个Git仓库了。</p>
<h2 id="为版本库添加一个文件"><a href="#为版本库添加一个文件" class="headerlink" title="为版本库添加一个文件"></a>为版本库添加一个文件</h2><p>首先此时我们初始化的仓库是空仓库，可以往仓库中添加一个文件了，例如我们添加一个 <code>readme.txt</code> 的文本文件（任意添加）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ vim readme.txt<br><span class="hljs-comment">//添加以下两句：</span><br>git is version control tool<br>git is the most advanced version control system<br></code></pre></td></tr></table></figure>
<p>然后将readme添加至仓库，使用命令： <code>git add :</code> </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git add readme.txt<br></code></pre></td></tr></table></figure>
<p>没有任何提示，说明添加成功；</p>
<p>然后将readme提交至仓库, 命令: <code>git commit</code> :</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git commit -m <span class="hljs-string">"first commit"</span><br>[master (root-commit) <span class="hljs-number">9</span>c93bb2] first commi<br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">2</span> insertions(+)<br> create mode <span class="hljs-number">100644</span> readme.txt<br></code></pre></td></tr></table></figure>
<p><font color = #A52A2A>注意：先跟着操作即可，后面就知道 <code>git add</code> 和 <code>git commit</code> 的内部原理。</font></p>
<p>说明：</p>
<pre><code>git commit 是提交的命令，-m是参数， 
后面跟着是本次的提交说明&quot;first commit&quot;，方便别人查看。

git commit 成功后会提示你：1 file changed（1个文件改动，readme.txt），
                          2 insertions(+) （readme.txt有2行内容）。</code></pre><p><img src="https://img-blog.csdnimg.cn/20191201143354911.gif" alt=""></p>
<p>总结：今天一共学习了以下几个内容：</p>
<p>1、初始化一个仓库：<code>git init</code></p>
<p>2、向仓库中添加文件：<code>git add &lt;fiile name&gt;</code></p>
<p>3、向仓库中提交文件：<code>git commit -m &#39;本次提交的说明信息&#39;</code></p>
<hr>
<h1 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h1><p>想要很好的使用Git，要非常清楚地一点就是Git暂存区和工作区的概念：</p>
<p>工作区就是我们的工作目录，比如我们的 <code>firstRep</code> 就是一个文件夹而已。</p>
<p>在我们的目录下有一个.git文件，它不属于工作区，而是我们的版本库。版本库中最重要的就是index（暂存区），还有Git自动为我们创建的第一个分支master分支，以及指向master的HEAD指针。<br><img src="https://img-blog.csdnimg.cn/20191201191524409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其实有了上述的概念，我们就很容易的知道创建仓库时候的两个命令的含义：</p>
<p> 第一步: <code>git add</code>  其实是将文件添加到暂存区；</p>
<p>第二步: <code>firstRep</code> 就是将暂存区的文件提交至当前分支（这里是 <code>master</code> 分支,其实我们完全可以自己创建分支，什么是分支以及如何创建见后续内容）。</p>
<pre><code>简单的说就是先将文件添加到暂存区，然后将所有在暂存区的文件一次性的提交至所
在的分支上（分支的概念后面会详细讲解）。</code></pre><hr>
<h2 id="实践练习"><a href="#实践练习" class="headerlink" title="实践练习"></a>实践练习</h2><p>首先，我们对 <code>readme.txt</code> 文件进行小修改，添加一句话至 <code>readme.txt</code> 中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ cat readme.txt <span class="hljs-comment">//cat:linux 的基本命令，查看文件内容</span><br>git is a version control tool<br>git is the most advaced version control system<br>i learn git now<br></code></pre></td></tr></table></figure>

<p>然后我们再创建一个文件叫 <code>study.txt</code> 然后随便添加一行文字：比如：<code>I Love You</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ cat study.txt<br>I Love You<br></code></pre></td></tr></table></figure>

<p>现在在工作区（也就是我们的目录下有两个文件 ：一个修改过的 <code>readme.txt</code>，还有一个是新文件 <code>study.txt</code>）：<br><img src="https://img-blog.csdnimg.cn/20191201194756885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>然后将修改过的readme.txt 和新文件study.txt 都添加至暂存区，<br>使用命令：<code>git add</code> :</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git add readme.txt<br>$ git add study.txt<br></code></pre></td></tr></table></figure>
<p>我们使用命令：<code>git status</code> 查看仓库当前的状态：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git status <br>On branch master<br>Changes to be committed:<br>  (use <span class="hljs-string">"git reset HEAD &lt;file&gt;..."</span> to unstage)<br><br>	modified:   readme.txt<br>	<span class="hljs-keyword">new</span> file:   study.txt<br></code></pre></td></tr></table></figure>
<p>提示我们已经将两个文件添加至暂存区，等待着 <code>commit</code> （提交）。</p>
<p>现在两个文件的状态应该是这样：<br><img src="https://img-blog.csdnimg.cn/20191201194602292.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>我们使用 <code>git commit</code> 一次性将两个文件提交至当前分支:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git commit -m <span class="hljs-string">"commit two files one time"</span><br>[master <span class="hljs-number">16e071</span>a] commit two files one time<br> <span class="hljs-number">2</span> files changed, <span class="hljs-number">2</span> insertions(+)<br> create mode <span class="hljs-number">100644</span> study.txt<br></code></pre></td></tr></table></figure>
<p>然后我们再来看仓库当前状态：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git status<br>On branch master<br>nothing to commit, working tree clean<br></code></pre></td></tr></table></figure>
<p>告诉我们现在是 <code>master</code> 分支，没有东西等待提交（也就是暂存区没有文件了）。</p>
<p><img src="https://img-blog.csdnimg.cn/2019120120003075.gif" alt=""></p>
<p>小结：<br>今天学习了两个概念：工作区和暂存区</p>
<p><font color = #FFD700>git add</font>   ：其实是将文件添加到暂存区；</p>
<p><font color = #FFD700>git commit</font> ： 就是将暂存区的文件提交至当前分支（这里是master分支）。</p>
<p><font color = #FFD700>git status</font> ：查看当前的状态</p>
<hr>
<hr>
<hr>
<h1 id="Git版本操作"><a href="#Git版本操作" class="headerlink" title="Git版本操作"></a>Git版本操作</h1><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>在前面我们已经修改了 <code>readme.txt</code> 文件如下内容：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">git is a version control tool<br>git is the most advaced version control system<br>i learn git now<br></code></pre></td></tr></table></figure>
<p>这里我们再添加一行：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">git is a version control tool<br>git is the most advaced version control system<br>i learn git now<br>i think git is better than SVN<br></code></pre></td></tr></table></figure>
<p>然后提交至仓库：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git add readme.txt<br>$ git commit -m <span class="hljs-string">"Git better than SVN"</span><br></code></pre></td></tr></table></figure>

<p>好，到现在，你还记得 <code>readme</code> 总共修改几次，提交了几次吗？</p>
<p>你可能会记得，总共三次是吧。但是如果一个文件我们需要修改几十次，上百次你还会记得吗？更别说记得每次具体修改哪里了。所以这就是Git发挥威力的时刻了，一个命令就告诉你readme 提交记录，以及每次的变化，命令：<code>git log</code>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git log<br>codercxf@codercxf-virtual-machine:~/Desktop/firstRep$ git log<br>commit a7616face803479e0573ff35bc18d00439cf28ff (HEAD -&gt; master)<br>Author: CoderCXF &lt;18251716983@163.com&gt;<br>Date:   Sun Dec 1 20:24:50 2019 +0800<br><br>    git better than SVN<br><br>commit 1ffeaf83cef2f3976dc3bb6fd1f17e2af2a4a94c<br>Author: CoderCXF &lt;xxxxxxxxxxx@xxx.com&gt;<br>Date:   Sun Dec 1 20:16:55 2019 +0800<br><br>    commit rwo files one time<br><br>commit 61de2ca94483b341f308338bf27f6628dc8d5757<br>Author: CoderCXF &lt;18251716983@163.com&gt;<br>Date:   Sun Dec 1 20:15:11 2019 +0800<br><br>    first commit<br></code></pre></td></tr></table></figure>
<p>所以，同志们，看到什么奇迹发生了没！！！</p>
<p>可以看到总共有三次提交 ：最近的一次是<font color = #A52A2A>“git better than SVN” </font>,还有之前的两次<font color = #A52A2A>“commit two files one time”</font >以及<font color = #A52A2A>“first commit”</font ></p>
<p>git 已经详细的记录每次历史提交，包括<code>commit号</code>、<code>Author</code>、<code>Date</code>等等信息。</p>
<hr>
<p><font color = rgb()><strong>git log 只是一个花絮，别忘了主题：如何回退到之前的版</strong></font></p>
<p>看到上面git log 命令返回的嘛，其中以一个是commit 号（版本号），就是  <code>a7616face..</code> </font>很长的一点数字，每一次提交的commit号都不一样，很容易理解，就是为了区分每一次提交，数字很长才不会造成重复。</p>
<p>可以这样说，只要知道了版本号就很容易回退到之前的任何一个版本，问题解决，所以到底该怎样做呢？</p>
<p>假如我们现在并不认为Git要比SVN好（虽然是事实^ ^）,也就是要回退到没有 <font color = #A52A2A> “git is better than SVN”</font>的版本，即 <font color = #A52A2A> “commit two files one time “</font>的版本</p>
<p>我们可以使用 <code>git reset</code>回退，前一个版本是 <code>HEAD^</code> ,前前一个版本是  <code>HEAD^^</code>, 以此类推，但是要是前10个版本，难道要写10个上标？当然不会那么愚蠢，例如回退10个就可以使用 <code>HEAD~10</code> 。</p>
<p>现在回退到前一个版本:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git reset --hard HEAD^<br></code></pre></td></tr></table></figure>
<p>此时来查看 <code>readme.txt</code> 文件内容是不是已经回退成功:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ cat readme.txt  <br>git is a version control tool<br>git is the most advaced version control system<br>i learn git now<br></code></pre></td></tr></table></figure>
<p>可以看到，果然 <font color = #A52A2A> “git is better than SVN”</font> 没有了，回退成功。我们也可以继续回退到前前一个版本，直接继续 <code>git reset</code> 即可。</p>
<p>但如果这时候，你还是觉得Git 比 SVN 好用，后悔之前的删除操作，还想要恢复到之前的版本，该怎么办？说分手了还能再说我爱你？是的，在Git的世界里是可以的：</p>
<p>可是我们使用 <code>git log</code> 查看的时候,已经没有了刚才删除的版本记录，该怎么办？</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">commit 1ffeaf83cef2f3976dc3bb6fd1f17e2af2a4a94c<br>Author: CoderCXF &lt;xxxxxxxxxxxx@xxx.com&gt;<br>Date:   Sun Dec 1 20:16:55 2019 +0800<br><br>    commit rwo files one time<br>commit 61de2ca94483b341f308338bf27f6628dc8d5757<br>Author: CoderCXF &lt;xxxxxxxxxxx@163.com&gt;<br>Date:   Sun Dec 1 20:15:11 2019 +0800<br><br>    first commit<br></code></pre></td></tr></table></figure>
<p>我们之前说只要知道commit号（一大串字符）就可以办到任何事，于是你就回去找刚才删除的那个版本号：找到了，就是<code>a7616f...</code>于是就可以回到刚才的版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git reset --hard a7616f<br></code></pre></td></tr></table></figure>
<p>版本号不用写全，Git会自动识别，但是也不能写的太过简单，否则就会产生冲突。<br>然后查看 <code>readme.txt</code> 中的内容是否恢复到上一版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">cat readme.txt<br>git is a version control tool<br>git is the most advaced version control system<br>i learn git now<br>i think git is better than SVN<br></code></pre></td></tr></table></figure>
<p>看到已经恢复了上一版本。</p>
<hr>
<p><img src="https://img-blog.csdnimg.cn/20191202211727434.gif" alt=""></p>
<p>小结：</p>
<p>记住：HEAD指向的是当前的版本</p>
<p>1）如果要回退到前一个版本使用 : <code>git reset --hard HEAD^</code>，返回前前一个版本使用的是：<code>git reset --hard HEAD^^</code>；                   </p>
<p> <font color = #A52A2A>(tips:之前的版本并未被删除!只是HEAD指针的指向变化)</font></p>
<p>2）使用<code>git log</code> 查看提交记录（包括版本号等信息）；</p>
<p>3）总之使用 <code>git reset --hard &lt;commmit id&gt;</code> 就能回退到指定的版本。</p>
<hr>
<hr>
<hr>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>   前一篇博客介绍了版本回退，回退到已经提交的版本。</p>
<p>但是，这里的修改和上一篇的回退概念不一样，修改要分两种情况讨论：</p>
<pre><code>1、只是在工作区（目录）进行了修改，还没有提交至暂存区（也就是要丢弃工作区的
                                                                  修改）。

2、在工作进行了修改，并且已经提交至暂存区。

下面我们分别讨论这两种情况如何撤销修改：</code></pre><h3 id="针对第一种情况"><a href="#针对第一种情况" class="headerlink" title="针对第一种情况"></a>针对第一种情况</h3><p>比如我们在<code>readme.txt</code>后加了一行<code>I dont like Git</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ cat readme.txt<br>git is a version control tool<br>git is the most advaced version control system<br>i learn git now<br>i think git is better than SVN<br>i dont like git<br></code></pre></td></tr></table></figure>
<p>这个时候你突然觉得不对，即使不喜欢也不能说出来啊，于是立刻想纠正它。</p>
<p>于是用 <code>git status</code>查看一下当前状态：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git status<br>On branch master<br>Changes <span class="hljs-keyword">not</span> staged <span class="hljs-keyword">for</span> commit:<br>  (use <span class="hljs-string">"git add &lt;file&gt;..."</span> to update what will be committed)<br>  (use <span class="hljs-string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)<br><br>	modified:   readme.<span class="hljs-function">txt<br><br>no changes added to <span class="hljs-title">commit</span> <span class="hljs-params">(use <span class="hljs-string">"git add"</span> <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> <span class="hljs-string">"git commit -a"</span>)</span></span><br></code></pre></td></tr></table></figure>
<p>发现我们只是在工作区更改了 <code>readme.txt</code> 文件，还没有 <code>add  或者 commit</code>，Git提示我们可以使用<code>git checkout --&lt;file&gt;--</code> 命令放弃在工作区进行的修改：于是乎，有了下面的一行代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git checkout -- readme.txt        <span class="hljs-comment">//注意：--与文件名之间有空格</span><br></code></pre></td></tr></table></figure>

<p>此时再来查看<code>readme.txt</code> 内容:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">cat readme.txt<br>git is a version control tool<br>git is the most advaced version control system<br>i learn git now<br>i think git is better than SVN<br></code></pre></td></tr></table></figure>

<pre><code>解惑：此时可能就会有小伙伴们问：为什么要使用git checkout 命令，
我直接打开readme.txt 手动删掉最后一行不就行了嘛，当然可以。

但是，我们这里只是对一个文件增加了一行，相当于修改了某一处的某一个功能，如果你
在写代码的时候一次性修改（或者添加很多行），你自己都不记得自己改了哪里，怎样
手动恢复呢？而且你手动删除之后还必须要 add 以及 commit 之后版本库中的版本才是
最新版本。

所以使用 git checkout 就解决了你很大的问题</code></pre><p><img src="https://img-blog.csdnimg.cn/20191203150426611.gif" alt=""></p>
<hr>
<h3 id="针对第二种情况"><a href="#针对第二种情况" class="headerlink" title="针对第二种情况"></a>针对第二种情况</h3><p>Please 记住：Git总是有办法的 !</p>
<p>假如现在已经是晚上九点了，而你还在公司摸鱼，996也该下班了不是，此时心里极其不爽，于是你在<code>readme.txt</code> 文档下写下：<code>cccccccccccccc</code>：还不小心添加到了暂存区：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ cat readme.txt<br>gait is a version control tool<br>git is the most advaced version control system<br>i learn git now<br>i think git is better than SVN<br>cccccccccc<br><br>$ git add readme.txt<br></code></pre></td></tr></table></figure>
<p>突然灵光乍现，你意识到这个问题，顿时心里一万个草泥马飘过，但是你应该庆幸的是还没有<code>commit</code> ，于是你使用<code>git status</code> 查看一下当前的状态：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git status<br>On branch master<br>Changes to be committed:<br>  (use <span class="hljs-string">"git reset HEAD &lt;file&gt;..."</span> to unstage)<br></code></pre></td></tr></table></figure>
<p>Git 告诉我们等待着提交（<font color = #A52A2A>changed to be committed</font>）,但是也同时提示你使用命令 <code>git reset HEAD &lt;file&gt;...</code> 可以撤销掉缓存区的修改。于是乎，又是一顿操作：</font></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git reset HEAD readme.txt	<br>Unstaged changes after reset:<br>M	readme.txt<br></code></pre></td></tr></table></figure>
<p>这时候再来查看一下状态：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git status<br>On branch master<br>Changes <span class="hljs-keyword">not</span> staged <span class="hljs-keyword">for</span> commit:<br>  (use <span class="hljs-string">"git add &lt;file&gt;..."</span> to update what will be committed)<br>  (use <span class="hljs-string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)<br><br>	modified:   readme.<span class="hljs-function">txt<br><br>no changes added to <span class="hljs-title">commit</span> <span class="hljs-params">(use <span class="hljs-string">"git add"</span> <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> <span class="hljs-string">"git commit -a"</span>)</span></span><br></code></pre></td></tr></table></figure>
<p>这个时候提示我们没有文件等待着提交（ <font color = #A52A2A>Changes not staged for commit:) </font>,  只是在工作区进行了修改，于是这就回到了第一种情况，还记得上面是什么命令吗？对，<code>git checkout -- &lt;file&gt;</code>(丢弃工作区的修改)</p>
<p>于是赶紧操作起来：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git checkout -- readme.txt<br></code></pre></td></tr></table></figure>
<p>然后查看当前的状态：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git status<br>On branch master<br>nothing to commit, working tree clean<br></code></pre></td></tr></table></figure>
<p>现在，终于结束了！这就是为自己的行为付出的代价，所以工作和生活上还是要谨言慎行！</p>
<p><img src="https://img-blog.csdnimg.cn/20191203150942886.gif" alt=""><br>小结：</p>
<p>本节课主要讲解了如何撤销修改的操作，分为两种情况：</p>
<p>1、只是在工作区（目录）进行了修改，还没有提交至暂存区（丢弃工作区的修改）<code>git checkout -- &lt;file&gt;</code></p>
<p>2、在工作进行了修改，并且已经提交至暂存区,分为两步撤销：1）把在暂存区的内容回退到工作区<code>git reset HEAD &lt;file &gt;</code>；2）丢弃工作区的修改：<code>git checkout -- &lt;file&gt;</code></p>
<hr>
<hr>
<hr>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>  1、删除版本库中的某个文件<br>  例如，我们在仓库中新建一个文件 :<code>testRemove.txt</code>，写一句话<code>Test how to delete file from Git repository</code>，并提交至版本库，随后将其删除：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ cat testRemove.txt<br>Test how to <span class="hljs-keyword">delete</span> file from Git repository<br><br>$ git add testRemove.txt<br>$ git commit -m <span class="hljs-string">"Test delete"</span><br></code></pre></td></tr></table></figure>

<p>首先在工作区删除文件： <code>rm &lt;fileName&gt;</code>, 然后Git会提示你工作区的目录和版本库的不一样，并且提醒你使用 <code>git rm  &lt;fileName&gt;</code> 从版本库中彻底删除：于是乎，有了如下操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ rm testRemove.txt<br><br>$ git status<br>on branch master<br>Changes <span class="hljs-keyword">not</span> staged <span class="hljs-keyword">for</span> commit:<br>  (use <span class="hljs-string">"git add/rm &lt;file&gt;..."</span> to update what will be committed)<br>  (use <span class="hljs-string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)<br><br>	deleted:    testRemove.<span class="hljs-function">txt<br><br>no changes added to <span class="hljs-title">commit</span> <span class="hljs-params">(use <span class="hljs-string">"git add"</span> <span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> <span class="hljs-string">"git commit -a"</span>)</span></span><br></code></pre></td></tr></table></figure>
<p>现在版本库提示你可以进行很多操作，就是有两种选择 1）确实是要从版本库删除，使用 <code>git rm &lt;fileName&gt;</code> ，就彻底删除了文件。2）放弃删除操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git rm testRemove.txt<br>rm 'testRemove.txt'<br><br>$ git status<br>On branch master<br>Changes to be committed:<br>  (use "git reset HEAD &lt;file&gt;..." to unstage)<br><br>	deleted:    testRemove.txt<br>	<br>$ git commit -m "remove testRemove"<br>[master 19ff64a] remove testRemove<br> 1 file changed, 1 deletion(-)<br> delete mode 100644 testRemove.tx<br></code></pre></td></tr></table></figure>
<p>可以看到已经彻底的删除了<code>testRemove.txt</code> 文件。</p>
<p>2）放弃删除。你可能只是脑子抽筋，错删了此文件，悔恨的拍大腿，但是，请记住Git总是有办法解决的。</p>
<p>因为你只是删除了工作区的文件，版本库中还依然存在，所以不用害怕。使用命令<code>git checkout -- &lt;file&gt;</code>即可：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git checkout -- testRemove.txt <span class="hljs-comment">//注意：--与文件名之间的空格</span><br><br>$ ll             <br>total <span class="hljs-number">20</span><br>drwxr-xr-x <span class="hljs-number">3</span> codercxf codercxf <span class="hljs-number">4096</span> <span class="hljs-number">12</span>月  <span class="hljs-number">3</span> <span class="hljs-number">15</span>:<span class="hljs-number">59</span> ./<br>drwxr-xr-x <span class="hljs-number">3</span> codercxf codercxf <span class="hljs-number">4096</span> <span class="hljs-number">12</span>月  <span class="hljs-number">1</span> <span class="hljs-number">20</span>:<span class="hljs-number">13</span> ../<br>drwxr-xr-x <span class="hljs-number">8</span> codercxf codercxf <span class="hljs-number">4096</span> <span class="hljs-number">12</span>月  <span class="hljs-number">3</span> <span class="hljs-number">15</span>:<span class="hljs-number">59</span> .git/<br>-rw-r--r-- <span class="hljs-number">1</span> codercxf codercxf  <span class="hljs-number">124</span> <span class="hljs-number">12</span>月  <span class="hljs-number">3</span> <span class="hljs-number">15</span>:<span class="hljs-number">06</span> readme.txt<br>-rw-r--r-- <span class="hljs-number">1</span> codercxf codercxf   <span class="hljs-number">44</span> <span class="hljs-number">12</span>月  <span class="hljs-number">3</span> <span class="hljs-number">15</span>:<span class="hljs-number">59</span> testRemove.txt<br></code></pre></td></tr></table></figure>
<p>看到<code>testRemove.txt</code>又回来了。</p>
<p><font color = #A52A2A>注意：这里的删除文件指的是删除版本库中的某一文件，在工作区（文件夹下的）直接删除即可（是无法恢复的）。</font></p>
<p>总结：<br>1、从版本库中删除文件：</p>
<p>第一步：在工作区删除文件 <code>rm &lt;file&gt;</code>；</p>
<p>第二步：确定删除版本库中的文件： <code>git rm &lt;file&gt;</code> ,然后重新提交：<code>git commit -m &quot;确认删除文件描述&quot;</code>。</p>
<p>2、如果已经在工作区删除，但是想恢复，此时版本库中该文件存在的，使用命令 <code>git checkout -- &lt;file&gt;</code> 即可以恢复原文件。</p>
<hr>
<p><img src="https://img-blog.csdnimg.cn/20191203190653898.gif" alt=""></p>
<hr>
<hr>
<hr>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>到现在为止，我们已经完全懂得Git仓库的概念（本地计算机上的一个文件夹）以及如何对仓库进行添加、提交、修改、撤销修改等等操作，可以很好的实现版本控制。</p>
<p>但是，我们之前操作的仓库都是在本地机进行操作，我们通常叫这种仓库叫：<font color = #FFD700> 本地仓库 </font>,但是Git是分布式的版本控制系统，不只是你自己进行操作，整个软件项目的运行肯定是团队成员共同完成。所以团队中的每一个人的各自的计算机上都会有该项目的一个拷贝，这也就是分布式的概念。</p>
<p>其实，情况是这样的，找一台电脑当做你公司的Git服务器，24小时开机，然后上班的时候大家都从这台服务器上克隆一份项目仓库到自己的电脑上，然后干完活之后大家再把自己的工作成果推送到（push）这台服务器上，也可以拉取其他人的提交。</p>
<p>好了，远程仓库的概念就由此产生了，我们把服务器上的这个仓库就叫做：<font color = #FFD700> 远程仓库 </font>。所以知道想要大家一起工作，并且能合并大家的项目就需要一台计Git服务器。现在我们是学习阶段，搭建一个服务器未免有点“杀鸡蔫用牛刀”的感觉，但是记得 <font color = #A52A2A>github </font>这个神奇的网站存在,我们完全可以把它当做自己的Git服务器。</p>
<p>所以下面就需要学习如何使用github这个网站，并且把这个网站当做自己的Git服务器。请移步至下一篇！</p>
<p> <img src="https://img-blog.csdnimg.cn/20191204100619684.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><pre><code>百度释义：gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为
     唯一的版本库格式进行托管，故名gitHub。</code></pre><p>我们一直用gitHub作为免费的远程仓库，如果是个人的开源项目，放到gitHub上是完全没有问题的。其实gitHub还是一个开源协作社区，通过gitHub，既可以让别人参与你的开源项目，你也可以参与别人的开源项目。</p>
<p><font color = rgb()>github具体的使用方法不再详细叙述，看两篇文章就能熟练的使用github。这里我们只要学习设置SSH。</font></p>
<hr>
<p>首先，设置SSH的原因：</p>
<p>SSH是传输协议（类似于FTP协议，但是SSH是加密传输）由于Git是支持SSH协议的，所以你往远程仓库提交或者从远程仓库下载就是通过该协议，所以，需要进行设置：</p>
<p><font color = #A52A2A>注意：Git也支持 <code>https</code> 协议,但是下载上传速度慢，所以还是建议大家设置SSH。以后就用SSH传输。</font></p>
<p>第一步，创建SSH。</p>
<p>在用户主目录下查看是否已经有.ssh目录，如果有，再查看是否有<code>id_rsa</code> 和 <code>id_rsa.public</code>,例如在windos 下就是如下两个文件：<br><img src="https://img-blog.csdnimg.cn/20191204091128240.jpg" alt=""><br>windows下的设置请看我的另一篇专门介绍如何设置的文章：</p>
<p><a href="https://blog.csdn.net/weixin_42119041/article/details/102988955" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42119041/article/details/102988955</a></p>
<p>下面详细介绍在了Linux下的如何操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ sudo ps -e|grep ssh<br>[sudo] password <span class="hljs-keyword">for</span> codercxf: <br>  <span class="hljs-number">1884</span> ?        <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> ssh-agent<br></code></pre></td></tr></table></figure>
<p>上面就说明我们已经启动了SSH,</p>
<p>于是我们跳到下一步。</p>
<p>如果没有这个创建SSH  key，则创建：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ ssh-keygen -t rsa -C <span class="hljs-string">"youremail@example.com"</span><br></code></pre></td></tr></table></figure>
<p><font color = #A52A2A>注意：上面括号“<a href="mailto:youremail@example.com">youremail@example.com</a>”应该填写你自己注册github使用的邮箱。</font></p>
<p>第二步，登录github，进入到<code>Settings</code>界面,点击<code>SSH and GPG keys</code>：<br><img src="https://img-blog.csdnimg.cn/20191204093830501.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""><br>点击 <code>New SSH key</code> ,新建一个 <code>SSH key</code> , 这里 <code>title</code> 任意填写，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容，点击<code>Add key</code> 完成配置。</p>
<p>至此整个SSH的设置就完成了，很简单有没有！</p>
<p>有了github后我们就可以进行远程仓库的部分了。</p>
<hr>
<p>附上github的标识符和吉祥物：</p>
<p> <code>标识符：</code></p>
<p><img src="https://img-blog.csdnimg.cn/20191204100831827.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""><br> <code>吉祥物：</code><br><img src="https://img-blog.csdnimg.cn/20191204100857982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<hr>
<hr>
<hr>
<h2 id="在github上创建远程仓库"><a href="#在github上创建远程仓库" class="headerlink" title="在github上创建远程仓库"></a>在github上创建远程仓库</h2><p><font color = #FFA500>设置好github的SSH key ，我们就可以在github上创建一个远程仓库，并且可以让这两个仓库同步（能从远程仓下载到本地仓以及将本地仓库推送至远程仓库）。</font></p>
<p>首先，创建一个远程仓库，远程仓库的名字最好与本地仓库一致，所以这里远程仓库的名字叫 <code>firstRep</code>，点击 <code>New</code> 创建：如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20191204102248560.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>我们填写仓库名，对仓库的描述即可，其他默认，点击 <code>Creat repository</code>，就创建成功了。如下所示：<br><img src="https://img-blog.csdnimg.cn/20191204103757478.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""><br>现在这个仓库是空仓库，因为我们还没添加任何的文件。</p>
<p> <font color = rgb()>现在我们要做的就是把这个远程仓库和我们的本地仓关联起来：</font></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git remote add origin git@github.com:xxxxxxx/firstRep.git<br></code></pre></td></tr></table></figure>
<p><font color = #A52A2A>注意：上面“<a href="mailto:git@gitgun.com">git@gitgun.com</a>: <strong>***</strong>/****”填写你自己的仓库地址。</font></p>
<p>是下面这个地址：<br><img src="https://img-blog.csdnimg.cn/20191204104226334.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>下面我们就可以把本地库的内容推送到远程库了，使用命令 <code>git push</code> :</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git push -u origin master<br>Counting objects: 13, done.<br>Compressing objects: 100% (9/9), doneGit<br>Writing objects: 100% (13/13), 1.17 KiB | 299.00 KiB/s, done.<br>Total 13 (delta 2), reused 0 (delta 0)<br>remote: Resolving deltas: 100% (2/2), done.<br>To github.com:xxxxxx/firstRep.git<br> * [new branch]      master -&gt; master<br>Branch 'master' set up to track remote branch 'master' from 'origin'.<br></code></pre></td></tr></table></figure>
<p>这说明已经推送成功。此时再来查看（记得刷新一下页面）<code>firstRep</code>这个远程仓库：<br><img src="https://img-blog.csdnimg.cn/20191204104825124.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>就会有我们之前在本地仓库的 <code>readme.txt</code> 文件了。</p>
<p>在第一次推送的时候是使用命令 <code>git push -u origin master</code> , 因为此时远程仓库还是空的，所以需要加上-u参数，下一次提交就可以不加-u这个参数了。比如我们更改了 <code>readme.txt</code> 文件，再推送到远程库的时候就可以使用命令：<code>git push origin master</code></p>
<pre><code>解惑：origin： 是 Git 默认的远程库的名字，
      master是远程库的分支，也就是我们要推送到的分支，后面学到分支的时候你可以
      创建其他的分支，也就是你可以推送到其他的分支上，这个后面再说。</code></pre><p>由于自己的开源项目很菜，暂时拿不出手，所以就把自己的github账号信息隐藏了，也没有了视频演示，多谢理解！</p>
<hr>
<p>小结：</p>
<p>1、远程仓库和本地仓库关联：</p>
<p>  <code>git remote add origin git@github.com:xxxxxxx/firstRep.git</code></p>
<p>2、本地仓推送到远程仓：<code>git push origin &lt;branch name&gt;</code> ,其中 <code>origin</code> 是Git</p>
<p> 默认的远程仓的名字，<code>origin</code>后面的 <code>branch name</code> 是远程仓库的分支，第一次提</p>
<p>交到空仓库加上<code>-u</code> 参数。</p>
<hr>
<hr>
<hr>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><pre><code>之前我们提到过分支的概念，但是没有详细介绍，只知道 Git 会默认的给我们创建一个
master分支（我们一般将其称为主分支）。

下面我们将讲解如何创建分支以及如何删除修改分支等等操作，那么现在我们要先对分支
有个概念。</code></pre><p>我们在本地仓中有 <code>master</code> 分支，所以通过命令 <code>git push origin master</code>推送到远程仓时候，即推送到远程仓中的 <code>master</code> 分支，可以在 <code>github</code> 上看到远程仓中只有 <code>master</code> 这一个分支。<br><img src="https://img-blog.csdnimg.cn/20191207125007116.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""><br>这就是分支的概念。</p>
<p>但是在实际的开发中，通常是不会在 <code>master</code> 分支上进行工作的。</p>
<p>比如你将要开发一个新的功能，需要对项目文件进行修改，如果你在主分支上修改，为了自己代码的安全考虑，把自己还没有写完的代码推送到远程 <code>master</code> 分支上，但是代码还没有全部完成，不完整的代码导致别人没办法工作。</p>
<p>所以一般的情况是你在自己新创建的分支上进行修改，等到代码全部完成之后，再将自己分支上的代码合并到主分支上，然后推送，这样，既能保证自己的代码安全，又不耽误别人工作。</p>
<p>这也是Git的精髓所在。</p>
<p>分支操作见下面内容。</p>
<hr>
<hr>
<hr>
<h2 id="创建与删除分支"><a href="#创建与删除分支" class="headerlink" title="创建与删除分支"></a>创建与删除分支</h2><p>创建分支：<code>git branch &lt;name&gt;</code>,例如我们创建一个<code>dev</code>新分支：：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git branch dev<br></code></pre></td></tr></table></figure>
<p>没有任何提示，表明已经创建成功。</p>
<p>可以使用命令 <code>git brach</code> 查看当前仓库的所有分支：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git branch<br>  dev<br>* master<br></code></pre></td></tr></table></figure>
<p>可以看到现在整个仓库有两个分支：<code>dev</code> 和 <code>master</code>, Git会使用 <code>*</code> 标记当前分支，所以现在是在主分支 <code>master</code> 分支上。</p>
<p>那么如何切换到<code>dev</code> 分支呢？ 使用命令：<code>git checkout &lt;name&gt;</code> :</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git checkout dev<br>Switched to branch 'dev'<br></code></pre></td></tr></table></figure>
<p>此时Git告诉我们，已经成功切换到 <code>dev</code> 分支，再来查看一下当前所有分支：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git brach <br>* dev<br>  master<br></code></pre></td></tr></table></figure>
<p>可以看到，当前确实是在<code>dev</code> 分支（*标记）。</p>
<p>其实也可以一步实现创建新分支并切换到该分支，例如我们创建 <code>feature</code> 分支并切换到该分支：使用命令：<code>git checkout -b &lt;name&gt;</code>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git checkout -b dev<br>Switched to a new branch 'dev'<br></code></pre></td></tr></table></figure>
<p>其实就是相当于上面的两条命令的合并：<code>git branch dev</code> 和 <code>git checkout dev</code>。</p>
<p>如果这个时候你已经不需要除了主分支之外的其他分支，即需要删除分支，使用命令：<code>git branch  -d &lt;name&gt;</code>即可, 比如我们要删除 <code>dev</code> 分支, 然后再查看删除后仓库的分支：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git branch -d dev<br>Deleted branch dev (was d6932d6).<br><br>$ git branch<br>* master<br></code></pre></td></tr></table></figure>
<p>由上面的几行英文就可以知道 <code>dev</code>分支被删除，现在仓库只剩下了 <code>master</code> 分支。</p>
<p><img src="https://img-blog.csdnimg.cn/20191210121304574.gif" alt=""><br>现在假如你开始在新的分支上工作，正如我们之前所说，工作完成后怎样合并到主分支上呢？ 现在给出解答：</p>
<p>比如现在在 <code>dev</code> 分支上修改了<code>readme.txt</code>文件，在末尾加上一句话：<code>creat new branch and merge to master</code>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git checkout dev<br>Switched to branch 'dev'<br>...//为readme.txt添加一行<br><br>$ cat readme.txt<br>git is a version control tool<br>git is the most advaced version control system<br>i learn git now<br>i think git is better than SVN<br>creat new branch and merge to master<br></code></pre></td></tr></table></figure>
<p>然后提交：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git add readme.txt<br>$ git commit -m 'test merge'<br>[dev d08d313] test merge<br> 1 file changed, 1 insertion(+)<br></code></pre></td></tr></table></figure>

<p>这个时候我们切换到 <code>master</code> 分支查看 <code>readme.txt</code> 文件内容：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git checkout master<br>M	readme.txt<br>Switched to branch 'master'<br>Your branch is up to date with 'origin/master'.<br><br>$ cat readme.txt<br>git is a version control tool<br>git is the most advaced version control system<br>i learn git now<br>i think git is better than SVN<br></code></pre></td></tr></table></figure>
<p>发现这个时候 <code>master</code> 添加的一行内容并不存在，这是因为你刚才是在dev分支，而此刻的 <code>master</code> 并没有改变。</p>
<p>现在我们将<code>dev</code>分支上的修改合并到<code>master</code> 分支，在<code>master</code> 分支上使用命令： <code>git merge dev</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git merge dev<br>Updating d6932d6..d08d313<br>Fast-forward<br> readme.txt | <span class="hljs-number">1</span> +<br> <span class="hljs-number">1</span> file changed, <span class="hljs-number">1</span> insertion(+)<br></code></pre></td></tr></table></figure>
<p>可以看到，Git告诉我们已经更新，使用的合并方式是 Fast-forward，然后再来看 <code>master</code> 分支下的 <code>readme.txt</code>的内容:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ cat readme.txt<br>git is a version control tool<br>git is the most advaced version control system<br>i learn git now<br>i think git is better than SVN<br>creat <span class="hljs-keyword">new</span> branch <span class="hljs-keyword">and</span> merge to master<br></code></pre></td></tr></table></figure>
<p>合并后，再查看readme.txt的内容，就可以看到，和 <code>dev</code> 分支的最新提交是完全一样的。</p>
<hr>
<p><img src="https://img-blog.csdnimg.cn/20191210121042947.gif" alt=""></p>
<p><code>git switch</code>:</p>
<p>注意到：我们切换分支的时候是使用 : <code>git checkout</code> 命令，但是我们在撤销修改的时候也是用的这个命令，所以Git为了区分，新引出了一个 <code>git switch</code> 命令英语切换分支，效果和 <code>git checkout</code>是一样的：</p>
<p>切换分支：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git switch dev<br>Switched to branch 'dev'<br></code></pre></td></tr></table></figure>
<p>创建并切换到该分支：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git switch -c feaature<br>git Switched to a new branch 'feature'<br></code></pre></td></tr></table></figure>
<pre><code>注意：新版本的才有git switch 命令，我的旧版本不存在这个命令，
     所以我是在windows上较新的版本操作的，其实没有关系，只要
     知道有 git switch 这回事就行，不能用就用 git checkout ,效果完全一样。</code></pre><hr>
<p>小结：</p>
<p>今天一共就学习了以下几个内容：</p>
<p>1）创建分支：<code>git branch &lt;name&gt;</code> ;</p>
<p>2）切换分支：<code>git checkout &lt;name&gt;</code> 或者是<code>git switch &lt;name&gt;</code>（旧版本没有）;</p>
<p>3）创建并切换到该分支： <code>git checkout -b &lt;name&gt;</code> 或者是 <code>git switch -c &lt;name&gt;</code>（旧版本没有）;</p>
<p>4）删除分支：<code>git branch -d &lt;name&gt;</code>;</p>
<p>5）合并分支：<code>git merge &lt;name&gt;</code>;</p>
<hr>
<hr>
<hr>
<h2 id="推送和抓取分支"><a href="#推送和抓取分支" class="headerlink" title="推送和抓取分支"></a>推送和抓取分支</h2><h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><p>我们在本地仓库上有 <code>master</code> 分支，但是如何将本地分支推送到远程分支呢，使用命令<code>git push</code> 即可：</p>
<p>例如，现在我们的本地仓库中有两个分支：<code>master</code> 和 <code>dev</code>, 现在将两个分支推送到远程仓库（github）上：<code>git push origin &lt;local branch name&gt;</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git push origin master<br>$ git push origin dev<br></code></pre></td></tr></table></figure>
<pre><code>注意：`origin` 是默认的远程仓库名字，后面的分支名字是本地仓库中分支的名字，
       这样，Git就会把本地分支推送到远程仓库对应的分支上（远程仓库没有，则
       Git会默认创建一个）</code></pre><p><img src="https://img-blog.csdnimg.cn/20191210122905877.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""><br>此外，并不是所有的分支都需要推送到远程仓，分支是否需要推送到远程仓，视自己的情况需要而定。</p>
<hr>
<h3 id="抓取分支："><a href="#抓取分支：" class="headerlink" title="抓取分支："></a>抓取分支：</h3><p> 你可以往远程仓推送自己的分支，同时也可以从克隆远程仓到本地（相当于下载），现在，我们在另外一台电脑上克隆仓库 <code>firstRep</code> ，使用命令<code>git clone &lt;repository name&gt;</code>:,现在我在windows上使用<code>Git bash</code>模仿你的一位同事：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git clone git@github.com:xxxxx/firstRep.git<br>Cloning into 'firstRep'...<br>remote: Enumerating objects: 16, done.<br>remote: Counting objects: 100% (16/16), done.<br>remote: Compressing objects: 100% (8/8), done.<br>remote: Total 16 (delta 3), reused 16 (delta 3), pack-reused 0<br>Receiving objects: 100% (16/16), done.<br>Resolving deltas: 100% (3/3), done.<br></code></pre></td></tr></table></figure>
<p>然后我们进入到仓库，然后再来查看克隆到本地的分支情况，使用命令<code>git branch</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ cd firstRep<br><br>$ git branch<br>* master<br></code></pre></td></tr></table></figure>

<p>ok,发现远程仓中的 <code>dev</code>分支并不存在，其实在默认情况下，你的小伙伴使用<code>git clone</code>命令只能看到本地的 <code>master</code> 分支。</p>
<p>现在你的小伙伴想要在 <code>dev</code> 分支上开发，就必须创建远程 <code>origin</code> 的 <code>dev</code> 分支到本地，使用下面的命令即可创建远程分支到本地：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git checkout -b dev origin/dev<br>Switched to a new branch 'dev'<br>Branch 'dev' set up to track remote branch 'dev' from 'origin'.<br></code></pre></td></tr></table></figure>
<p>看到Git此时告诉我们，我们可以使用这个本地分支 <code>dev</code> 分支来追踪远程库中的 <code>dev</code> 分支。</p>
<p>现在他就可以在这个<code>dev</code>分支上工作，并且推送到远程的 <code>dev</code> 分支。</p>
<p>例如：我们新创建一个 <code>a.txt</code> 文件添加并提交至仓库中：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ cat a.txt<br>test dev<br><br>$ git add readme.txt<br>$ git commit -m 'commit a.txt'<br>$ git commit -m 'commit a.txt'<br>[dev ca21716] commit a.txt<br> 1 file changed, 1 insertion(+)<br> create mode 100644 a.txt<br></code></pre></td></tr></table></figure>
<p>然后可以推送到远程库中的 <code>dev</code> 分支。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git push origin dev<br>Enumerating objects: <span class="hljs-number">4</span>, done.<br>Counting objects: <span class="hljs-number">100</span>% (<span class="hljs-number">4</span>/<span class="hljs-number">4</span>), done.<br>Delta compression <span class="hljs-keyword">using</span> up to <span class="hljs-number">12</span> threads<br>Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">2</span>/<span class="hljs-number">2</span>), done.<br>Writing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), <span class="hljs-number">276</span> bytes | <span class="hljs-number">276.00</span> KiB/s, done.<br>Total <span class="hljs-number">3</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br>To github.com:xxxxxx/firstRep.git<br>   a688f95..ca21716  dev -&gt; dev<br></code></pre></td></tr></table></figure>
<p>现在我们在远程仓中的 <code>dev</code> 分支看到的最新的提交是你的小伙伴提交内容。一切都是那么优雅，如丝般顺滑，但是到你这就可能会出错了，继续往下看。</p>
<p>碰巧你也新建了一个文件名一样的文件 <code>a.txt</code> ,添加了一些内容，然后想要推送至远程仓的 <code>dev</code> 分支：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ cat a.txt<br>$ git add a.txt<br>$ git commit -m 'commit this txt'<br>[master 0ac9d23] commit this txt<br> 1 file changed, 1 insertion(+)<br> create mode 100644 a.txt<br></code></pre></td></tr></table></figure>
<p>然后试图推送到远程仓：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git push origin dev<br>To github.com:xxx/firstRep.git<br> ! [rejected]        dev -&gt; dev (fetch first)<br>error: failed to push some refs to 'git@github.com:xxx/firstRep.git'<br>hint: Updates were rejected because the remote contains work that you do<br>hint: not have locally. This is usually caused by another repository pushing<br>hint: to the same ref. You may want to first integrate the remote changes<br>hint: (e.g., 'git pull ...') before pushing again.<br>hint: See the 'Note about fast-forwards' in 'git push --help' for details.<br></code></pre></td></tr></table></figure>
<p>可以看到推送失败了，仔细的读一下Git告诉我们失败的原因：通常是因为另外一个仓库推送了同样的文件至该分支上。</p>
<p>并且Git提示我们可以使用 <code>git pull</code> 抓取分支然后再推送：所以我们试着使用它提示的方法来抓取分支：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git pull origin dev<br>From github.com:xxxx/firstRep<br> * branch            dev        -&gt; FETCH_HEAD<br>Auto-merging a.txt<br>CONFLICT (add/add): Merge conflict in a.txt<br>Automatic merge failed; fix conflicts and then commit the result.<br></code></pre></td></tr></table></figure>
<p>可以看到出现冲突，于是我们可以解决冲突：<code>git status</code> 告诉我们冲突的文件：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git status<br>On branch master<br>Your branch is ahead of 'origin/master' by 1 commit.<br>  (use "git push" to publish your local commits)<br><br>You have unmerged paths.<br>  (fix conflicts and run "git commit")<br>  (use "git merge --abort" to abort the merge)<br><br>Unmerged paths:<br>  (use "git add &lt;file&gt;..." to mark resolution)<br><br>	both added:      a.txt<br><br>no changes added to commit (use "git add" and/or "git commit -a")<br></code></pre></td></tr></table></figure>
<p>可以看到存在冲突：查看 <code>a.txt</code> 文件的内容：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ cat a.txt<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>test pull<br>=======<br>test dev<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; ca217161af9b857fdede6699404ad322a0bb17b2<br></code></pre></td></tr></table></figure>

<p>可以看到Git使用不同的符号：<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>、<code>=======</code>、<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>，来标记出当前版本的<code>a.txt</code> 和 你的某个小伙伴提交的版本的 <code>a.txt</code> 的不同内容。</p>
<p>我们必须手动解决冲突：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//手动更改为：test pull and dev</span><br>$ cat a.txt<br>test pull <span class="hljs-keyword">and</span> dev<br></code></pre></td></tr></table></figure>
<p>然后再提交修改然后推送：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git push<br>Counting objects: <span class="hljs-number">2</span>, done.<br>Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">2</span>/<span class="hljs-number">2</span>), done.<br>Writing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">2</span>/<span class="hljs-number">2</span>), <span class="hljs-number">337</span> bytes | <span class="hljs-number">168.00</span> KiB/s, done.<br>Total <span class="hljs-number">2</span> (delta <span class="hljs-number">1</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br>remote: Resolving deltas: <span class="hljs-number">100</span>% (<span class="hljs-number">1</span>/<span class="hljs-number">1</span>), done.<br>To github.com:CoderCXF/firstRep.git<br>   c869bd5..fc6a2fd  dev -&gt; dev<br></code></pre></td></tr></table></figure>
<p>推送成功。在github 上也可以看到文件 <code>a.txt</code> 合并后的内容。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ cat a.txt<br>test pull <span class="hljs-keyword">and</span> dev<br></code></pre></td></tr></table></figure>
<p>ok, 至此所有的问题都已经成功解决。</p>
<hr>
<p>小结：</p>
<p>1、推送分支至远程仓：<code>git push origin &lt;branch name&gt;</code>，如果推送失败的话，先使用<code>git pull</code> 抓取分支，然后合并内容；</p>
<p>2、本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>
<p>3、如果需要自己关联到别人创建的另一个分支，使用命令：<br><code>git checkout -b &lt;branch name&gt; origin/&lt;branch name&gt;</code>，最好自己本地创建的分支和远程分支名称一样；</p>
<p>4、建立远程分支和本地分支的关联：使用命令：<br><code>git branch --set-upstream branch-name origin/branch-name</code></p>
<hr>
<hr>
<hr>
<h1 id="标签-tag"><a href="#标签-tag" class="headerlink" title="标签(tag)"></a>标签(tag)</h1><p>我们很早就介绍过 <code>commit id</code>（提交号）的概念，那是一串很长的数字，我们提交的每一个版本都会有一个commit id，很难找，所以，我们在发布每一个版本的时候经常都会打上一个标签（tag）,比如<code>v1.0</code>版本、<code>v1.0.1</code>版本等等。</p>
<p>有了<code>tag</code>就不再需要 <code>commit id</code>了，<code>tag</code>就是<code>commit id</code> 的一个别名，一个<code>tag</code>和一个<code>commit id</code>绑定。</p>
<p>所以怎样打标签呢？</p>
<p>请看下一篇文章：创建标签。</p>
<hr>
<hr>
<hr>
<h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>首先，我们切换到需要打标签的分支上：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git branch<br>* master<br>  ver<br><br>$ git checkout ver<br>Switched to branch 'ver'<br></code></pre></td></tr></table></figure>
<p>现在我们已经切换到分支<code>ver</code>上了。 使用命令 <code>git tag &lt;tagname&gt;</code>打上一个标签：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git tag v1<span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure>
<p>使用 <code>git tag</code> 查看所有的标签：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git tag<br>v1<span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure>
<p>这个时候就已经创建好了一个标签。</p>
<p>但是可能有人说，不对啊，之前你说 <code>tag</code> 就是 <code>commit id</code>  的一个别名，一个 <code>tag</code> 和一个 <code>commit id</code> 绑定，但是现在好像是凭空就打上一个标签，这不是骗人吗？这个标签打到哪个commit号上了呢？</p>
<p>不用着急，我们来查看一下历史版本记录：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git log <br>commit d6932d659f2b26c260760c85ecdcc576dedceb4c (HEAD -&gt; ver, <br>tag: v1.0, origin/master, master)<br>Author: CoderCXF &lt;18251716983@163.com&gt;<br>Date:   Tue Dec 3 19:03:22 2019 +0800<br><br>    the file has been deleted<br><br>commit 1d79486fe56604ce595433ad35aafc16cace4e97<br>Author: CoderCXF &lt;18251716983@163.com&gt;<br>Date:   Tue Dec 3 18:58:03 2019 +0800<br><br>    Test delete<br><br>commit f67aa75996c776f6ac41328a0f553513fe75df1e<br>Author: CoderCXF &lt;18251716983@163.com&gt;<br>Date:   Mon Dec 2 21:09:54 2019 +0800<br><br>    git is better than SVN<br><br>commit 1ffeaf83cef2f3976dc3bb6fd1f17e2af2a4a94c<br>Author: CoderCXF &lt;18251716983@163.com&gt;<br>Date:   Sun Dec 1 20:16:55 2019 +0800<br><br>    commit rwo files one time<br><br>commit 61de2ca94483b341f308338bf27f6628dc8d5757<br>Author: CoderCXF &lt;18251716983@163.com&gt;<br></code></pre></td></tr></table></figure>
<p>可以看到在最近的一次提交上出现了一个 <code>tag:v1.0</code> ,说明我们把标签打在了这次提交上面，即Git默认是打在最近的一次提交。</p>
<p>所以，如果我想在其他的commit后打上一个标签怎么搞呢，很简单，只要知道<code>commit id</code> 即可。</p>
<p>例如，我想在 <code>Test delete</code> 版本上打上一个标签，此版本的版本号是 <code>1d79486...</code>，于是有下面的命令：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git tag v0<span class="hljs-number">.0</span> <span class="hljs-number">1</span>d79486<br></code></pre></td></tr></table></figure>
<p>再用命令查看一下所有标签：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git tag<br>v0<span class="hljs-number">.0</span><br>v1<span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure>
<p>此时标签已经打上了，查看一下标签的具体信息，使用 <code>git show &lt;tagname&gt;</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git show v0<span class="hljs-number">.0</span><br>Author: CoderCXF &lt;xxxxxxxxxxx@xxx.com&gt;<br>Date:   Tue Dec <span class="hljs-number">3</span> <span class="hljs-number">18</span>:<span class="hljs-number">58</span>:<span class="hljs-number">03</span> <span class="hljs-number">2019</span> +<span class="hljs-number">0800</span><br><br>    Test <span class="hljs-keyword">delete</span><br></code></pre></td></tr></table></figure>
<p>可以看到标签确实是打在了<code>Test delete</code>这一版本之上。</p>
<p>还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git tag -a v0<span class="hljs-number">.0</span><span class="hljs-number">.1</span> -m <span class="hljs-string">"0.0.1 version"</span> f67aa<br></code></pre></td></tr></table></figure>
<p>这样就为 <code>git is better than SVN</code> 打上了标签，不信可以查看一下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git show v0<span class="hljs-number">.01</span><br>Author: CoderCXF &lt;<span class="hljs-number">18251716983</span>@<span class="hljs-number">163.</span>com&gt;<br>Date:   Mon Dec <span class="hljs-number">2</span> <span class="hljs-number">21</span>:<span class="hljs-number">09</span>:<span class="hljs-number">54</span> <span class="hljs-number">2019</span> +<span class="hljs-number">0800</span><br><br>    git is better than SVN<br></code></pre></td></tr></table></figure>
<p>看到果真如此。以上就是创建一个标签的过程。<br><img src="https://img-blog.csdnimg.cn/20191206111052418.gif" alt=""></p>
<hr>
<p>小结：</p>
<p>1）创建标签：<code>git tag &lt;tagname&gt;</code>；</p>
<p>2）为指定的版本创建标签：<code>git tag &lt;tagname&gt; &lt;commit id&gt;</code> ；</p>
<p>3）创建带有说明的标签：</p>
<p><code>git tag -a &lt;tagname&gt; -m &quot;tag描述信息&quot; &lt;commit id&gt;</code>；</p>
<p>4）查看仓库中所有的标签：<code>git tag</code></p>
<p>5）查看某一标签的信息： <code>git show &lt;tagname&gt;</code></p>
<hr>
<hr>
<hr>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>上一篇文章介绍了什么是标签以及如何创建标签，现在我们来看怎样具体的操作标签才能使得标签发挥其作用。</p>
<hr>
<p>比如删除标签的操作：<code>git tag -d &lt;tagname&gt;</code>；</p>
<p>现在我们删除标签 <code>v0.0.1</code>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git tag -d v0.0.1<br>Deleted tag 'v0.0.1' (was 413cd70)<br></code></pre></td></tr></table></figure>
<p>Git告诉我们 <code>v0.0.1</code> 已经删除了。</p>
<p>其实可能有的小伙伴们会看出来，我们创建的标签只是在本地仓，而对远程仓库毫无影响，所以其实我们是需要把标签推送到远程仓库的：使用命令：<code>git push</code></p>
<p>比如现在我们把标签 <code>v1.0</code> 推送到远程仓：</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git push origin v1.0<br>Warning: Permanently added the RSA host key for IP address 'xxxx.xxxx.xxxx.xxxx' to the list of known hosts.<br>Total 0 (delta 0), reused 0 (delta 0)<br>To github.com:CoderCXF/firstRep.git<br> * [new tag]         v1.0 -&gt; v1.0<br></code></pre></td></tr></table></figure>
<p>这个时候你登录github就可以看到 <code>1 release</code> :</p>
<p>如果你再推送一个标签至远程仓，就会看到 <code>2 releases</code>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git push origin v0.0<br>Warning: Permanently added the RSA host key for IP address 'xxxx.xxxx.xxxx.xxxx' to the list of known hosts.<br>Total 0 (delta 0), reused 0 (delta 0)<br>To github.com:CoderCXF/firstRep.git<br> * [new tag]         v0.0 -&gt; v0.0<br></code></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/2019120611292737.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/2019120611293550.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""></p>
<p>如果你已经把标签推送到远程仓库，还想删除，就得分两步进行了：</p>
<p>第一步：先从本地删除：<code>git tag -d &lt;tagname&gt;</code>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs cpp">$ git tag -d v0.0<br>Deleted tag 'v0.0' (was 1d79486)<br></code></pre></td></tr></table></figure>
<p>然后从远程删除：<code>git push origin :refs/tags/&lt;tagname&gt;</code>:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp">$ git push origin :refs/tags/v0<span class="hljs-number">.0</span><br>To github.com:xxxxxx/firstRep.git<br> - [deleted]         v0<span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure>
<p>这个时候完全删除干净了，登录github查看是否只剩下了 <code>v1.0</code> 这个标签：<br><img src="https://img-blog.csdnimg.cn/20191206113626297.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjExOTA0MQ==,size_16,color_FFFFFF,t_70" alt=""><br>看到确实<code>v0.0</code>标签被删除了。删除完成。<br><img src="https://img-blog.csdnimg.cn/20191206120237403.gif" alt=""></p>
<hr>
<hr>
<hr>
<p>参考：</p>
<p>【1】<a href="https://git-scm.com/book/zh/v2/" target="_blank" rel="noopener">Git 官网：安装Git</a></p>
<p>【2】<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰Git教程</a></p>
<p>【3】<a href="https://www.jianshu.com/p/a07027ba71a6" target="_blank" rel="noopener">简书：Git创建和删除分支</a></p>
<p>【4】<a href="https://juejin.im/entry/5a24e5796fb9a044fd1197eb" target="_blank" rel="noopener">如何利用Git中的tag管理项目版本号</a></p>
<p>【5】<a href="https://itbilu.com/other/relate/4yUYrTKlx.html" target="_blank" rel="noopener">Git标签管理－添加、查看、删除Git标签</a></p>
<p>【6】<a href="http://www.javaboy.org/2019/0612/git-tag.html" target="_blank" rel="noopener">Git 标签管理</a></p>
]]></content>
      <categories>
        <category>Git教程</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/12/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
